
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000923  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000817  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	78 c0       	rjmp	.+240    	; 0x1a6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 16000000
#include <util/delay.h>
#define PWM_CYCLE 20

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t digit[] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83, 0xBC, 0x80, 0xB0};
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	uint16_t count = 0, scount = 0, duty = 0;
	
	DDRA = 0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a bb       	out	0x1a, r24	; 26
	PORTA = digit[duty];
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	8b bb       	out	0x1b, r24	; 27
	DDRB &= ~(0x01); PORTB |= 0x01;
  e6:	87 b3       	in	r24, 0x17	; 23
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	88 bb       	out	0x18, r24	; 24
	DDRC |= 0x01;
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	84 bb       	out	0x14, r24	; 20
#define PWM_CYCLE 20

int main(void)
{
	uint8_t digit[] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83, 0xBC, 0x80, 0xB0};
	uint16_t count = 0, scount = 0, duty = 0;
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	e0 e0       	ldi	r30, 0x00	; 0
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
	DDRB &= ~(0x01); PORTB |= 0x01;
	DDRC |= 0x01;
	
	while (1)
	{
		if ((PINB & 0x01) == 0x00){		// 스위치가 눌리면
 104:	b0 99       	sbic	0x16, 0	; 22
 106:	18 c0       	rjmp	.+48     	; 0x138 <main+0x80>
			duty++;		// on_duty를 1 증가시킨다.
 108:	0f 5f       	subi	r16, 0xFF	; 255
 10a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (duty == 10) duty = 0;	// 만약 밝기가 최대면 밝기를 0으로 한다.
 10c:	0a 30       	cpi	r16, 0x0A	; 10
 10e:	11 05       	cpc	r17, r1
 110:	11 f4       	brne	.+4      	; 0x116 <main+0x5e>
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
			PORTA = digit[duty];	// 현재의 밝기를 FND로 표시한다.
 116:	a1 e0       	ldi	r26, 0x01	; 1
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ac 0f       	add	r26, r28
 11c:	bd 1f       	adc	r27, r29
 11e:	a0 0f       	add	r26, r16
 120:	b1 1f       	adc	r27, r17
 122:	8c 91       	ld	r24, X
 124:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x74>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x7e>
 136:	00 00       	nop
			_delay_ms(200);		// 디바운싱용 딜레이
		}
		if ((count % PWM_CYCLE) == 0){	// 20ms마다
 138:	9a 01       	movw	r18, r20
 13a:	ad ec       	ldi	r26, 0xCD	; 205
 13c:	bc ec       	ldi	r27, 0xCC	; 204
 13e:	24 d0       	rcall	.+72     	; 0x188 <__umulhisi3>
 140:	92 95       	swap	r25
 142:	82 95       	swap	r24
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	89 27       	eor	r24, r25
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	89 27       	eor	r24, r25
 14c:	64 e1       	ldi	r22, 0x14	; 20
 14e:	68 9f       	mul	r22, r24
 150:	90 01       	movw	r18, r0
 152:	69 9f       	mul	r22, r25
 154:	30 0d       	add	r19, r0
 156:	11 24       	eor	r1, r1
 158:	42 17       	cp	r20, r18
 15a:	53 07       	cpc	r21, r19
 15c:	29 f4       	brne	.+10     	; 0x168 <main+0xb0>
			PORTC |= 0x01;	// led를 켠다.
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	81 60       	ori	r24, 0x01	; 1
 162:	85 bb       	out	0x15, r24	; 21
			scount = 0;		// scount 초기화
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f0 e0       	ldi	r31, 0x00	; 0
		}
		if (scount == duty) PORTC &= ~(0x01);	
 168:	e0 17       	cp	r30, r16
 16a:	f1 07       	cpc	r31, r17
 16c:	19 f4       	brne	.+6      	; 0x174 <main+0xbc>
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	85 bb       	out	0x15, r24	; 21
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xc0>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xc6>
 17e:	00 00       	nop
		// scount가 on_duty와 일치하는 순간 led를 끈다.
		// on_duty가 클수록 led를 늦게 끄므로 led의 밝기가 증가하게 된다.
		
		_delay_ms(1);
		scount++;
 180:	31 96       	adiw	r30, 0x01	; 1
		count++;
 182:	4f 5f       	subi	r20, 0xFF	; 255
 184:	5f 4f       	sbci	r21, 0xFF	; 255
	}
 186:	be cf       	rjmp	.-132    	; 0x104 <main+0x4c>

00000188 <__umulhisi3>:
 188:	a2 9f       	mul	r26, r18
 18a:	b0 01       	movw	r22, r0
 18c:	b3 9f       	mul	r27, r19
 18e:	c0 01       	movw	r24, r0
 190:	a3 9f       	mul	r26, r19
 192:	70 0d       	add	r23, r0
 194:	81 1d       	adc	r24, r1
 196:	11 24       	eor	r1, r1
 198:	91 1d       	adc	r25, r1
 19a:	b2 9f       	mul	r27, r18
 19c:	70 0d       	add	r23, r0
 19e:	81 1d       	adc	r24, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	91 1d       	adc	r25, r1
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
