
Four_LED_Each.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008aa  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	98 c0       	rjmp	.+304    	; 0x1dc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

uint16_t count = 0;

int main(void)
{
	DDRA |= 0x0F;	// A 포트의 하위 네 비트를 출력 모드로 만든다.
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	8a bb       	out	0x1a, r24	; 26
	PORTA &= 0xF0;	// A 포트의 하위 네 비트를 0으로 초기화
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8b bb       	out	0x1b, r24	; 27
	
    while (1) 
    {
		if (!(count % 200)) PORTA ^= (0x01 << 0);
  ba:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c2:	9a 01       	movw	r18, r20
  c4:	36 95       	lsr	r19
  c6:	27 95       	ror	r18
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	36 95       	lsr	r19
  ce:	27 95       	ror	r18
  d0:	ab e7       	ldi	r26, 0x7B	; 123
  d2:	b4 e1       	ldi	r27, 0x14	; 20
  d4:	74 d0       	rcall	.+232    	; 0x1be <__umulhisi3>
  d6:	96 95       	lsr	r25
  d8:	87 95       	ror	r24
  da:	68 ec       	ldi	r22, 0xC8	; 200
  dc:	68 9f       	mul	r22, r24
  de:	90 01       	movw	r18, r0
  e0:	69 9f       	mul	r22, r25
  e2:	30 0d       	add	r19, r0
  e4:	11 24       	eor	r1, r1
  e6:	42 17       	cp	r20, r18
  e8:	53 07       	cpc	r21, r19
  ea:	21 f4       	brne	.+8      	; 0xf4 <main+0x46>
  ec:	9b b3       	in	r25, 0x1b	; 27
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 27       	eor	r24, r25
  f2:	8b bb       	out	0x1b, r24	; 27
		if (!(count % 100)) PORTA ^= (0x01 << 1);
  f4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	9a 01       	movw	r18, r20
  fe:	36 95       	lsr	r19
 100:	27 95       	ror	r18
 102:	36 95       	lsr	r19
 104:	27 95       	ror	r18
 106:	ab e7       	ldi	r26, 0x7B	; 123
 108:	b4 e1       	ldi	r27, 0x14	; 20
 10a:	59 d0       	rcall	.+178    	; 0x1be <__umulhisi3>
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	64 e6       	ldi	r22, 0x64	; 100
 112:	68 9f       	mul	r22, r24
 114:	90 01       	movw	r18, r0
 116:	69 9f       	mul	r22, r25
 118:	30 0d       	add	r19, r0
 11a:	11 24       	eor	r1, r1
 11c:	42 17       	cp	r20, r18
 11e:	53 07       	cpc	r21, r19
 120:	21 f4       	brne	.+8      	; 0x12a <main+0x7c>
 122:	9b b3       	in	r25, 0x1b	; 27
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	89 27       	eor	r24, r25
 128:	8b bb       	out	0x1b, r24	; 27
		if (!(count % 50)) PORTA ^= (0x01 << 2);
 12a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	9a 01       	movw	r18, r20
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	ab e7       	ldi	r26, 0x7B	; 123
 13a:	b4 e1       	ldi	r27, 0x14	; 20
 13c:	40 d0       	rcall	.+128    	; 0x1be <__umulhisi3>
 13e:	96 95       	lsr	r25
 140:	87 95       	ror	r24
 142:	62 e3       	ldi	r22, 0x32	; 50
 144:	68 9f       	mul	r22, r24
 146:	90 01       	movw	r18, r0
 148:	69 9f       	mul	r22, r25
 14a:	30 0d       	add	r19, r0
 14c:	11 24       	eor	r1, r1
 14e:	42 17       	cp	r20, r18
 150:	53 07       	cpc	r21, r19
 152:	21 f4       	brne	.+8      	; 0x15c <main+0xae>
 154:	9b b3       	in	r25, 0x1b	; 27
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	89 27       	eor	r24, r25
 15a:	8b bb       	out	0x1b, r24	; 27
		if (!(count % 25)) PORTA ^= (0x01 << 3);
 15c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	9a 01       	movw	r18, r20
 166:	af ea       	ldi	r26, 0xAF	; 175
 168:	b7 e4       	ldi	r27, 0x47	; 71
 16a:	29 d0       	rcall	.+82     	; 0x1be <__umulhisi3>
 16c:	28 1b       	sub	r18, r24
 16e:	39 0b       	sbc	r19, r25
 170:	36 95       	lsr	r19
 172:	27 95       	ror	r18
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	92 95       	swap	r25
 17a:	82 95       	swap	r24
 17c:	8f 70       	andi	r24, 0x0F	; 15
 17e:	89 27       	eor	r24, r25
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	89 27       	eor	r24, r25
 184:	69 e1       	ldi	r22, 0x19	; 25
 186:	68 9f       	mul	r22, r24
 188:	90 01       	movw	r18, r0
 18a:	69 9f       	mul	r22, r25
 18c:	30 0d       	add	r19, r0
 18e:	11 24       	eor	r1, r1
 190:	42 17       	cp	r20, r18
 192:	53 07       	cpc	r21, r19
 194:	21 f4       	brne	.+8      	; 0x19e <main+0xf0>
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	89 27       	eor	r24, r25
 19c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e9       	ldi	r24, 0x9F	; 159
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xf4>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0xfa>
 1a8:	00 00       	nop
		
		_delay_ms(1);
		count++;
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
 1bc:	7e cf       	rjmp	.-260    	; 0xba <main+0xc>

000001be <__umulhisi3>:
 1be:	a2 9f       	mul	r26, r18
 1c0:	b0 01       	movw	r22, r0
 1c2:	b3 9f       	mul	r27, r19
 1c4:	c0 01       	movw	r24, r0
 1c6:	a3 9f       	mul	r26, r19
 1c8:	70 0d       	add	r23, r0
 1ca:	81 1d       	adc	r24, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	91 1d       	adc	r25, r1
 1d0:	b2 9f       	mul	r27, r18
 1d2:	70 0d       	add	r23, r0
 1d4:	81 1d       	adc	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	91 1d       	adc	r25, r1
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
