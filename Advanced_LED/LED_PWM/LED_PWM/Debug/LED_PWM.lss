
LED_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bc  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	76 c0       	rjmp	.+236    	; 0x198 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

uint16_t count = 0, scount = 0;	// scount 변수는 on duty를 잰다.
 
int main(void)
{
	DDRA |= 0x0F;	// A 포트의 하위 네 비트를 출력 모드로 만든다.
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	8a bb       	out	0x1a, r24	; 26
	PORTA &= 0xF0;	// A 포트의 하위 네 비트를 0으로 초기화
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8b bb       	out	0x1b, r24	; 27
	
	while (1)
	{
		if (!(count % PWM_CYCLE)){
  ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <count>
  be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <count+0x1>
  c2:	9a 01       	movw	r18, r20
  c4:	ad ec       	ldi	r26, 0xCD	; 205
  c6:	bc ec       	ldi	r27, 0xCC	; 204
  c8:	58 d0       	rcall	.+176    	; 0x17a <__umulhisi3>
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	96 95       	lsr	r25
  d4:	87 95       	ror	r24
  d6:	9c 01       	movw	r18, r24
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	82 0f       	add	r24, r18
  ea:	93 1f       	adc	r25, r19
  ec:	48 17       	cp	r20, r24
  ee:	59 07       	cpc	r21, r25
  f0:	39 f4       	brne	.+14     	; 0x100 <main+0x52>
			PORTA |= 0x0f;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8f 60       	ori	r24, 0x0F	; 15
  f6:	8b bb       	out	0x1b, r24	; 27
			scount = 0;
  f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (scount == 8) PORTA &= ~(0x01 << 0);
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	08 97       	sbiw	r24, 0x08	; 8
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x64>
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	8b bb       	out	0x1b, r24	; 27
		if (scount == 6) PORTA &= ~(0x01 << 1);
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	06 97       	sbiw	r24, 0x06	; 6
 11c:	19 f4       	brne	.+6      	; 0x124 <main+0x76>
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	8b bb       	out	0x1b, r24	; 27
		if (scount == 4) PORTA &= ~(0x01 << 2);
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	04 97       	sbiw	r24, 0x04	; 4
 12e:	19 f4       	brne	.+6      	; 0x136 <main+0x88>
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	8b bb       	out	0x1b, r24	; 27
		if (scount == 2) PORTA &= ~(0x01 << 3);
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	02 97       	sbiw	r24, 0x02	; 2
 140:	19 f4       	brne	.+6      	; 0x148 <main+0x9a>
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e9       	ldi	r24, 0x9F	; 159
 14a:	9f e0       	ldi	r25, 0x0F	; 15
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x9e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xa4>
 152:	00 00       	nop
		_delay_ms(1);
		count++;
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 158:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 162:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
		scount++;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 178:	a0 cf       	rjmp	.-192    	; 0xba <main+0xc>

0000017a <__umulhisi3>:
 17a:	a2 9f       	mul	r26, r18
 17c:	b0 01       	movw	r22, r0
 17e:	b3 9f       	mul	r27, r19
 180:	c0 01       	movw	r24, r0
 182:	a3 9f       	mul	r26, r19
 184:	70 0d       	add	r23, r0
 186:	81 1d       	adc	r24, r1
 188:	11 24       	eor	r1, r1
 18a:	91 1d       	adc	r25, r1
 18c:	b2 9f       	mul	r27, r18
 18e:	70 0d       	add	r23, r0
 190:	81 1d       	adc	r24, r1
 192:	11 24       	eor	r1, r1
 194:	91 1d       	adc	r25, r1
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
