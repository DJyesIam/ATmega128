
PWM_Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000020c  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dd  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b4  00000000  00000000  00000d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7b d0       	rcall	.+246    	; 0x1aa <main>
  b4:	a9 c0       	rjmp	.+338    	; 0x208 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <disp_digit>:
		if(i%2) _delay_ms(1);
	}
}

void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	e0 50       	subi	r30, 0x00	; 0
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 81       	ld	r24, Z
  c2:	85 bb       	out	0x15, r24	; 21
	PORTG = 1<<d;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <disp_digit+0x16>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <disp_digit+0x12>
  d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
  d6:	08 95       	ret

000000d8 <disp_FND>:
		count++;
		disp_FND(duty);	
    }
}

void disp_FND(unsigned char num){
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <disp_FND+0xa>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <disp_FND+0xc>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	28 2f       	mov	r18, r24
	unsigned char fnd[4];
	fnd[3] = (num/1000)%10;
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	68 ee       	ldi	r22, 0xE8	; 232
  ee:	73 e0       	ldi	r23, 0x03	; 3
  f0:	64 d0       	rcall	.+200    	; 0x1ba <__divmodhi4>
  f2:	cb 01       	movw	r24, r22
  f4:	6a e0       	ldi	r22, 0x0A	; 10
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	60 d0       	rcall	.+192    	; 0x1ba <__divmodhi4>
  fa:	8c 83       	std	Y+4, r24	; 0x04
	fnd[2] = (num/100)%10;
  fc:	99 e2       	ldi	r25, 0x29	; 41
  fe:	29 9f       	mul	r18, r25
 100:	91 2d       	mov	r25, r1
 102:	11 24       	eor	r1, r1
 104:	8d ec       	ldi	r24, 0xCD	; 205
 106:	92 95       	swap	r25
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	9b 83       	std	Y+3, r25	; 0x03
	fnd[1] = (num/10)%10;
 10c:	28 9f       	mul	r18, r24
 10e:	91 2d       	mov	r25, r1
 110:	11 24       	eor	r1, r1
 112:	96 95       	lsr	r25
 114:	96 95       	lsr	r25
 116:	96 95       	lsr	r25
 118:	98 9f       	mul	r25, r24
 11a:	81 2d       	mov	r24, r1
 11c:	11 24       	eor	r1, r1
 11e:	86 95       	lsr	r24
 120:	86 95       	lsr	r24
 122:	86 95       	lsr	r24
 124:	88 0f       	add	r24, r24
 126:	38 2f       	mov	r19, r24
 128:	33 0f       	add	r19, r19
 12a:	33 0f       	add	r19, r19
 12c:	83 0f       	add	r24, r19
 12e:	39 2f       	mov	r19, r25
 130:	38 1b       	sub	r19, r24
 132:	3a 83       	std	Y+2, r19	; 0x02
	fnd[0] = num%10;
 134:	99 0f       	add	r25, r25
 136:	89 2f       	mov	r24, r25
 138:	88 0f       	add	r24, r24
 13a:	88 0f       	add	r24, r24
 13c:	98 0f       	add	r25, r24
 13e:	29 1b       	sub	r18, r25
 140:	29 83       	std	Y+1, r18	; 0x01
	for (int i=0; i<4; i++){
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	19 c0       	rjmp	.+50     	; 0x17a <disp_FND+0xa2>
		disp_digit(fnd[i],i);
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e0 0f       	add	r30, r16
 152:	f1 1f       	adc	r31, r17
 154:	60 2f       	mov	r22, r16
 156:	80 81       	ld	r24, Z
 158:	af df       	rcall	.-162    	; 0xb8 <disp_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9f e1       	ldi	r25, 0x1F	; 31
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <disp_FND+0x86>
 162:	00 c0       	rjmp	.+0      	; 0x164 <disp_FND+0x8c>
 164:	00 00       	nop
		_delay_ms(2);
		if(i%2) _delay_ms(1);
 166:	00 ff       	sbrs	r16, 0
 168:	06 c0       	rjmp	.+12     	; 0x176 <disp_FND+0x9e>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <disp_FND+0x96>
 172:	00 c0       	rjmp	.+0      	; 0x174 <disp_FND+0x9c>
 174:	00 00       	nop
	unsigned char fnd[4];
	fnd[3] = (num/1000)%10;
	fnd[2] = (num/100)%10;
	fnd[1] = (num/10)%10;
	fnd[0] = num%10;
	for (int i=0; i<4; i++){
 176:	0f 5f       	subi	r16, 0xFF	; 255
 178:	1f 4f       	sbci	r17, 0xFF	; 255
 17a:	04 30       	cpi	r16, 0x04	; 4
 17c:	11 05       	cpc	r17, r1
 17e:	24 f3       	brlt	.-56     	; 0x148 <disp_FND+0x70>
		disp_digit(fnd[i],i);
		_delay_ms(2);
		if(i%2) _delay_ms(1);
	}
}
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <initialize>:
void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
	PORTG = 1<<d;
}
void initialize(){
	DDRB |= 1 << PORTB4; 
 192:	87 b3       	in	r24, 0x17	; 23
 194:	80 61       	ori	r24, 0x10	; 16
 196:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	84 bb       	out	0x14, r24	; 20
	DDRG=0x0F;
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	TCCR0 |= TC0_FAST_PWM | TC0_NONINVERT_PWM | TC0_PRESCALE_32;
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	8b 66       	ori	r24, 0x6B	; 107
 1a6:	83 bf       	out	0x33, r24	; 51
 1a8:	08 95       	ret

000001aa <main>:

int main(void)
{
	unsigned int count = 0;
	unsigned char duty;
	initialize();
 1aa:	f3 df       	rcall	.-26     	; 0x192 <initialize>
void disp_digit(unsigned char num, unsigned char d);
unsigned char digit[10] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83, 0xBC, 0x80, 0xB0};

int main(void)
{
	unsigned int count = 0;
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char duty;
	initialize();
	
    while (1) 
    {
		duty = count % 256;
 1b0:	8c 2f       	mov	r24, r28
		OCR0 = duty;
 1b2:	c1 bf       	out	0x31, r28	; 49
		count++;
		disp_FND(duty);	
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	90 df       	rcall	.-224    	; 0xd8 <disp_FND>
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <main+0x6>

000001ba <__divmodhi4>:
 1ba:	97 fb       	bst	r25, 7
 1bc:	07 2e       	mov	r0, r23
 1be:	16 f4       	brtc	.+4      	; 0x1c4 <__divmodhi4+0xa>
 1c0:	00 94       	com	r0
 1c2:	06 d0       	rcall	.+12     	; 0x1d0 <__divmodhi4_neg1>
 1c4:	77 fd       	sbrc	r23, 7
 1c6:	08 d0       	rcall	.+16     	; 0x1d8 <__divmodhi4_neg2>
 1c8:	0b d0       	rcall	.+22     	; 0x1e0 <__udivmodhi4>
 1ca:	07 fc       	sbrc	r0, 7
 1cc:	05 d0       	rcall	.+10     	; 0x1d8 <__divmodhi4_neg2>
 1ce:	3e f4       	brtc	.+14     	; 0x1de <__divmodhi4_exit>

000001d0 <__divmodhi4_neg1>:
 1d0:	90 95       	com	r25
 1d2:	81 95       	neg	r24
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret

000001d8 <__divmodhi4_neg2>:
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255

000001de <__divmodhi4_exit>:
 1de:	08 95       	ret

000001e0 <__udivmodhi4>:
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	51 e1       	ldi	r21, 0x11	; 17
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__udivmodhi4_ep>

000001e8 <__udivmodhi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	a6 17       	cp	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__udivmodhi4_ep>
 1f2:	a6 1b       	sub	r26, r22
 1f4:	b7 0b       	sbc	r27, r23

000001f6 <__udivmodhi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	5a 95       	dec	r21
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <__udivmodhi4_loop>
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
