
Timer_Advanced_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000995  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a2  00000000  00000000  00001fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	94 c0       	rjmp	.+296    	; 0x13e <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a6 d0       	rcall	.+332    	; 0x210 <main>
  c4:	d9 c1       	rjmp	.+946    	; 0x478 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
void initialize(void);

unsigned char digit[10] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83, 0xBC, 0x80, 0xB0};
volatile unsigned int count=0, tick=0, cur_count=0, prev_count=0;

ISR(TIMER0_COMP_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	cur_count++;
  d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cur_count>
  da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_count+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_count+0x1>
  e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cur_count>
	switch (curState){
  e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <curState>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	b9 f0       	breq	.+46     	; 0x11e <__vector_15+0x56>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f0       	breq	.+4      	; 0xf8 <__vector_15+0x30>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	e1 f4       	brne	.+56     	; 0x130 <__vector_15+0x68>
		case READY: break;
		case RUN: case RERUN:
		{ tick++; count++; break; }
  f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
  fc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tick+0x1>
 106:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
 10a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <count>
 10e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count+0x1>
 118:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <count>
 11c:	09 c0       	rjmp	.+18     	; 0x130 <__vector_15+0x68>
		case PAUSE:
		{ tick++; break; }
 11e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
 122:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tick+0x1>
 12c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
	}
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_5>:

ISR(INT4_vect) {
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
	if (cur_count - prev_count > 100){
 150:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cur_count>
 154:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_count+0x1>
 158:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 15c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 160:	82 1b       	sub	r24, r18
 162:	93 0b       	sbc	r25, r19
 164:	85 36       	cpi	r24, 0x65	; 101
 166:	91 05       	cpc	r25, r1
 168:	00 f1       	brcs	.+64     	; 0x1aa <__vector_5+0x6c>
		prev_count = cur_count;
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cur_count>
 16e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_count+0x1>
 172:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 176:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		switch(curState){
 17a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <curState>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	51 f0       	breq	.+20     	; 0x196 <__vector_5+0x58>
 182:	28 f0       	brcs	.+10     	; 0x18e <__vector_5+0x50>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	59 f0       	breq	.+22     	; 0x19e <__vector_5+0x60>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	69 f0       	breq	.+26     	; 0x1a6 <__vector_5+0x68>
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <__vector_5+0x6c>
			case READY: // 대기 모드
			{ curState = RUN; break; }
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <curState>
 194:	0a c0       	rjmp	.+20     	; 0x1aa <__vector_5+0x6c>
			case RUN:	// 런 모드
			{ curState = PAUSE; break; }
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <curState>
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_5+0x6c>
			case PAUSE: // 일시정지 모드
			{ curState = RERUN; break; }
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <curState>
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__vector_5+0x6c>
			case RERUN: // 재가동 모드
			{ curState = READY; break; }
 1a6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <curState>
		}
	}
}
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <disp_digit>:
		}
	}
}

void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	85 bb       	out	0x15, r24	; 21
	PORTG = 0x01<<d;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <disp_digit+0x16>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <disp_digit+0x12>
 1d6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 1da:	08 95       	ret

000001dc <initialize>:
}

void initialize(void){
	DDRC = 0xff;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	84 bb       	out	0x14, r24	; 20
	DDRG = 0x0f;
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRE = 0x00; PORTE|=1<<PORTE4; // 내부풀업
 1e6:	12 b8       	out	0x02, r1	; 2
 1e8:	83 b1       	in	r24, 0x03	; 3
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	83 b9       	out	0x03, r24	; 3
	EICRA |= (1<<ISC41); // 하강에지
 1ee:	ea e6       	ldi	r30, 0x6A	; 106
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 83       	st	Z, r24
	EIMSK |= (1<<INT4); // EI 인터럽트 활성
 1f8:	89 b7       	in	r24, 0x39	; 57
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= 1<<CS02; // Prescale 64 -> 4us
 1fe:	83 b7       	in	r24, 0x33	; 51
 200:	84 60       	ori	r24, 0x04	; 4
 202:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1<<OCIE0; // 타이머 인터럽트
 204:	87 b7       	in	r24, 0x37	; 55
 206:	82 60       	ori	r24, 0x02	; 2
 208:	87 bf       	out	0x37, r24	; 55
	OCR0 = 250; // 4us x (255-6)= 1ms
 20a:	8a ef       	ldi	r24, 0xFA	; 250
 20c:	81 bf       	out	0x31, r24	; 49
 20e:	08 95       	ret

00000210 <main>:
	}
}

int main(void) {
	unsigned char num;
	initialize();
 210:	e5 df       	rcall	.-54     	; 0x1dc <initialize>
	sei();
 212:	78 94       	sei
	
	while (1){
		if ((tick % 10)==0){ //1자리
 214:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <tick>
 218:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <tick+0x1>
 21c:	9a 01       	movw	r18, r20
 21e:	ad ec       	ldi	r26, 0xCD	; 205
 220:	bc ec       	ldi	r27, 0xCC	; 204
 222:	1b d1       	rcall	.+566    	; 0x45a <__umulhisi3>
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	9c 01       	movw	r18, r24
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	82 0f       	add	r24, r18
 244:	93 1f       	adc	r25, r19
 246:	48 17       	cp	r20, r24
 248:	59 07       	cpc	r21, r25
 24a:	21 f5       	brne	.+72     	; 0x294 <main+0x84>
			num = (count/10)%10;
 24c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 250:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 254:	02 d1       	rcall	.+516    	; 0x45a <__umulhisi3>
 256:	ac 01       	movw	r20, r24
 258:	56 95       	lsr	r21
 25a:	47 95       	ror	r20
 25c:	56 95       	lsr	r21
 25e:	47 95       	ror	r20
 260:	56 95       	lsr	r21
 262:	47 95       	ror	r20
 264:	9a 01       	movw	r18, r20
 266:	f9 d0       	rcall	.+498    	; 0x45a <__umulhisi3>
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	9c 01       	movw	r18, r24
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
			disp_digit(num, 3);
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	24 2f       	mov	r18, r20
 28e:	28 1b       	sub	r18, r24
 290:	82 2f       	mov	r24, r18
 292:	94 df       	rcall	.-216    	; 0x1bc <disp_digit>
		}
		if ((tick % 10)==2){ //10자리
 294:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <tick>
 298:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <tick+0x1>
 29c:	9a 01       	movw	r18, r20
 29e:	ad ec       	ldi	r26, 0xCD	; 205
 2a0:	bc ec       	ldi	r27, 0xCC	; 204
 2a2:	db d0       	rcall	.+438    	; 0x45a <__umulhisi3>
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	9c 01       	movw	r18, r24
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	9a 01       	movw	r18, r20
 2c8:	28 1b       	sub	r18, r24
 2ca:	39 0b       	sbc	r19, r25
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	41 f5       	brne	.+80     	; 0x322 <main+0x112>
			num = (count/100)%10;
 2d2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 2d6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 2da:	36 95       	lsr	r19
 2dc:	27 95       	ror	r18
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	ab e7       	ldi	r26, 0x7B	; 123
 2e4:	b4 e1       	ldi	r27, 0x14	; 20
 2e6:	b9 d0       	rcall	.+370    	; 0x45a <__umulhisi3>
 2e8:	ac 01       	movw	r20, r24
 2ea:	56 95       	lsr	r21
 2ec:	47 95       	ror	r20
 2ee:	9a 01       	movw	r18, r20
 2f0:	ad ec       	ldi	r26, 0xCD	; 205
 2f2:	bc ec       	ldi	r27, 0xCC	; 204
 2f4:	b2 d0       	rcall	.+356    	; 0x45a <__umulhisi3>
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	9c 01       	movw	r18, r24
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	82 0f       	add	r24, r18
			disp_digit(num, 2);
 316:	93 1f       	adc	r25, r19
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	34 2f       	mov	r19, r20
 31c:	38 1b       	sub	r19, r24
 31e:	83 2f       	mov	r24, r19
		}
		if ((tick % 10)==4){ //100자리
 320:	4d df       	rcall	.-358    	; 0x1bc <disp_digit>
 322:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <tick>
 326:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <tick+0x1>
 32a:	9a 01       	movw	r18, r20
 32c:	ad ec       	ldi	r26, 0xCD	; 205
 32e:	bc ec       	ldi	r27, 0xCC	; 204
 330:	94 d0       	rcall	.+296    	; 0x45a <__umulhisi3>
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	9c 01       	movw	r18, r24
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	82 0f       	add	r24, r18
 352:	93 1f       	adc	r25, r19
 354:	9a 01       	movw	r18, r20
 356:	28 1b       	sub	r18, r24
 358:	39 0b       	sbc	r19, r25
 35a:	24 30       	cpi	r18, 0x04	; 4
 35c:	31 05       	cpc	r19, r1
 35e:	71 f5       	brne	.+92     	; 0x3bc <main+0x1ac>
			num = (count/1000)%10;
 360:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 364:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 368:	36 95       	lsr	r19
 36a:	27 95       	ror	r18
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	a5 ec       	ldi	r26, 0xC5	; 197
 376:	b0 e2       	ldi	r27, 0x20	; 32
 378:	70 d0       	rcall	.+224    	; 0x45a <__umulhisi3>
 37a:	ac 01       	movw	r20, r24
 37c:	52 95       	swap	r21
 37e:	42 95       	swap	r20
 380:	4f 70       	andi	r20, 0x0F	; 15
 382:	45 27       	eor	r20, r21
 384:	5f 70       	andi	r21, 0x0F	; 15
 386:	45 27       	eor	r20, r21
 388:	9a 01       	movw	r18, r20
 38a:	ad ec       	ldi	r26, 0xCD	; 205
 38c:	bc ec       	ldi	r27, 0xCC	; 204
 38e:	65 d0       	rcall	.+202    	; 0x45a <__umulhisi3>
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	96 95       	lsr	r25
 39a:	87 95       	ror	r24
 39c:	9c 01       	movw	r18, r24
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	82 0f       	add	r24, r18
			disp_digit(num, 1);
 3b0:	93 1f       	adc	r25, r19
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	34 2f       	mov	r19, r20
 3b6:	38 1b       	sub	r19, r24
 3b8:	83 2f       	mov	r24, r19
		}
		if ((tick % 10)==8){ //1000자리
 3ba:	00 df       	rcall	.-512    	; 0x1bc <disp_digit>
 3bc:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <tick>
 3c0:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <tick+0x1>
 3c4:	9a 01       	movw	r18, r20
 3c6:	ad ec       	ldi	r26, 0xCD	; 205
 3c8:	bc ec       	ldi	r27, 0xCC	; 204
 3ca:	47 d0       	rcall	.+142    	; 0x45a <__umulhisi3>
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	9c 01       	movw	r18, r24
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	9a 01       	movw	r18, r20
 3f0:	28 1b       	sub	r18, r24
 3f2:	39 0b       	sbc	r19, r25
 3f4:	28 30       	cpi	r18, 0x08	; 8
 3f6:	31 05       	cpc	r19, r1
 3f8:	09 f0       	breq	.+2      	; 0x3fc <main+0x1ec>
			num = (count/10000)%10;
 3fa:	0c cf       	rjmp	.-488    	; 0x214 <main+0x4>
 3fc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <count>
 400:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <count+0x1>
 404:	32 95       	swap	r19
 406:	22 95       	swap	r18
 408:	2f 70       	andi	r18, 0x0F	; 15
 40a:	23 27       	eor	r18, r19
 40c:	3f 70       	andi	r19, 0x0F	; 15
 40e:	23 27       	eor	r18, r19
 410:	a7 e4       	ldi	r26, 0x47	; 71
 412:	b3 e0       	ldi	r27, 0x03	; 3
 414:	22 d0       	rcall	.+68     	; 0x45a <__umulhisi3>
 416:	ac 01       	movw	r20, r24
 418:	56 95       	lsr	r21
 41a:	47 95       	ror	r20
 41c:	56 95       	lsr	r21
 41e:	47 95       	ror	r20
 420:	56 95       	lsr	r21
 422:	47 95       	ror	r20
 424:	9a 01       	movw	r18, r20
 426:	ad ec       	ldi	r26, 0xCD	; 205
 428:	bc ec       	ldi	r27, 0xCC	; 204
 42a:	17 d0       	rcall	.+46     	; 0x45a <__umulhisi3>
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	9c 01       	movw	r18, r24
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	82 0f       	add	r24, r18
			disp_digit(num, 0);
 44c:	93 1f       	adc	r25, r19
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	34 2f       	mov	r19, r20
 452:	38 1b       	sub	r19, r24
 454:	83 2f       	mov	r24, r19
 456:	b2 de       	rcall	.-668    	; 0x1bc <disp_digit>
 458:	dd ce       	rjmp	.-582    	; 0x214 <main+0x4>

0000045a <__umulhisi3>:
 45a:	a2 9f       	mul	r26, r18
 45c:	b0 01       	movw	r22, r0
 45e:	b3 9f       	mul	r27, r19
 460:	c0 01       	movw	r24, r0
 462:	a3 9f       	mul	r26, r19
 464:	70 0d       	add	r23, r0
 466:	81 1d       	adc	r24, r1
 468:	11 24       	eor	r1, r1
 46a:	91 1d       	adc	r25, r1
 46c:	b2 9f       	mul	r27, r18
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
