
Binary_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d3  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2b d0       	rcall	.+86     	; 0xf0 <main>
  9a:	42 c0       	rjmp	.+132    	; 0x120 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay>:
// 스위치를 누를 때마다 1씩 증가되는 2진 카운트

#include <avr/io.h>

void delay(unsigned int millisec){	// ms 단위로 딜레이를 주는 함수
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <delay+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <delay+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	for (i = 0; i < millisec; i++)
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	14 c0       	rjmp	.+40     	; 0xd8 <delay+0x3a>
	for (j = 0; j < 1000; j++);
  b0:	1c 82       	std	Y+4, r1	; 0x04
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <delay+0x24>
  b6:	2b 81       	ldd	r18, Y+3	; 0x03
  b8:	3c 81       	ldd	r19, Y+4	; 0x04
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	3c 83       	std	Y+4, r19	; 0x04
  c0:	2b 83       	std	Y+3, r18	; 0x03
  c2:	2b 81       	ldd	r18, Y+3	; 0x03
  c4:	3c 81       	ldd	r19, Y+4	; 0x04
  c6:	28 3e       	cpi	r18, 0xE8	; 232
  c8:	33 40       	sbci	r19, 0x03	; 3
  ca:	ac f3       	brlt	.-22     	; 0xb6 <delay+0x18>

#include <avr/io.h>

void delay(unsigned int millisec){	// ms 단위로 딜레이를 주는 함수
	volatile int i,j;
	for (i = 0; i < millisec; i++)
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	3a 81       	ldd	r19, Y+2	; 0x02
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	3a 83       	std	Y+2, r19	; 0x02
  d6:	29 83       	std	Y+1, r18	; 0x01
  d8:	29 81       	ldd	r18, Y+1	; 0x01
  da:	3a 81       	ldd	r19, Y+2	; 0x02
  dc:	28 17       	cp	r18, r24
  de:	39 07       	cpc	r19, r25
  e0:	38 f3       	brcs	.-50     	; 0xb0 <delay+0x12>
	for (j = 0; j < 1000; j++);
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
	// DDRA |= 0x0F;	// PORTA의 하위 네 비트를 출력 상태(1)로 만든다.
	DDRA |= ((1<<PORTA0) | (1<<PORTA1) | (1<<PORTA2)| (1<<PORTA3));  
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	8f 60       	ori	r24, 0x0F	; 15
  f4:	8a bb       	out	0x1a, r24	; 26
	// 위와 같은 코드. 핀이 나중에 바뀌었을 때 16진수를 16진수를 계산할 필요가 없다. 다른 부분에도 적용 가능
	PORTA &= !0x0F;	// PORTA의 하위 네 비트를 0으로 초기화한다.
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	1b ba       	out	0x1b, r1	; 27
	DDRB &= !0x01;	// PORTB의 0번 핀을 입력 상태(0)로 만든다.
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	17 ba       	out	0x17, r1	; 23
	PORTB |= 0x01;	// PORTB의 0번째 핀을 1로 만든다.(내부 풀업 저항 사용 목적)
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	81 60       	ori	r24, 0x01	; 1
 102:	88 bb       	out	0x18, r24	; 24
	
	uint8_t count = 0x00;	// 스위치를 누를 때마다 증가할 카운트 변수
 104:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{	
		if (!(PINB & 0x01)){	// 스위치가 눌리면
 106:	b0 99       	sbic	0x16, 0	; 22
 108:	04 c0       	rjmp	.+8      	; 0x112 <main+0x22>
			count++;
 10a:	cf 5f       	subi	r28, 0xFF	; 255
			delay(200);
 10c:	88 ec       	ldi	r24, 0xC8	; 200
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	c6 df       	rcall	.-116    	; 0x9e <delay>
		}
		PORTA = (PORTA & 0xF0) | (count & 0x0F);	// PORTA의 상위 네 비트는 원래 값으로 유지하면서 count 변수의 하위 4비트만 취함
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	9c 2f       	mov	r25, r28
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	89 2b       	or	r24, r25
 11c:	8b bb       	out	0x1b, r24	; 27
	}
 11e:	f3 cf       	rjmp	.-26     	; 0x106 <main+0x16>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
