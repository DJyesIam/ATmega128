
Four_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b1  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2b d0       	rcall	.+86     	; 0xf0 <main>
  9a:	70 c0       	rjmp	.+224    	; 0x17c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay>:
// 네 개의 LED를 순서대로 켰다가 꺼지게 한다.


void delay(unsigned int millisec){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <delay+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <delay+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	volatile int i,j;
	
	for (i = 0; i < millisec; i++)
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	14 c0       	rjmp	.+40     	; 0xd8 <delay+0x3a>
		for (j = 0; j < 1000; j++);
  b0:	1c 82       	std	Y+4, r1	; 0x04
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <delay+0x24>
  b6:	2b 81       	ldd	r18, Y+3	; 0x03
  b8:	3c 81       	ldd	r19, Y+4	; 0x04
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	3c 83       	std	Y+4, r19	; 0x04
  c0:	2b 83       	std	Y+3, r18	; 0x03
  c2:	2b 81       	ldd	r18, Y+3	; 0x03
  c4:	3c 81       	ldd	r19, Y+4	; 0x04
  c6:	28 3e       	cpi	r18, 0xE8	; 232
  c8:	33 40       	sbci	r19, 0x03	; 3
  ca:	ac f3       	brlt	.-22     	; 0xb6 <delay+0x18>


void delay(unsigned int millisec){
	volatile int i,j;
	
	for (i = 0; i < millisec; i++)
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	3a 81       	ldd	r19, Y+2	; 0x02
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	3a 83       	std	Y+2, r19	; 0x02
  d6:	29 83       	std	Y+1, r18	; 0x01
  d8:	29 81       	ldd	r18, Y+1	; 0x01
  da:	3a 81       	ldd	r19, Y+2	; 0x02
  dc:	28 17       	cp	r18, r24
  de:	39 07       	cpc	r19, r25
  e0:	38 f3       	brcs	.-50     	; 0xb0 <delay+0x12>
		for (j = 0; j < 1000; j++);
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x0F;	// A0, A1, A2, A3 출력 모드
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;	// 출력 상태 0으로 초기화
  f4:	1b ba       	out	0x1b, r1	; 27
    while (1) 
    {
		
		for (int i = 0; i < 3; i++){
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	1b c0       	rjmp	.+54     	; 0x132 <main+0x42>
			PORTA &= ~((0x01) << i);
  fc:	3b b3       	in	r19, 0x1b	; 27
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	0c 2e       	mov	r0, r28
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x1c>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x18>
 110:	24 2f       	mov	r18, r20
 112:	20 95       	com	r18
 114:	23 23       	and	r18, r19
 116:	2b bb       	out	0x1b, r18	; 27
			PORTA |= (0x01) << (i + 1);
 118:	2b b3       	in	r18, 0x1b	; 27
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	0c 2e       	mov	r0, r28
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x34>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <main+0x30>
 128:	82 2b       	or	r24, r18
 12a:	8b bb       	out	0x1b, r24	; 27
			delay(1000);
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	b6 df       	rcall	.-148    	; 0x9e <delay>
	DDRA = 0x0F;	// A0, A1, A2, A3 출력 모드
	PORTA = 0x00;	// 출력 상태 0으로 초기화
    while (1) 
    {
		
		for (int i = 0; i < 3; i++){
 132:	c3 30       	cpi	r28, 0x03	; 3
 134:	d1 05       	cpc	r29, r1
 136:	14 f3       	brlt	.-60     	; 0xfc <main+0xc>
 138:	c3 e0       	ldi	r28, 0x03	; 3
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	1b c0       	rjmp	.+54     	; 0x174 <main+0x84>
			PORTA |= (0x01) << (i + 1);
			delay(1000);
		}
		
		for (int i = 3; i > 0; i--){
			PORTA &= ~((0x01) << i);
 13e:	3b b3       	in	r19, 0x1b	; 27
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	0c 2e       	mov	r0, r28
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0x5e>
 14a:	44 0f       	add	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <main+0x5a>
 152:	24 2f       	mov	r18, r20
 154:	20 95       	com	r18
 156:	23 23       	and	r18, r19
 158:	2b bb       	out	0x1b, r18	; 27
			PORTA |= (0x01) << (i - 1);
 15a:	2b b3       	in	r18, 0x1b	; 27
 15c:	21 97       	sbiw	r28, 0x01	; 1
 15e:	0c 2e       	mov	r0, r28
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x76>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <main+0x72>
 16a:	82 2b       	or	r24, r18
 16c:	8b bb       	out	0x1b, r24	; 27
			delay(1000);
 16e:	88 ee       	ldi	r24, 0xE8	; 232
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	95 df       	rcall	.-214    	; 0x9e <delay>
			PORTA &= ~((0x01) << i);
			PORTA |= (0x01) << (i + 1);
			delay(1000);
		}
		
		for (int i = 3; i > 0; i--){
 174:	1c 16       	cp	r1, r28
 176:	1d 06       	cpc	r1, r29
 178:	14 f3       	brlt	.-60     	; 0x13e <main+0x4e>
 17a:	bd cf       	rjmp	.-134    	; 0xf6 <main+0x6>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
