
tone3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000852  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000852  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c48  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000068d  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7a d1       	rcall	.+756    	; 0x3a8 <main>
  b4:	cc c3       	rjmp	.+1944   	; 0x84e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <beep>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <util/delay.h>
#define HALF_CYC 500000UL
#define M0 1<<0

void beep(int pin, uint16_t on_time, uint16_t off_time){
  b8:	4f 92       	push	r4
  ba:	5f 92       	push	r5
  bc:	6f 92       	push	r6
  be:	7f 92       	push	r7
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ea 01       	movw	r28, r20
	PORTC |= M0;
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	85 bb       	out	0x15, r24	; 21
	_delay_us(on_time);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9b d2       	rcall	.+1334   	; 0x61c <__floatunsisf>
  e6:	6b 01       	movw	r12, r22
  e8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
  ea:	2b ea       	ldi	r18, 0xAB	; 171
  ec:	3a ea       	ldi	r19, 0xAA	; 170
  ee:	4a ea       	ldi	r20, 0xAA	; 170
  f0:	50 e4       	ldi	r21, 0x40	; 64
  f2:	4a d3       	rcall	.+1684   	; 0x788 <__mulsf3>
  f4:	4b 01       	movw	r8, r22
  f6:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	50 e4       	ldi	r21, 0x40	; 64
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	41 d3       	rcall	.+1666   	; 0x788 <__mulsf3>
 106:	2b 01       	movw	r4, r22
 108:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	ea d1       	rcall	.+980    	; 0x4ec <__cmpsf2>
 118:	88 23       	and	r24, r24
 11a:	0c f4       	brge	.+2      	; 0x11e <beep+0x66>
 11c:	5c c0       	rjmp	.+184    	; 0x1d6 <beep+0x11e>
		__ticks = 1;
	else if (__tmp2 > 65535)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	3f ef       	ldi	r19, 0xFF	; 255
 122:	4f e7       	ldi	r20, 0x7F	; 127
 124:	57 e4       	ldi	r21, 0x47	; 71
 126:	c3 01       	movw	r24, r6
 128:	b2 01       	movw	r22, r4
 12a:	2a d3       	rcall	.+1620   	; 0x780 <__gesf2>
 12c:	18 16       	cp	r1, r24
 12e:	0c f0       	brlt	.+2      	; 0x132 <beep+0x7a>
 130:	3d c0       	rjmp	.+122    	; 0x1ac <beep+0xf4>
	{
		_delay_ms(__us / 1000.0);
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	4a e7       	ldi	r20, 0x7A	; 122
 138:	54 e4       	ldi	r21, 0x44	; 68
 13a:	c7 01       	movw	r24, r14
 13c:	b6 01       	movw	r22, r12
 13e:	da d1       	rcall	.+948    	; 0x4f4 <__divsf3>
 140:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 142:	5c 01       	movw	r10, r24
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	4a e7       	ldi	r20, 0x7A	; 122
 14a:	55 e4       	ldi	r21, 0x45	; 69
 14c:	1d d3       	rcall	.+1594   	; 0x788 <__mulsf3>
 14e:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 150:	7c 01       	movw	r14, r24
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e8       	ldi	r20, 0x80	; 128
 158:	5f e3       	ldi	r21, 0x3F	; 63
 15a:	c8 d1       	rcall	.+912    	; 0x4ec <__cmpsf2>
 15c:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 15e:	04 f1       	brlt	.+64     	; 0x1a0 <beep+0xe8>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	3f ef       	ldi	r19, 0xFF	; 255
 164:	4f e7       	ldi	r20, 0x7F	; 127
 166:	57 e4       	ldi	r21, 0x47	; 71
 168:	c7 01       	movw	r24, r14
 16a:	b6 01       	movw	r22, r12
 16c:	09 d3       	rcall	.+1554   	; 0x780 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16e:	18 16       	cp	r1, r24
 170:	9c f4       	brge	.+38     	; 0x198 <beep+0xe0>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	c5 01       	movw	r24, r10
 17c:	b4 01       	movw	r22, r8
 17e:	04 d3       	rcall	.+1544   	; 0x788 <__mulsf3>
 180:	21 d2       	rcall	.+1090   	; 0x5c4 <__fixunssfsi>
 182:	06 c0       	rjmp	.+12     	; 0x190 <beep+0xd8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 184:	80 e9       	ldi	r24, 0x90	; 144
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	f1 f7       	brne	.-4      	; 0x188 <beep+0xd0>
 18c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	71 09       	sbc	r23, r1
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	b9 f7       	brne	.-18     	; 0x184 <beep+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 196:	20 c0       	rjmp	.+64     	; 0x1d8 <beep+0x120>
 198:	c7 01       	movw	r24, r14
 19a:	b6 01       	movw	r22, r12
 19c:	13 d2       	rcall	.+1062   	; 0x5c4 <__fixunssfsi>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <beep+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	cb 01       	movw	r24, r22
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <beep+0xee>
 1aa:	16 c0       	rjmp	.+44     	; 0x1d8 <beep+0x120>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	4f e7       	ldi	r20, 0x7F	; 127
 1b2:	53 e4       	ldi	r21, 0x43	; 67
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	e3 d2       	rcall	.+1478   	; 0x780 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 1ba:	18 16       	cp	r1, r24
 1bc:	3c f4       	brge	.+14     	; 0x1cc <beep+0x114>
 1be:	c3 01       	movw	r24, r6
 1c0:	b2 01       	movw	r22, r4
 1c2:	00 d2       	rcall	.+1024   	; 0x5c4 <__fixunssfsi>
 1c4:	cb 01       	movw	r24, r22
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <beep+0x10e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <beep+0x124>
 1cc:	c5 01       	movw	r24, r10
 1ce:	b4 01       	movw	r22, r8
 1d0:	f9 d1       	rcall	.+1010   	; 0x5c4 <__fixunssfsi>
 1d2:	06 2f       	mov	r16, r22
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <beep+0x120>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d6:	01 e0       	ldi	r16, 0x01	; 1
	PORTC |= M0;
 1d8:	0a 95       	dec	r16
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <beep+0x120>
 1dc:	85 b3       	in	r24, 0x15	; 21
	_delay_us(off_time);
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	be 01       	movw	r22, r28
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	19 d2       	rcall	.+1074   	; 0x61c <__floatunsisf>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 1ea:	6b 01       	movw	r12, r22
 1ec:	7c 01       	movw	r14, r24
 1ee:	2b ea       	ldi	r18, 0xAB	; 171
 1f0:	3a ea       	ldi	r19, 0xAA	; 170
 1f2:	4a ea       	ldi	r20, 0xAA	; 170
 1f4:	50 e4       	ldi	r21, 0x40	; 64
 1f6:	c8 d2       	rcall	.+1424   	; 0x788 <__mulsf3>
	__tmp2 = ((F_CPU) / 4e6) * __us;
 1f8:	4b 01       	movw	r8, r22
 1fa:	5c 01       	movw	r10, r24
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	50 e4       	ldi	r21, 0x40	; 64
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	bf d2       	rcall	.+1406   	; 0x788 <__mulsf3>
	if (__tmp < 1.0)
 20a:	2b 01       	movw	r4, r22
 20c:	3c 01       	movw	r6, r24
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e8       	ldi	r20, 0x80	; 128
 214:	5f e3       	ldi	r21, 0x3F	; 63
 216:	c5 01       	movw	r24, r10
 218:	b4 01       	movw	r22, r8
 21a:	68 d1       	rcall	.+720    	; 0x4ec <__cmpsf2>
 21c:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
 21e:	0c f4       	brge	.+2      	; 0x222 <beep+0x16a>
 220:	5c c0       	rjmp	.+184    	; 0x2da <beep+0x222>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	3f ef       	ldi	r19, 0xFF	; 255
 226:	4f e7       	ldi	r20, 0x7F	; 127
 228:	57 e4       	ldi	r21, 0x47	; 71
 22a:	c3 01       	movw	r24, r6
 22c:	b2 01       	movw	r22, r4
 22e:	a8 d2       	rcall	.+1360   	; 0x780 <__gesf2>
 230:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
 232:	0c f0       	brlt	.+2      	; 0x236 <beep+0x17e>
 234:	3d c0       	rjmp	.+122    	; 0x2b0 <beep+0x1f8>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	4a e7       	ldi	r20, 0x7A	; 122
 23c:	54 e4       	ldi	r21, 0x44	; 68
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	58 d1       	rcall	.+688    	; 0x4f4 <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 244:	4b 01       	movw	r8, r22
 246:	5c 01       	movw	r10, r24
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4a e7       	ldi	r20, 0x7A	; 122
 24e:	55 e4       	ldi	r21, 0x45	; 69
 250:	9b d2       	rcall	.+1334   	; 0x788 <__mulsf3>
 252:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 254:	7c 01       	movw	r14, r24
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	46 d1       	rcall	.+652    	; 0x4ec <__cmpsf2>
		__ticks = 1;
	else if (__tmp > 65535)
 260:	88 23       	and	r24, r24
 262:	04 f1       	brlt	.+64     	; 0x2a4 <beep+0x1ec>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	57 e4       	ldi	r21, 0x47	; 71
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	87 d2       	rcall	.+1294   	; 0x780 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 272:	18 16       	cp	r1, r24
 274:	9c f4       	brge	.+38     	; 0x29c <beep+0x1e4>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e2       	ldi	r20, 0x20	; 32
 27c:	51 e4       	ldi	r21, 0x41	; 65
 27e:	c5 01       	movw	r24, r10
 280:	b4 01       	movw	r22, r8
 282:	82 d2       	rcall	.+1284   	; 0x788 <__mulsf3>
 284:	9f d1       	rcall	.+830    	; 0x5c4 <__fixunssfsi>
 286:	06 c0       	rjmp	.+12     	; 0x294 <beep+0x1dc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 288:	80 e9       	ldi	r24, 0x90	; 144
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	f1 f7       	brne	.-4      	; 0x28c <beep+0x1d4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	61 50       	subi	r22, 0x01	; 1
 292:	71 09       	sbc	r23, r1
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 298:	b9 f7       	brne	.-18     	; 0x288 <beep+0x1d0>
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <beep+0x224>
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2a0:	91 d1       	rcall	.+802    	; 0x5c4 <__fixunssfsi>
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <beep+0x1f0>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	cb 01       	movw	r24, r22
 2aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <beep+0x1f2>
 2ae:	16 c0       	rjmp	.+44     	; 0x2dc <beep+0x224>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	4f e7       	ldi	r20, 0x7F	; 127
 2b6:	53 e4       	ldi	r21, 0x43	; 67
 2b8:	c5 01       	movw	r24, r10
 2ba:	b4 01       	movw	r22, r8
 2bc:	61 d2       	rcall	.+1218   	; 0x780 <__gesf2>
 2be:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 2c0:	3c f4       	brge	.+14     	; 0x2d0 <beep+0x218>
 2c2:	c3 01       	movw	r24, r6
 2c4:	b2 01       	movw	r22, r4
 2c6:	7e d1       	rcall	.+764    	; 0x5c4 <__fixunssfsi>
 2c8:	cb 01       	movw	r24, r22
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <beep+0x212>
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <beep+0x228>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	77 d1       	rcall	.+750    	; 0x5c4 <__fixunssfsi>
 2d6:	16 2f       	mov	r17, r22
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <beep+0x224>
 2da:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 2dc:	1a 95       	dec	r17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2de:	f1 f7       	brne	.-4      	; 0x2dc <beep+0x224>
 2e0:	df 91       	pop	r29
}
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	7f 90       	pop	r7
 2fa:	6f 90       	pop	r6
 2fc:	5f 90       	pop	r5
 2fe:	4f 90       	pop	r4
 300:	08 95       	ret

00000302 <tone3>:
 302:	8f 92       	push	r8

void tone3(uint16_t fr, uint16_t dur){
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	eb 01       	movw	r28, r22
	uint16_t on_time = 1./fr*500000.;
 31c:	bc 01       	movw	r22, r24
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	7c d1       	rcall	.+760    	; 0x61c <__floatunsisf>
 324:	9b 01       	movw	r18, r22
 326:	ac 01       	movw	r20, r24
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	9f e3       	ldi	r25, 0x3F	; 63
 330:	e1 d0       	rcall	.+450    	; 0x4f4 <__divsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	34 e2       	ldi	r19, 0x24	; 36
 336:	44 ef       	ldi	r20, 0xF4	; 244
 338:	58 e4       	ldi	r21, 0x48	; 72
 33a:	26 d2       	rcall	.+1100   	; 0x788 <__mulsf3>
 33c:	43 d1       	rcall	.+646    	; 0x5c4 <__fixunssfsi>
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
 342:	8b 01       	movw	r16, r22
	uint16_t n = dur*1000./(2.*on_time);
 344:	be 01       	movw	r22, r28
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	68 d1       	rcall	.+720    	; 0x61c <__floatunsisf>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	4a e7       	ldi	r20, 0x7A	; 122
 352:	54 e4       	ldi	r21, 0x44	; 68
 354:	19 d2       	rcall	.+1074   	; 0x788 <__mulsf3>
 356:	4b 01       	movw	r8, r22
 358:	5c 01       	movw	r10, r24
 35a:	b6 01       	movw	r22, r12
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	5d d1       	rcall	.+698    	; 0x61c <__floatunsisf>
 362:	9b 01       	movw	r18, r22
 364:	ac 01       	movw	r20, r24
 366:	5e d0       	rcall	.+188    	; 0x424 <__addsf3>
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	c5 01       	movw	r24, r10
 36e:	b4 01       	movw	r22, r8
 370:	c1 d0       	rcall	.+386    	; 0x4f4 <__divsf3>
 372:	28 d1       	rcall	.+592    	; 0x5c4 <__fixunssfsi>
 374:	7b 01       	movw	r14, r22
 376:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < n; i++)
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	06 c0       	rjmp	.+12     	; 0x388 <tone3+0x86>
 37c:	a8 01       	movw	r20, r16
		beep(0, on_time, on_time);
 37e:	b8 01       	movw	r22, r16
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	99 de       	rcall	.-718    	; 0xb8 <beep>
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	ce 15       	cp	r28, r14
}

void tone3(uint16_t fr, uint16_t dur){
	uint16_t on_time = 1./fr*500000.;
	uint16_t n = dur*1000./(2.*on_time);
	for (int i = 0; i < n; i++)
 38a:	df 05       	cpc	r29, r15
 38c:	b8 f3       	brcs	.-18     	; 0x37c <tone3+0x7a>
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
		beep(0, on_time, on_time);
}
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	8f 90       	pop	r8
 3a6:	08 95       	ret

000003a8 <main>:
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29

int main(void)
{
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	60 97       	sbiw	r28, 0x10	; 16
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
	int i;
	int freq[] = {523, 587, 659, 698, 784, 880, 988, 1047};
 3bc:	80 e1       	ldi	r24, 0x10	; 16
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	de 01       	movw	r26, r28
 3c4:	11 96       	adiw	r26, 0x01	; 1
 3c6:	01 90       	ld	r0, Z+
 3c8:	0d 92       	st	X+, r0
 3ca:	8a 95       	dec	r24
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x1e>
	DDRB = 0x00;	// PORTB의 모든 포트를 입력 모드로
 3ce:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	88 bb       	out	0x18, r24	; 24
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
 3d4:	84 b3       	in	r24, 0x14	; 20
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		if (!(PINB & M0)){
 3da:	b0 99       	sbic	0x16, 0	; 22
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <main+0x32>
 3de:	1b c0       	rjmp	.+54     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			for (i = 0; i < 8; i++){
				tone3(freq[i], 300);
 3e0:	f8 01       	movw	r30, r16
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	8c 0f       	add	r24, r28
 3ec:	9d 1f       	adc	r25, r29
 3ee:	e8 0f       	add	r30, r24
 3f0:	f9 1f       	adc	r31, r25
 3f2:	6c e2       	ldi	r22, 0x2C	; 44
 3f4:	71 e0       	ldi	r23, 0x01	; 1
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	83 df       	rcall	.-250    	; 0x302 <tone3>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3fc:	88 e8       	ldi	r24, 0x88	; 136
 3fe:	93 e1       	ldi	r25, 0x13	; 19
 400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 402:	e0 e9       	ldi	r30, 0x90	; 144
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 40a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	c9 f7       	brne	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
	while (1)
	{
		if (!(PINB & M0)){
			for (i = 0; i < 8; i++){
 410:	0f 5f       	subi	r16, 0xFF	; 255
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	00 e0       	ldi	r16, 0x00	; 0
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	08 30       	cpi	r16, 0x08	; 8
 41c:	11 05       	cpc	r17, r1
 41e:	04 f3       	brlt	.-64     	; 0x3e0 <main+0x38>
 420:	dc cf       	rjmp	.-72     	; 0x3da <main+0x32>

00000422 <__subsf3>:
 422:	50 58       	subi	r21, 0x80	; 128

00000424 <__addsf3>:
 424:	bb 27       	eor	r27, r27
 426:	aa 27       	eor	r26, r26
 428:	0e d0       	rcall	.+28     	; 0x446 <__addsf3x>
 42a:	70 c1       	rjmp	.+736    	; 0x70c <__fp_round>
 42c:	61 d1       	rcall	.+706    	; 0x6f0 <__fp_pscA>
 42e:	30 f0       	brcs	.+12     	; 0x43c <__addsf3+0x18>
 430:	66 d1       	rcall	.+716    	; 0x6fe <__fp_pscB>
 432:	20 f0       	brcs	.+8      	; 0x43c <__addsf3+0x18>
 434:	31 f4       	brne	.+12     	; 0x442 <__addsf3+0x1e>
 436:	9f 3f       	cpi	r25, 0xFF	; 255
 438:	11 f4       	brne	.+4      	; 0x43e <__addsf3+0x1a>
 43a:	1e f4       	brtc	.+6      	; 0x442 <__addsf3+0x1e>
 43c:	56 c1       	rjmp	.+684    	; 0x6ea <__fp_nan>
 43e:	0e f4       	brtc	.+2      	; 0x442 <__addsf3+0x1e>
 440:	e0 95       	com	r30
 442:	e7 fb       	bst	r30, 7
 444:	4c c1       	rjmp	.+664    	; 0x6de <__fp_inf>

00000446 <__addsf3x>:
 446:	e9 2f       	mov	r30, r25
 448:	72 d1       	rcall	.+740    	; 0x72e <__fp_split3>
 44a:	80 f3       	brcs	.-32     	; 0x42c <__addsf3+0x8>
 44c:	ba 17       	cp	r27, r26
 44e:	62 07       	cpc	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	95 07       	cpc	r25, r21
 456:	18 f0       	brcs	.+6      	; 0x45e <__addsf3x+0x18>
 458:	71 f4       	brne	.+28     	; 0x476 <__addsf3x+0x30>
 45a:	9e f5       	brtc	.+102    	; 0x4c2 <__addsf3x+0x7c>
 45c:	8a c1       	rjmp	.+788    	; 0x772 <__fp_zero>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3x+0x1c>
 460:	e0 95       	com	r30
 462:	0b 2e       	mov	r0, r27
 464:	ba 2f       	mov	r27, r26
 466:	a0 2d       	mov	r26, r0
 468:	0b 01       	movw	r0, r22
 46a:	b9 01       	movw	r22, r18
 46c:	90 01       	movw	r18, r0
 46e:	0c 01       	movw	r0, r24
 470:	ca 01       	movw	r24, r20
 472:	a0 01       	movw	r20, r0
 474:	11 24       	eor	r1, r1
 476:	ff 27       	eor	r31, r31
 478:	59 1b       	sub	r21, r25
 47a:	99 f0       	breq	.+38     	; 0x4a2 <__addsf3x+0x5c>
 47c:	59 3f       	cpi	r21, 0xF9	; 249
 47e:	50 f4       	brcc	.+20     	; 0x494 <__addsf3x+0x4e>
 480:	50 3e       	cpi	r21, 0xE0	; 224
 482:	68 f1       	brcs	.+90     	; 0x4de <__addsf3x+0x98>
 484:	1a 16       	cp	r1, r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	a2 2f       	mov	r26, r18
 48a:	23 2f       	mov	r18, r19
 48c:	34 2f       	mov	r19, r20
 48e:	44 27       	eor	r20, r20
 490:	58 5f       	subi	r21, 0xF8	; 248
 492:	f3 cf       	rjmp	.-26     	; 0x47a <__addsf3x+0x34>
 494:	46 95       	lsr	r20
 496:	37 95       	ror	r19
 498:	27 95       	ror	r18
 49a:	a7 95       	ror	r26
 49c:	f0 40       	sbci	r31, 0x00	; 0
 49e:	53 95       	inc	r21
 4a0:	c9 f7       	brne	.-14     	; 0x494 <__addsf3x+0x4e>
 4a2:	7e f4       	brtc	.+30     	; 0x4c2 <__addsf3x+0x7c>
 4a4:	1f 16       	cp	r1, r31
 4a6:	ba 0b       	sbc	r27, r26
 4a8:	62 0b       	sbc	r22, r18
 4aa:	73 0b       	sbc	r23, r19
 4ac:	84 0b       	sbc	r24, r20
 4ae:	ba f0       	brmi	.+46     	; 0x4de <__addsf3x+0x98>
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	a1 f0       	breq	.+40     	; 0x4dc <__addsf3x+0x96>
 4b4:	ff 0f       	add	r31, r31
 4b6:	bb 1f       	adc	r27, r27
 4b8:	66 1f       	adc	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	c2 f7       	brpl	.-16     	; 0x4b0 <__addsf3x+0x6a>
 4c0:	0e c0       	rjmp	.+28     	; 0x4de <__addsf3x+0x98>
 4c2:	ba 0f       	add	r27, r26
 4c4:	62 1f       	adc	r22, r18
 4c6:	73 1f       	adc	r23, r19
 4c8:	84 1f       	adc	r24, r20
 4ca:	48 f4       	brcc	.+18     	; 0x4de <__addsf3x+0x98>
 4cc:	87 95       	ror	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	9e 3f       	cpi	r25, 0xFE	; 254
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <__addsf3x+0x96>
 4da:	b3 cf       	rjmp	.-154    	; 0x442 <__addsf3+0x1e>
 4dc:	93 95       	inc	r25
 4de:	88 0f       	add	r24, r24
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <__addsf3x+0x9e>
 4e2:	99 27       	eor	r25, r25
 4e4:	ee 0f       	add	r30, r30
 4e6:	97 95       	ror	r25
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret

000004ec <__cmpsf2>:
 4ec:	d4 d0       	rcall	.+424    	; 0x696 <__fp_cmp>
 4ee:	08 f4       	brcc	.+2      	; 0x4f2 <__cmpsf2+0x6>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	08 95       	ret

000004f4 <__divsf3>:
 4f4:	0c d0       	rcall	.+24     	; 0x50e <__divsf3x>
 4f6:	0a c1       	rjmp	.+532    	; 0x70c <__fp_round>
 4f8:	02 d1       	rcall	.+516    	; 0x6fe <__fp_pscB>
 4fa:	40 f0       	brcs	.+16     	; 0x50c <__divsf3+0x18>
 4fc:	f9 d0       	rcall	.+498    	; 0x6f0 <__fp_pscA>
 4fe:	30 f0       	brcs	.+12     	; 0x50c <__divsf3+0x18>
 500:	21 f4       	brne	.+8      	; 0x50a <__divsf3+0x16>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	19 f0       	breq	.+6      	; 0x50c <__divsf3+0x18>
 506:	eb c0       	rjmp	.+470    	; 0x6de <__fp_inf>
 508:	51 11       	cpse	r21, r1
 50a:	34 c1       	rjmp	.+616    	; 0x774 <__fp_szero>
 50c:	ee c0       	rjmp	.+476    	; 0x6ea <__fp_nan>

0000050e <__divsf3x>:
 50e:	0f d1       	rcall	.+542    	; 0x72e <__fp_split3>
 510:	98 f3       	brcs	.-26     	; 0x4f8 <__divsf3+0x4>

00000512 <__divsf3_pse>:
 512:	99 23       	and	r25, r25
 514:	c9 f3       	breq	.-14     	; 0x508 <__divsf3+0x14>
 516:	55 23       	and	r21, r21
 518:	b1 f3       	breq	.-20     	; 0x506 <__divsf3+0x12>
 51a:	95 1b       	sub	r25, r21
 51c:	55 0b       	sbc	r21, r21
 51e:	bb 27       	eor	r27, r27
 520:	aa 27       	eor	r26, r26
 522:	62 17       	cp	r22, r18
 524:	73 07       	cpc	r23, r19
 526:	84 07       	cpc	r24, r20
 528:	38 f0       	brcs	.+14     	; 0x538 <__divsf3_pse+0x26>
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	44 1f       	adc	r20, r20
 534:	aa 1f       	adc	r26, r26
 536:	a9 f3       	breq	.-22     	; 0x522 <__divsf3_pse+0x10>
 538:	33 d0       	rcall	.+102    	; 0x5a0 <__divsf3_pse+0x8e>
 53a:	0e 2e       	mov	r0, r30
 53c:	3a f0       	brmi	.+14     	; 0x54c <__divsf3_pse+0x3a>
 53e:	e0 e8       	ldi	r30, 0x80	; 128
 540:	30 d0       	rcall	.+96     	; 0x5a2 <__divsf3_pse+0x90>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	e6 95       	lsr	r30
 548:	00 1c       	adc	r0, r0
 54a:	ca f7       	brpl	.-14     	; 0x53e <__divsf3_pse+0x2c>
 54c:	29 d0       	rcall	.+82     	; 0x5a0 <__divsf3_pse+0x8e>
 54e:	fe 2f       	mov	r31, r30
 550:	27 d0       	rcall	.+78     	; 0x5a0 <__divsf3_pse+0x8e>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	26 17       	cp	r18, r22
 55c:	37 07       	cpc	r19, r23
 55e:	48 07       	cpc	r20, r24
 560:	ab 07       	cpc	r26, r27
 562:	b0 e8       	ldi	r27, 0x80	; 128
 564:	09 f0       	breq	.+2      	; 0x568 <__divsf3_pse+0x56>
 566:	bb 0b       	sbc	r27, r27
 568:	80 2d       	mov	r24, r0
 56a:	bf 01       	movw	r22, r30
 56c:	ff 27       	eor	r31, r31
 56e:	93 58       	subi	r25, 0x83	; 131
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	2a f0       	brmi	.+10     	; 0x57e <__divsf3_pse+0x6c>
 574:	9e 3f       	cpi	r25, 0xFE	; 254
 576:	51 05       	cpc	r21, r1
 578:	68 f0       	brcs	.+26     	; 0x594 <__divsf3_pse+0x82>
 57a:	b1 c0       	rjmp	.+354    	; 0x6de <__fp_inf>
 57c:	fb c0       	rjmp	.+502    	; 0x774 <__fp_szero>
 57e:	5f 3f       	cpi	r21, 0xFF	; 255
 580:	ec f3       	brlt	.-6      	; 0x57c <__divsf3_pse+0x6a>
 582:	98 3e       	cpi	r25, 0xE8	; 232
 584:	dc f3       	brlt	.-10     	; 0x57c <__divsf3_pse+0x6a>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f7 95       	ror	r31
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	c9 f7       	brne	.-14     	; 0x586 <__divsf3_pse+0x74>
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	bb 1f       	adc	r27, r27
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	ba 07       	cpc	r27, r26
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__divsf3_pse+0xaa>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	ba 0b       	sbc	r27, r26
 5bc:	ee 1f       	adc	r30, r30
 5be:	88 f7       	brcc	.-30     	; 0x5a2 <__divsf3_pse+0x90>
 5c0:	e0 95       	com	r30
 5c2:	08 95       	ret

000005c4 <__fixunssfsi>:
 5c4:	bc d0       	rcall	.+376    	; 0x73e <__fp_splitA>
 5c6:	88 f0       	brcs	.+34     	; 0x5ea <__fixunssfsi+0x26>
 5c8:	9f 57       	subi	r25, 0x7F	; 127
 5ca:	90 f0       	brcs	.+36     	; 0x5f0 <__fixunssfsi+0x2c>
 5cc:	b9 2f       	mov	r27, r25
 5ce:	99 27       	eor	r25, r25
 5d0:	b7 51       	subi	r27, 0x17	; 23
 5d2:	a0 f0       	brcs	.+40     	; 0x5fc <__fixunssfsi+0x38>
 5d4:	d1 f0       	breq	.+52     	; 0x60a <__fixunssfsi+0x46>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a f0       	brmi	.+6      	; 0x5e6 <__fixunssfsi+0x22>
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__fixunssfsi+0x12>
 5e4:	12 c0       	rjmp	.+36     	; 0x60a <__fixunssfsi+0x46>
 5e6:	b1 30       	cpi	r27, 0x01	; 1
 5e8:	81 f0       	breq	.+32     	; 0x60a <__fixunssfsi+0x46>
 5ea:	c3 d0       	rcall	.+390    	; 0x772 <__fp_zero>
 5ec:	b1 e0       	ldi	r27, 0x01	; 1
 5ee:	08 95       	ret
 5f0:	c0 c0       	rjmp	.+384    	; 0x772 <__fp_zero>
 5f2:	67 2f       	mov	r22, r23
 5f4:	78 2f       	mov	r23, r24
 5f6:	88 27       	eor	r24, r24
 5f8:	b8 5f       	subi	r27, 0xF8	; 248
 5fa:	39 f0       	breq	.+14     	; 0x60a <__fixunssfsi+0x46>
 5fc:	b9 3f       	cpi	r27, 0xF9	; 249
 5fe:	cc f3       	brlt	.-14     	; 0x5f2 <__fixunssfsi+0x2e>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b3 95       	inc	r27
 608:	d9 f7       	brne	.-10     	; 0x600 <__fixunssfsi+0x3c>
 60a:	3e f4       	brtc	.+14     	; 0x61a <__fixunssfsi+0x56>
 60c:	90 95       	com	r25
 60e:	80 95       	com	r24
 610:	70 95       	com	r23
 612:	61 95       	neg	r22
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__floatunsisf>:
 61c:	e8 94       	clt
 61e:	09 c0       	rjmp	.+18     	; 0x632 <__floatsisf+0x12>

00000620 <__floatsisf>:
 620:	97 fb       	bst	r25, 7
 622:	3e f4       	brtc	.+14     	; 0x632 <__floatsisf+0x12>
 624:	90 95       	com	r25
 626:	80 95       	com	r24
 628:	70 95       	com	r23
 62a:	61 95       	neg	r22
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	99 23       	and	r25, r25
 634:	a9 f0       	breq	.+42     	; 0x660 <__floatsisf+0x40>
 636:	f9 2f       	mov	r31, r25
 638:	96 e9       	ldi	r25, 0x96	; 150
 63a:	bb 27       	eor	r27, r27
 63c:	93 95       	inc	r25
 63e:	f6 95       	lsr	r31
 640:	87 95       	ror	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b7 95       	ror	r27
 648:	f1 11       	cpse	r31, r1
 64a:	f8 cf       	rjmp	.-16     	; 0x63c <__floatsisf+0x1c>
 64c:	fa f4       	brpl	.+62     	; 0x68c <__floatsisf+0x6c>
 64e:	bb 0f       	add	r27, r27
 650:	11 f4       	brne	.+4      	; 0x656 <__floatsisf+0x36>
 652:	60 ff       	sbrs	r22, 0
 654:	1b c0       	rjmp	.+54     	; 0x68c <__floatsisf+0x6c>
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	16 c0       	rjmp	.+44     	; 0x68c <__floatsisf+0x6c>
 660:	88 23       	and	r24, r24
 662:	11 f0       	breq	.+4      	; 0x668 <__floatsisf+0x48>
 664:	96 e9       	ldi	r25, 0x96	; 150
 666:	11 c0       	rjmp	.+34     	; 0x68a <__floatsisf+0x6a>
 668:	77 23       	and	r23, r23
 66a:	21 f0       	breq	.+8      	; 0x674 <__floatsisf+0x54>
 66c:	9e e8       	ldi	r25, 0x8E	; 142
 66e:	87 2f       	mov	r24, r23
 670:	76 2f       	mov	r23, r22
 672:	05 c0       	rjmp	.+10     	; 0x67e <__floatsisf+0x5e>
 674:	66 23       	and	r22, r22
 676:	71 f0       	breq	.+28     	; 0x694 <__floatsisf+0x74>
 678:	96 e8       	ldi	r25, 0x86	; 134
 67a:	86 2f       	mov	r24, r22
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	2a f0       	brmi	.+10     	; 0x68c <__floatsisf+0x6c>
 682:	9a 95       	dec	r25
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	da f7       	brpl	.-10     	; 0x682 <__floatsisf+0x62>
 68c:	88 0f       	add	r24, r24
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_cmp>:
 696:	99 0f       	add	r25, r25
 698:	00 08       	sbc	r0, r0
 69a:	55 0f       	add	r21, r21
 69c:	aa 0b       	sbc	r26, r26
 69e:	e0 e8       	ldi	r30, 0x80	; 128
 6a0:	fe ef       	ldi	r31, 0xFE	; 254
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	e8 07       	cpc	r30, r24
 6a8:	f9 07       	cpc	r31, r25
 6aa:	c0 f0       	brcs	.+48     	; 0x6dc <__fp_cmp+0x46>
 6ac:	12 16       	cp	r1, r18
 6ae:	13 06       	cpc	r1, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	98 f0       	brcs	.+38     	; 0x6dc <__fp_cmp+0x46>
 6b6:	62 1b       	sub	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	95 0b       	sbc	r25, r21
 6be:	39 f4       	brne	.+14     	; 0x6ce <__fp_cmp+0x38>
 6c0:	0a 26       	eor	r0, r26
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_cmp+0x46>
 6c4:	23 2b       	or	r18, r19
 6c6:	24 2b       	or	r18, r20
 6c8:	25 2b       	or	r18, r21
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <__fp_cmp+0x3e>
 6cc:	08 95       	ret
 6ce:	0a 26       	eor	r0, r26
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <__fp_cmp+0x3e>
 6d2:	a1 40       	sbci	r26, 0x01	; 1
 6d4:	a6 95       	lsr	r26
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	81 1d       	adc	r24, r1
 6da:	81 1d       	adc	r24, r1
 6dc:	08 95       	ret

000006de <__fp_inf>:
 6de:	97 f9       	bld	r25, 7
 6e0:	9f 67       	ori	r25, 0x7F	; 127
 6e2:	80 e8       	ldi	r24, 0x80	; 128
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	08 95       	ret

000006ea <__fp_nan>:
 6ea:	9f ef       	ldi	r25, 0xFF	; 255
 6ec:	80 ec       	ldi	r24, 0xC0	; 192
 6ee:	08 95       	ret

000006f0 <__fp_pscA>:
 6f0:	00 24       	eor	r0, r0
 6f2:	0a 94       	dec	r0
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	18 06       	cpc	r1, r24
 6fa:	09 06       	cpc	r0, r25
 6fc:	08 95       	ret

000006fe <__fp_pscB>:
 6fe:	00 24       	eor	r0, r0
 700:	0a 94       	dec	r0
 702:	12 16       	cp	r1, r18
 704:	13 06       	cpc	r1, r19
 706:	14 06       	cpc	r1, r20
 708:	05 06       	cpc	r0, r21
 70a:	08 95       	ret

0000070c <__fp_round>:
 70c:	09 2e       	mov	r0, r25
 70e:	03 94       	inc	r0
 710:	00 0c       	add	r0, r0
 712:	11 f4       	brne	.+4      	; 0x718 <__fp_round+0xc>
 714:	88 23       	and	r24, r24
 716:	52 f0       	brmi	.+20     	; 0x72c <__fp_round+0x20>
 718:	bb 0f       	add	r27, r27
 71a:	40 f4       	brcc	.+16     	; 0x72c <__fp_round+0x20>
 71c:	bf 2b       	or	r27, r31
 71e:	11 f4       	brne	.+4      	; 0x724 <__fp_round+0x18>
 720:	60 ff       	sbrs	r22, 0
 722:	04 c0       	rjmp	.+8      	; 0x72c <__fp_round+0x20>
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	08 95       	ret

0000072e <__fp_split3>:
 72e:	57 fd       	sbrc	r21, 7
 730:	90 58       	subi	r25, 0x80	; 128
 732:	44 0f       	add	r20, r20
 734:	55 1f       	adc	r21, r21
 736:	59 f0       	breq	.+22     	; 0x74e <__fp_splitA+0x10>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	71 f0       	breq	.+28     	; 0x758 <__fp_splitA+0x1a>
 73c:	47 95       	ror	r20

0000073e <__fp_splitA>:
 73e:	88 0f       	add	r24, r24
 740:	97 fb       	bst	r25, 7
 742:	99 1f       	adc	r25, r25
 744:	61 f0       	breq	.+24     	; 0x75e <__fp_splitA+0x20>
 746:	9f 3f       	cpi	r25, 0xFF	; 255
 748:	79 f0       	breq	.+30     	; 0x768 <__fp_splitA+0x2a>
 74a:	87 95       	ror	r24
 74c:	08 95       	ret
 74e:	12 16       	cp	r1, r18
 750:	13 06       	cpc	r1, r19
 752:	14 06       	cpc	r1, r20
 754:	55 1f       	adc	r21, r21
 756:	f2 cf       	rjmp	.-28     	; 0x73c <__fp_split3+0xe>
 758:	46 95       	lsr	r20
 75a:	f1 df       	rcall	.-30     	; 0x73e <__fp_splitA>
 75c:	08 c0       	rjmp	.+16     	; 0x76e <__fp_splitA+0x30>
 75e:	16 16       	cp	r1, r22
 760:	17 06       	cpc	r1, r23
 762:	18 06       	cpc	r1, r24
 764:	99 1f       	adc	r25, r25
 766:	f1 cf       	rjmp	.-30     	; 0x74a <__fp_splitA+0xc>
 768:	86 95       	lsr	r24
 76a:	71 05       	cpc	r23, r1
 76c:	61 05       	cpc	r22, r1
 76e:	08 94       	sec
 770:	08 95       	ret

00000772 <__fp_zero>:
 772:	e8 94       	clt

00000774 <__fp_szero>:
 774:	bb 27       	eor	r27, r27
 776:	66 27       	eor	r22, r22
 778:	77 27       	eor	r23, r23
 77a:	cb 01       	movw	r24, r22
 77c:	97 f9       	bld	r25, 7
 77e:	08 95       	ret

00000780 <__gesf2>:
 780:	8a df       	rcall	.-236    	; 0x696 <__fp_cmp>
 782:	08 f4       	brcc	.+2      	; 0x786 <__gesf2+0x6>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	08 95       	ret

00000788 <__mulsf3>:
 788:	0b d0       	rcall	.+22     	; 0x7a0 <__mulsf3x>
 78a:	c0 cf       	rjmp	.-128    	; 0x70c <__fp_round>
 78c:	b1 df       	rcall	.-158    	; 0x6f0 <__fp_pscA>
 78e:	28 f0       	brcs	.+10     	; 0x79a <__mulsf3+0x12>
 790:	b6 df       	rcall	.-148    	; 0x6fe <__fp_pscB>
 792:	18 f0       	brcs	.+6      	; 0x79a <__mulsf3+0x12>
 794:	95 23       	and	r25, r21
 796:	09 f0       	breq	.+2      	; 0x79a <__mulsf3+0x12>
 798:	a2 cf       	rjmp	.-188    	; 0x6de <__fp_inf>
 79a:	a7 cf       	rjmp	.-178    	; 0x6ea <__fp_nan>
 79c:	11 24       	eor	r1, r1
 79e:	ea cf       	rjmp	.-44     	; 0x774 <__fp_szero>

000007a0 <__mulsf3x>:
 7a0:	c6 df       	rcall	.-116    	; 0x72e <__fp_split3>
 7a2:	a0 f3       	brcs	.-24     	; 0x78c <__mulsf3+0x4>

000007a4 <__mulsf3_pse>:
 7a4:	95 9f       	mul	r25, r21
 7a6:	d1 f3       	breq	.-12     	; 0x79c <__mulsf3+0x14>
 7a8:	95 0f       	add	r25, r21
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	55 1f       	adc	r21, r21
 7ae:	62 9f       	mul	r22, r18
 7b0:	f0 01       	movw	r30, r0
 7b2:	72 9f       	mul	r23, r18
 7b4:	bb 27       	eor	r27, r27
 7b6:	f0 0d       	add	r31, r0
 7b8:	b1 1d       	adc	r27, r1
 7ba:	63 9f       	mul	r22, r19
 7bc:	aa 27       	eor	r26, r26
 7be:	f0 0d       	add	r31, r0
 7c0:	b1 1d       	adc	r27, r1
 7c2:	aa 1f       	adc	r26, r26
 7c4:	64 9f       	mul	r22, r20
 7c6:	66 27       	eor	r22, r22
 7c8:	b0 0d       	add	r27, r0
 7ca:	a1 1d       	adc	r26, r1
 7cc:	66 1f       	adc	r22, r22
 7ce:	82 9f       	mul	r24, r18
 7d0:	22 27       	eor	r18, r18
 7d2:	b0 0d       	add	r27, r0
 7d4:	a1 1d       	adc	r26, r1
 7d6:	62 1f       	adc	r22, r18
 7d8:	73 9f       	mul	r23, r19
 7da:	b0 0d       	add	r27, r0
 7dc:	a1 1d       	adc	r26, r1
 7de:	62 1f       	adc	r22, r18
 7e0:	83 9f       	mul	r24, r19
 7e2:	a0 0d       	add	r26, r0
 7e4:	61 1d       	adc	r22, r1
 7e6:	22 1f       	adc	r18, r18
 7e8:	74 9f       	mul	r23, r20
 7ea:	33 27       	eor	r19, r19
 7ec:	a0 0d       	add	r26, r0
 7ee:	61 1d       	adc	r22, r1
 7f0:	23 1f       	adc	r18, r19
 7f2:	84 9f       	mul	r24, r20
 7f4:	60 0d       	add	r22, r0
 7f6:	21 1d       	adc	r18, r1
 7f8:	82 2f       	mov	r24, r18
 7fa:	76 2f       	mov	r23, r22
 7fc:	6a 2f       	mov	r22, r26
 7fe:	11 24       	eor	r1, r1
 800:	9f 57       	subi	r25, 0x7F	; 127
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	8a f0       	brmi	.+34     	; 0x828 <__mulsf3_pse+0x84>
 806:	e1 f0       	breq	.+56     	; 0x840 <__mulsf3_pse+0x9c>
 808:	88 23       	and	r24, r24
 80a:	4a f0       	brmi	.+18     	; 0x81e <__mulsf3_pse+0x7a>
 80c:	ee 0f       	add	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	bb 1f       	adc	r27, r27
 812:	66 1f       	adc	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	88 1f       	adc	r24, r24
 818:	91 50       	subi	r25, 0x01	; 1
 81a:	50 40       	sbci	r21, 0x00	; 0
 81c:	a9 f7       	brne	.-22     	; 0x808 <__mulsf3_pse+0x64>
 81e:	9e 3f       	cpi	r25, 0xFE	; 254
 820:	51 05       	cpc	r21, r1
 822:	70 f0       	brcs	.+28     	; 0x840 <__mulsf3_pse+0x9c>
 824:	5c cf       	rjmp	.-328    	; 0x6de <__fp_inf>
 826:	a6 cf       	rjmp	.-180    	; 0x774 <__fp_szero>
 828:	5f 3f       	cpi	r21, 0xFF	; 255
 82a:	ec f3       	brlt	.-6      	; 0x826 <__mulsf3_pse+0x82>
 82c:	98 3e       	cpi	r25, 0xE8	; 232
 82e:	dc f3       	brlt	.-10     	; 0x826 <__mulsf3_pse+0x82>
 830:	86 95       	lsr	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b7 95       	ror	r27
 838:	f7 95       	ror	r31
 83a:	e7 95       	ror	r30
 83c:	9f 5f       	subi	r25, 0xFF	; 255
 83e:	c1 f7       	brne	.-16     	; 0x830 <__mulsf3_pse+0x8c>
 840:	fe 2b       	or	r31, r30
 842:	88 0f       	add	r24, r24
 844:	91 1d       	adc	r25, r1
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
