
tone3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000084c  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c05  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000479  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000652  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002e13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7a d1       	rcall	.+756    	; 0x3a8 <main>
  b4:	c9 c3       	rjmp	.+1938   	; 0x848 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <beep>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <util/delay.h>
#define HALF_CYC 500000UL
#define M0 1<<0

void beep(int pin, uint16_t on_time, uint16_t off_time){
  b8:	4f 92       	push	r4
  ba:	5f 92       	push	r5
  bc:	6f 92       	push	r6
  be:	7f 92       	push	r7
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ea 01       	movw	r28, r20
	PORTC |= M0;
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	85 bb       	out	0x15, r24	; 21
	_delay_us(on_time);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	98 d2       	rcall	.+1328   	; 0x616 <__floatunsisf>
  e6:	6b 01       	movw	r12, r22
  e8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
  ea:	2b ea       	ldi	r18, 0xAB	; 171
  ec:	3a ea       	ldi	r19, 0xAA	; 170
  ee:	4a ea       	ldi	r20, 0xAA	; 170
  f0:	50 e4       	ldi	r21, 0x40	; 64
  f2:	47 d3       	rcall	.+1678   	; 0x782 <__mulsf3>
  f4:	4b 01       	movw	r8, r22
  f6:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	50 e4       	ldi	r21, 0x40	; 64
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	3e d3       	rcall	.+1660   	; 0x782 <__mulsf3>
 106:	2b 01       	movw	r4, r22
 108:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	e7 d1       	rcall	.+974    	; 0x4e6 <__cmpsf2>
 118:	88 23       	and	r24, r24
 11a:	0c f4       	brge	.+2      	; 0x11e <beep+0x66>
 11c:	5c c0       	rjmp	.+184    	; 0x1d6 <beep+0x11e>
		__ticks = 1;
	else if (__tmp2 > 65535)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	3f ef       	ldi	r19, 0xFF	; 255
 122:	4f e7       	ldi	r20, 0x7F	; 127
 124:	57 e4       	ldi	r21, 0x47	; 71
 126:	c3 01       	movw	r24, r6
 128:	b2 01       	movw	r22, r4
 12a:	27 d3       	rcall	.+1614   	; 0x77a <__gesf2>
 12c:	18 16       	cp	r1, r24
 12e:	0c f0       	brlt	.+2      	; 0x132 <beep+0x7a>
 130:	3d c0       	rjmp	.+122    	; 0x1ac <beep+0xf4>
	{
		_delay_ms(__us / 1000.0);
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	4a e7       	ldi	r20, 0x7A	; 122
 138:	54 e4       	ldi	r21, 0x44	; 68
 13a:	c7 01       	movw	r24, r14
 13c:	b6 01       	movw	r22, r12
 13e:	d7 d1       	rcall	.+942    	; 0x4ee <__divsf3>
 140:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 142:	5c 01       	movw	r10, r24
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	4a e7       	ldi	r20, 0x7A	; 122
 14a:	55 e4       	ldi	r21, 0x45	; 69
 14c:	1a d3       	rcall	.+1588   	; 0x782 <__mulsf3>
 14e:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 150:	7c 01       	movw	r14, r24
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e8       	ldi	r20, 0x80	; 128
 158:	5f e3       	ldi	r21, 0x3F	; 63
 15a:	c5 d1       	rcall	.+906    	; 0x4e6 <__cmpsf2>
 15c:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 15e:	04 f1       	brlt	.+64     	; 0x1a0 <beep+0xe8>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	3f ef       	ldi	r19, 0xFF	; 255
 164:	4f e7       	ldi	r20, 0x7F	; 127
 166:	57 e4       	ldi	r21, 0x47	; 71
 168:	c7 01       	movw	r24, r14
 16a:	b6 01       	movw	r22, r12
 16c:	06 d3       	rcall	.+1548   	; 0x77a <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 16e:	18 16       	cp	r1, r24
 170:	9c f4       	brge	.+38     	; 0x198 <beep+0xe0>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	c5 01       	movw	r24, r10
 17c:	b4 01       	movw	r22, r8
 17e:	01 d3       	rcall	.+1538   	; 0x782 <__mulsf3>
 180:	1e d2       	rcall	.+1084   	; 0x5be <__fixunssfsi>
 182:	06 c0       	rjmp	.+12     	; 0x190 <beep+0xd8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 184:	80 e9       	ldi	r24, 0x90	; 144
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	f1 f7       	brne	.-4      	; 0x188 <beep+0xd0>
 18c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	71 09       	sbc	r23, r1
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	b9 f7       	brne	.-18     	; 0x184 <beep+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 196:	20 c0       	rjmp	.+64     	; 0x1d8 <beep+0x120>
 198:	c7 01       	movw	r24, r14
 19a:	b6 01       	movw	r22, r12
 19c:	10 d2       	rcall	.+1056   	; 0x5be <__fixunssfsi>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <beep+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	cb 01       	movw	r24, r22
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <beep+0xee>
 1aa:	16 c0       	rjmp	.+44     	; 0x1d8 <beep+0x120>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	4f e7       	ldi	r20, 0x7F	; 127
 1b2:	53 e4       	ldi	r21, 0x43	; 67
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	e0 d2       	rcall	.+1472   	; 0x77a <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 1ba:	18 16       	cp	r1, r24
 1bc:	3c f4       	brge	.+14     	; 0x1cc <beep+0x114>
 1be:	c3 01       	movw	r24, r6
 1c0:	b2 01       	movw	r22, r4
 1c2:	fd d1       	rcall	.+1018   	; 0x5be <__fixunssfsi>
 1c4:	cb 01       	movw	r24, r22
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <beep+0x10e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <beep+0x124>
 1cc:	c5 01       	movw	r24, r10
 1ce:	b4 01       	movw	r22, r8
 1d0:	f6 d1       	rcall	.+1004   	; 0x5be <__fixunssfsi>
 1d2:	06 2f       	mov	r16, r22
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <beep+0x120>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d6:	01 e0       	ldi	r16, 0x01	; 1
	PORTC &= ~M0;
 1d8:	0a 95       	dec	r16
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <beep+0x120>
 1dc:	85 b3       	in	r24, 0x15	; 21
	_delay_us(off_time);
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	be 01       	movw	r22, r28
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	16 d2       	rcall	.+1068   	; 0x616 <__floatunsisf>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 1ea:	6b 01       	movw	r12, r22
 1ec:	7c 01       	movw	r14, r24
 1ee:	2b ea       	ldi	r18, 0xAB	; 171
 1f0:	3a ea       	ldi	r19, 0xAA	; 170
 1f2:	4a ea       	ldi	r20, 0xAA	; 170
 1f4:	50 e4       	ldi	r21, 0x40	; 64
 1f6:	c5 d2       	rcall	.+1418   	; 0x782 <__mulsf3>
	__tmp2 = ((F_CPU) / 4e6) * __us;
 1f8:	4b 01       	movw	r8, r22
 1fa:	5c 01       	movw	r10, r24
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	50 e4       	ldi	r21, 0x40	; 64
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	bc d2       	rcall	.+1400   	; 0x782 <__mulsf3>
	if (__tmp < 1.0)
 20a:	2b 01       	movw	r4, r22
 20c:	3c 01       	movw	r6, r24
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e8       	ldi	r20, 0x80	; 128
 214:	5f e3       	ldi	r21, 0x3F	; 63
 216:	c5 01       	movw	r24, r10
 218:	b4 01       	movw	r22, r8
 21a:	65 d1       	rcall	.+714    	; 0x4e6 <__cmpsf2>
 21c:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
 21e:	0c f4       	brge	.+2      	; 0x222 <beep+0x16a>
 220:	5c c0       	rjmp	.+184    	; 0x2da <beep+0x222>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	3f ef       	ldi	r19, 0xFF	; 255
 226:	4f e7       	ldi	r20, 0x7F	; 127
 228:	57 e4       	ldi	r21, 0x47	; 71
 22a:	c3 01       	movw	r24, r6
 22c:	b2 01       	movw	r22, r4
 22e:	a5 d2       	rcall	.+1354   	; 0x77a <__gesf2>
 230:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
 232:	0c f0       	brlt	.+2      	; 0x236 <beep+0x17e>
 234:	3d c0       	rjmp	.+122    	; 0x2b0 <beep+0x1f8>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	4a e7       	ldi	r20, 0x7A	; 122
 23c:	54 e4       	ldi	r21, 0x44	; 68
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	55 d1       	rcall	.+682    	; 0x4ee <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 244:	4b 01       	movw	r8, r22
 246:	5c 01       	movw	r10, r24
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4a e7       	ldi	r20, 0x7A	; 122
 24e:	55 e4       	ldi	r21, 0x45	; 69
 250:	98 d2       	rcall	.+1328   	; 0x782 <__mulsf3>
 252:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 254:	7c 01       	movw	r14, r24
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	43 d1       	rcall	.+646    	; 0x4e6 <__cmpsf2>
		__ticks = 1;
	else if (__tmp > 65535)
 260:	88 23       	and	r24, r24
 262:	04 f1       	brlt	.+64     	; 0x2a4 <beep+0x1ec>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	3f ef       	ldi	r19, 0xFF	; 255
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	57 e4       	ldi	r21, 0x47	; 71
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	84 d2       	rcall	.+1288   	; 0x77a <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 272:	18 16       	cp	r1, r24
 274:	9c f4       	brge	.+38     	; 0x29c <beep+0x1e4>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e2       	ldi	r20, 0x20	; 32
 27c:	51 e4       	ldi	r21, 0x41	; 65
 27e:	c5 01       	movw	r24, r10
 280:	b4 01       	movw	r22, r8
 282:	7f d2       	rcall	.+1278   	; 0x782 <__mulsf3>
 284:	9c d1       	rcall	.+824    	; 0x5be <__fixunssfsi>
 286:	06 c0       	rjmp	.+12     	; 0x294 <beep+0x1dc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 288:	80 e9       	ldi	r24, 0x90	; 144
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	f1 f7       	brne	.-4      	; 0x28c <beep+0x1d4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	61 50       	subi	r22, 0x01	; 1
 292:	71 09       	sbc	r23, r1
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 298:	b9 f7       	brne	.-18     	; 0x288 <beep+0x1d0>
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <beep+0x224>
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2a0:	8e d1       	rcall	.+796    	; 0x5be <__fixunssfsi>
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <beep+0x1f0>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	cb 01       	movw	r24, r22
 2aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <beep+0x1f2>
 2ae:	16 c0       	rjmp	.+44     	; 0x2dc <beep+0x224>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	4f e7       	ldi	r20, 0x7F	; 127
 2b6:	53 e4       	ldi	r21, 0x43	; 67
 2b8:	c5 01       	movw	r24, r10
 2ba:	b4 01       	movw	r22, r8
 2bc:	5e d2       	rcall	.+1212   	; 0x77a <__gesf2>
 2be:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 2c0:	3c f4       	brge	.+14     	; 0x2d0 <beep+0x218>
 2c2:	c3 01       	movw	r24, r6
 2c4:	b2 01       	movw	r22, r4
 2c6:	7b d1       	rcall	.+758    	; 0x5be <__fixunssfsi>
 2c8:	cb 01       	movw	r24, r22
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <beep+0x212>
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <beep+0x228>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	74 d1       	rcall	.+744    	; 0x5be <__fixunssfsi>
 2d6:	16 2f       	mov	r17, r22
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <beep+0x224>
 2da:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 2dc:	1a 95       	dec	r17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2de:	f1 f7       	brne	.-4      	; 0x2dc <beep+0x224>
 2e0:	df 91       	pop	r29
}
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	7f 90       	pop	r7
 2fa:	6f 90       	pop	r6
 2fc:	5f 90       	pop	r5
 2fe:	4f 90       	pop	r4
 300:	08 95       	ret

00000302 <tone3>:
 302:	8f 92       	push	r8

void tone3(uint16_t fr, uint16_t dur){
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	eb 01       	movw	r28, r22
	uint16_t on_time = 1./fr*500000.;
 31c:	bc 01       	movw	r22, r24
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	79 d1       	rcall	.+754    	; 0x616 <__floatunsisf>
 324:	9b 01       	movw	r18, r22
 326:	ac 01       	movw	r20, r24
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	9f e3       	ldi	r25, 0x3F	; 63
 330:	de d0       	rcall	.+444    	; 0x4ee <__divsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	34 e2       	ldi	r19, 0x24	; 36
 336:	44 ef       	ldi	r20, 0xF4	; 244
 338:	58 e4       	ldi	r21, 0x48	; 72
 33a:	23 d2       	rcall	.+1094   	; 0x782 <__mulsf3>
 33c:	40 d1       	rcall	.+640    	; 0x5be <__fixunssfsi>
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
 342:	8b 01       	movw	r16, r22
	uint16_t n = dur*1000./(2.*on_time);
 344:	be 01       	movw	r22, r28
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	65 d1       	rcall	.+714    	; 0x616 <__floatunsisf>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	4a e7       	ldi	r20, 0x7A	; 122
 352:	54 e4       	ldi	r21, 0x44	; 68
 354:	16 d2       	rcall	.+1068   	; 0x782 <__mulsf3>
 356:	4b 01       	movw	r8, r22
 358:	5c 01       	movw	r10, r24
 35a:	b6 01       	movw	r22, r12
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	5a d1       	rcall	.+692    	; 0x616 <__floatunsisf>
 362:	9b 01       	movw	r18, r22
 364:	ac 01       	movw	r20, r24
 366:	5b d0       	rcall	.+182    	; 0x41e <__addsf3>
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	c5 01       	movw	r24, r10
 36e:	b4 01       	movw	r22, r8
 370:	be d0       	rcall	.+380    	; 0x4ee <__divsf3>
 372:	25 d1       	rcall	.+586    	; 0x5be <__fixunssfsi>
 374:	7b 01       	movw	r14, r22
 376:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < n; i++)
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	06 c0       	rjmp	.+12     	; 0x388 <tone3+0x86>
 37c:	a8 01       	movw	r20, r16
		beep(0, on_time, on_time);
 37e:	b8 01       	movw	r22, r16
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	99 de       	rcall	.-718    	; 0xb8 <beep>
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	ce 15       	cp	r28, r14
}

void tone3(uint16_t fr, uint16_t dur){
	uint16_t on_time = 1./fr*500000.;
	uint16_t n = dur*1000./(2.*on_time);
	for (int i = 0; i < n; i++)
 38a:	df 05       	cpc	r29, r15
 38c:	b8 f3       	brcs	.-18     	; 0x37c <tone3+0x7a>
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
		beep(0, on_time, on_time);
}
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	8f 90       	pop	r8
 3a6:	08 95       	ret

000003a8 <main>:
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29

int main(void)
{
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	60 97       	sbiw	r28, 0x10	; 16
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	uint8_t btnPushed = 0;
	int freq[] = {523, 587, 659, 698, 784, 880, 988, 1047};
 3bc:	80 e1       	ldi	r24, 0x10	; 16
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	de 01       	movw	r26, r28
 3c4:	11 96       	adiw	r26, 0x01	; 1
 3c6:	01 90       	ld	r0, Z+
 3c8:	0d 92       	st	X+, r0
 3ca:	8a 95       	dec	r24
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x1e>
	DDRB = 0x00;	// PORTB의 모든 포트를 입력 모드로
 3ce:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	88 bb       	out	0x18, r24	; 24
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
 3d4:	84 b3       	in	r24, 0x14	; 20
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	84 bb       	out	0x14, r24	; 20
		beep(0, on_time, on_time);
}

int main(void)
{
	int i = 0;
 3da:	00 e0       	ldi	r16, 0x00	; 0
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <main+0x3c>
		else btnPushed = 0;
		
		if (btnPushed) tone3(freq[i], 300);
		else{
			if (i != 8) i++;
			else i = 0;
 3e0:	00 e0       	ldi	r16, 0x00	; 0
 3e2:	10 e0       	ldi	r17, 0x00	; 0
	DDRB = 0x00;	// PORTB의 모든 포트를 입력 모드로
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
	while (1)
	{
		if (!(PINB & M0)) btnPushed = 1;
 3e4:	b0 99       	sbic	0x16, 0	; 22
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <main+0x44>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <main+0x46>
		else btnPushed = 0;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
		
		if (btnPushed) tone3(freq[i], 300);
 3ee:	88 23       	and	r24, r24
 3f0:	79 f0       	breq	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f2:	f8 01       	movw	r30, r16
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	8c 0f       	add	r24, r28
 3fe:	9d 1f       	adc	r25, r29
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	6c e2       	ldi	r22, 0x2C	; 44
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	80 81       	ld	r24, Z
 40a:	91 81       	ldd	r25, Z+1	; 0x01
 40c:	7a df       	rcall	.-268    	; 0x302 <tone3>
 40e:	ea cf       	rjmp	.-44     	; 0x3e4 <main+0x3c>
		else{
			if (i != 8) i++;
 410:	08 30       	cpi	r16, 0x08	; 8
 412:	11 05       	cpc	r17, r1
 414:	29 f3       	breq	.-54     	; 0x3e0 <main+0x38>
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	e4 cf       	rjmp	.-56     	; 0x3e4 <main+0x3c>

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e d0       	rcall	.+28     	; 0x440 <__addsf3x>
 424:	70 c1       	rjmp	.+736    	; 0x706 <__fp_round>
 426:	61 d1       	rcall	.+706    	; 0x6ea <__fp_pscA>
 428:	30 f0       	brcs	.+12     	; 0x436 <__addsf3+0x18>
 42a:	66 d1       	rcall	.+716    	; 0x6f8 <__fp_pscB>
 42c:	20 f0       	brcs	.+8      	; 0x436 <__addsf3+0x18>
 42e:	31 f4       	brne	.+12     	; 0x43c <__addsf3+0x1e>
 430:	9f 3f       	cpi	r25, 0xFF	; 255
 432:	11 f4       	brne	.+4      	; 0x438 <__addsf3+0x1a>
 434:	1e f4       	brtc	.+6      	; 0x43c <__addsf3+0x1e>
 436:	56 c1       	rjmp	.+684    	; 0x6e4 <__fp_nan>
 438:	0e f4       	brtc	.+2      	; 0x43c <__addsf3+0x1e>
 43a:	e0 95       	com	r30
 43c:	e7 fb       	bst	r30, 7
 43e:	4c c1       	rjmp	.+664    	; 0x6d8 <__fp_inf>

00000440 <__addsf3x>:
 440:	e9 2f       	mov	r30, r25
 442:	72 d1       	rcall	.+740    	; 0x728 <__fp_split3>
 444:	80 f3       	brcs	.-32     	; 0x426 <__addsf3+0x8>
 446:	ba 17       	cp	r27, r26
 448:	62 07       	cpc	r22, r18
 44a:	73 07       	cpc	r23, r19
 44c:	84 07       	cpc	r24, r20
 44e:	95 07       	cpc	r25, r21
 450:	18 f0       	brcs	.+6      	; 0x458 <__addsf3x+0x18>
 452:	71 f4       	brne	.+28     	; 0x470 <__addsf3x+0x30>
 454:	9e f5       	brtc	.+102    	; 0x4bc <__addsf3x+0x7c>
 456:	8a c1       	rjmp	.+788    	; 0x76c <__fp_zero>
 458:	0e f4       	brtc	.+2      	; 0x45c <__addsf3x+0x1c>
 45a:	e0 95       	com	r30
 45c:	0b 2e       	mov	r0, r27
 45e:	ba 2f       	mov	r27, r26
 460:	a0 2d       	mov	r26, r0
 462:	0b 01       	movw	r0, r22
 464:	b9 01       	movw	r22, r18
 466:	90 01       	movw	r18, r0
 468:	0c 01       	movw	r0, r24
 46a:	ca 01       	movw	r24, r20
 46c:	a0 01       	movw	r20, r0
 46e:	11 24       	eor	r1, r1
 470:	ff 27       	eor	r31, r31
 472:	59 1b       	sub	r21, r25
 474:	99 f0       	breq	.+38     	; 0x49c <__addsf3x+0x5c>
 476:	59 3f       	cpi	r21, 0xF9	; 249
 478:	50 f4       	brcc	.+20     	; 0x48e <__addsf3x+0x4e>
 47a:	50 3e       	cpi	r21, 0xE0	; 224
 47c:	68 f1       	brcs	.+90     	; 0x4d8 <__addsf3x+0x98>
 47e:	1a 16       	cp	r1, r26
 480:	f0 40       	sbci	r31, 0x00	; 0
 482:	a2 2f       	mov	r26, r18
 484:	23 2f       	mov	r18, r19
 486:	34 2f       	mov	r19, r20
 488:	44 27       	eor	r20, r20
 48a:	58 5f       	subi	r21, 0xF8	; 248
 48c:	f3 cf       	rjmp	.-26     	; 0x474 <__addsf3x+0x34>
 48e:	46 95       	lsr	r20
 490:	37 95       	ror	r19
 492:	27 95       	ror	r18
 494:	a7 95       	ror	r26
 496:	f0 40       	sbci	r31, 0x00	; 0
 498:	53 95       	inc	r21
 49a:	c9 f7       	brne	.-14     	; 0x48e <__addsf3x+0x4e>
 49c:	7e f4       	brtc	.+30     	; 0x4bc <__addsf3x+0x7c>
 49e:	1f 16       	cp	r1, r31
 4a0:	ba 0b       	sbc	r27, r26
 4a2:	62 0b       	sbc	r22, r18
 4a4:	73 0b       	sbc	r23, r19
 4a6:	84 0b       	sbc	r24, r20
 4a8:	ba f0       	brmi	.+46     	; 0x4d8 <__addsf3x+0x98>
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <__addsf3x+0x96>
 4ae:	ff 0f       	add	r31, r31
 4b0:	bb 1f       	adc	r27, r27
 4b2:	66 1f       	adc	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	c2 f7       	brpl	.-16     	; 0x4aa <__addsf3x+0x6a>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__addsf3x+0x98>
 4bc:	ba 0f       	add	r27, r26
 4be:	62 1f       	adc	r22, r18
 4c0:	73 1f       	adc	r23, r19
 4c2:	84 1f       	adc	r24, r20
 4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__addsf3x+0x98>
 4c6:	87 95       	ror	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f7 95       	ror	r31
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__addsf3x+0x96>
 4d4:	b3 cf       	rjmp	.-154    	; 0x43c <__addsf3+0x1e>
 4d6:	93 95       	inc	r25
 4d8:	88 0f       	add	r24, r24
 4da:	08 f0       	brcs	.+2      	; 0x4de <__addsf3x+0x9e>
 4dc:	99 27       	eor	r25, r25
 4de:	ee 0f       	add	r30, r30
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	08 95       	ret

000004e6 <__cmpsf2>:
 4e6:	d4 d0       	rcall	.+424    	; 0x690 <__fp_cmp>
 4e8:	08 f4       	brcc	.+2      	; 0x4ec <__cmpsf2+0x6>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	08 95       	ret

000004ee <__divsf3>:
 4ee:	0c d0       	rcall	.+24     	; 0x508 <__divsf3x>
 4f0:	0a c1       	rjmp	.+532    	; 0x706 <__fp_round>
 4f2:	02 d1       	rcall	.+516    	; 0x6f8 <__fp_pscB>
 4f4:	40 f0       	brcs	.+16     	; 0x506 <__divsf3+0x18>
 4f6:	f9 d0       	rcall	.+498    	; 0x6ea <__fp_pscA>
 4f8:	30 f0       	brcs	.+12     	; 0x506 <__divsf3+0x18>
 4fa:	21 f4       	brne	.+8      	; 0x504 <__divsf3+0x16>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	19 f0       	breq	.+6      	; 0x506 <__divsf3+0x18>
 500:	eb c0       	rjmp	.+470    	; 0x6d8 <__fp_inf>
 502:	51 11       	cpse	r21, r1
 504:	34 c1       	rjmp	.+616    	; 0x76e <__fp_szero>
 506:	ee c0       	rjmp	.+476    	; 0x6e4 <__fp_nan>

00000508 <__divsf3x>:
 508:	0f d1       	rcall	.+542    	; 0x728 <__fp_split3>
 50a:	98 f3       	brcs	.-26     	; 0x4f2 <__divsf3+0x4>

0000050c <__divsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	c9 f3       	breq	.-14     	; 0x502 <__divsf3+0x14>
 510:	55 23       	and	r21, r21
 512:	b1 f3       	breq	.-20     	; 0x500 <__divsf3+0x12>
 514:	95 1b       	sub	r25, r21
 516:	55 0b       	sbc	r21, r21
 518:	bb 27       	eor	r27, r27
 51a:	aa 27       	eor	r26, r26
 51c:	62 17       	cp	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	38 f0       	brcs	.+14     	; 0x532 <__divsf3_pse+0x26>
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	44 1f       	adc	r20, r20
 52e:	aa 1f       	adc	r26, r26
 530:	a9 f3       	breq	.-22     	; 0x51c <__divsf3_pse+0x10>
 532:	33 d0       	rcall	.+102    	; 0x59a <__divsf3_pse+0x8e>
 534:	0e 2e       	mov	r0, r30
 536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x3a>
 538:	e0 e8       	ldi	r30, 0x80	; 128
 53a:	30 d0       	rcall	.+96     	; 0x59c <__divsf3_pse+0x90>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	50 40       	sbci	r21, 0x00	; 0
 540:	e6 95       	lsr	r30
 542:	00 1c       	adc	r0, r0
 544:	ca f7       	brpl	.-14     	; 0x538 <__divsf3_pse+0x2c>
 546:	29 d0       	rcall	.+82     	; 0x59a <__divsf3_pse+0x8e>
 548:	fe 2f       	mov	r31, r30
 54a:	27 d0       	rcall	.+78     	; 0x59a <__divsf3_pse+0x8e>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	bb 1f       	adc	r27, r27
 554:	26 17       	cp	r18, r22
 556:	37 07       	cpc	r19, r23
 558:	48 07       	cpc	r20, r24
 55a:	ab 07       	cpc	r26, r27
 55c:	b0 e8       	ldi	r27, 0x80	; 128
 55e:	09 f0       	breq	.+2      	; 0x562 <__divsf3_pse+0x56>
 560:	bb 0b       	sbc	r27, r27
 562:	80 2d       	mov	r24, r0
 564:	bf 01       	movw	r22, r30
 566:	ff 27       	eor	r31, r31
 568:	93 58       	subi	r25, 0x83	; 131
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	2a f0       	brmi	.+10     	; 0x578 <__divsf3_pse+0x6c>
 56e:	9e 3f       	cpi	r25, 0xFE	; 254
 570:	51 05       	cpc	r21, r1
 572:	68 f0       	brcs	.+26     	; 0x58e <__divsf3_pse+0x82>
 574:	b1 c0       	rjmp	.+354    	; 0x6d8 <__fp_inf>
 576:	fb c0       	rjmp	.+502    	; 0x76e <__fp_szero>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	ec f3       	brlt	.-6      	; 0x576 <__divsf3_pse+0x6a>
 57c:	98 3e       	cpi	r25, 0xE8	; 232
 57e:	dc f3       	brlt	.-10     	; 0x576 <__divsf3_pse+0x6a>
 580:	86 95       	lsr	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f7 95       	ror	r31
 58a:	9f 5f       	subi	r25, 0xFF	; 255
 58c:	c9 f7       	brne	.-14     	; 0x580 <__divsf3_pse+0x74>
 58e:	88 0f       	add	r24, r24
 590:	91 1d       	adc	r25, r1
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret
 59a:	e1 e0       	ldi	r30, 0x01	; 1
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	bb 1f       	adc	r27, r27
 5a4:	62 17       	cp	r22, r18
 5a6:	73 07       	cpc	r23, r19
 5a8:	84 07       	cpc	r24, r20
 5aa:	ba 07       	cpc	r27, r26
 5ac:	20 f0       	brcs	.+8      	; 0x5b6 <__divsf3_pse+0xaa>
 5ae:	62 1b       	sub	r22, r18
 5b0:	73 0b       	sbc	r23, r19
 5b2:	84 0b       	sbc	r24, r20
 5b4:	ba 0b       	sbc	r27, r26
 5b6:	ee 1f       	adc	r30, r30
 5b8:	88 f7       	brcc	.-30     	; 0x59c <__divsf3_pse+0x90>
 5ba:	e0 95       	com	r30
 5bc:	08 95       	ret

000005be <__fixunssfsi>:
 5be:	bc d0       	rcall	.+376    	; 0x738 <__fp_splitA>
 5c0:	88 f0       	brcs	.+34     	; 0x5e4 <__fixunssfsi+0x26>
 5c2:	9f 57       	subi	r25, 0x7F	; 127
 5c4:	90 f0       	brcs	.+36     	; 0x5ea <__fixunssfsi+0x2c>
 5c6:	b9 2f       	mov	r27, r25
 5c8:	99 27       	eor	r25, r25
 5ca:	b7 51       	subi	r27, 0x17	; 23
 5cc:	a0 f0       	brcs	.+40     	; 0x5f6 <__fixunssfsi+0x38>
 5ce:	d1 f0       	breq	.+52     	; 0x604 <__fixunssfsi+0x46>
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	1a f0       	brmi	.+6      	; 0x5e0 <__fixunssfsi+0x22>
 5da:	ba 95       	dec	r27
 5dc:	c9 f7       	brne	.-14     	; 0x5d0 <__fixunssfsi+0x12>
 5de:	12 c0       	rjmp	.+36     	; 0x604 <__fixunssfsi+0x46>
 5e0:	b1 30       	cpi	r27, 0x01	; 1
 5e2:	81 f0       	breq	.+32     	; 0x604 <__fixunssfsi+0x46>
 5e4:	c3 d0       	rcall	.+390    	; 0x76c <__fp_zero>
 5e6:	b1 e0       	ldi	r27, 0x01	; 1
 5e8:	08 95       	ret
 5ea:	c0 c0       	rjmp	.+384    	; 0x76c <__fp_zero>
 5ec:	67 2f       	mov	r22, r23
 5ee:	78 2f       	mov	r23, r24
 5f0:	88 27       	eor	r24, r24
 5f2:	b8 5f       	subi	r27, 0xF8	; 248
 5f4:	39 f0       	breq	.+14     	; 0x604 <__fixunssfsi+0x46>
 5f6:	b9 3f       	cpi	r27, 0xF9	; 249
 5f8:	cc f3       	brlt	.-14     	; 0x5ec <__fixunssfsi+0x2e>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b3 95       	inc	r27
 602:	d9 f7       	brne	.-10     	; 0x5fa <__fixunssfsi+0x3c>
 604:	3e f4       	brtc	.+14     	; 0x614 <__fixunssfsi+0x56>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__floatunsisf>:
 616:	e8 94       	clt
 618:	09 c0       	rjmp	.+18     	; 0x62c <__floatsisf+0x12>

0000061a <__floatsisf>:
 61a:	97 fb       	bst	r25, 7
 61c:	3e f4       	brtc	.+14     	; 0x62c <__floatsisf+0x12>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	99 23       	and	r25, r25
 62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x40>
 630:	f9 2f       	mov	r31, r25
 632:	96 e9       	ldi	r25, 0x96	; 150
 634:	bb 27       	eor	r27, r27
 636:	93 95       	inc	r25
 638:	f6 95       	lsr	r31
 63a:	87 95       	ror	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f1 11       	cpse	r31, r1
 644:	f8 cf       	rjmp	.-16     	; 0x636 <__floatsisf+0x1c>
 646:	fa f4       	brpl	.+62     	; 0x686 <__floatsisf+0x6c>
 648:	bb 0f       	add	r27, r27
 64a:	11 f4       	brne	.+4      	; 0x650 <__floatsisf+0x36>
 64c:	60 ff       	sbrs	r22, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__floatsisf+0x6c>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	16 c0       	rjmp	.+44     	; 0x686 <__floatsisf+0x6c>
 65a:	88 23       	and	r24, r24
 65c:	11 f0       	breq	.+4      	; 0x662 <__floatsisf+0x48>
 65e:	96 e9       	ldi	r25, 0x96	; 150
 660:	11 c0       	rjmp	.+34     	; 0x684 <__floatsisf+0x6a>
 662:	77 23       	and	r23, r23
 664:	21 f0       	breq	.+8      	; 0x66e <__floatsisf+0x54>
 666:	9e e8       	ldi	r25, 0x8E	; 142
 668:	87 2f       	mov	r24, r23
 66a:	76 2f       	mov	r23, r22
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__floatsisf+0x5e>
 66e:	66 23       	and	r22, r22
 670:	71 f0       	breq	.+28     	; 0x68e <__floatsisf+0x74>
 672:	96 e8       	ldi	r25, 0x86	; 134
 674:	86 2f       	mov	r24, r22
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	2a f0       	brmi	.+10     	; 0x686 <__floatsisf+0x6c>
 67c:	9a 95       	dec	r25
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	da f7       	brpl	.-10     	; 0x67c <__floatsisf+0x62>
 686:	88 0f       	add	r24, r24
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__fp_cmp>:
 690:	99 0f       	add	r25, r25
 692:	00 08       	sbc	r0, r0
 694:	55 0f       	add	r21, r21
 696:	aa 0b       	sbc	r26, r26
 698:	e0 e8       	ldi	r30, 0x80	; 128
 69a:	fe ef       	ldi	r31, 0xFE	; 254
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	e8 07       	cpc	r30, r24
 6a2:	f9 07       	cpc	r31, r25
 6a4:	c0 f0       	brcs	.+48     	; 0x6d6 <__fp_cmp+0x46>
 6a6:	12 16       	cp	r1, r18
 6a8:	13 06       	cpc	r1, r19
 6aa:	e4 07       	cpc	r30, r20
 6ac:	f5 07       	cpc	r31, r21
 6ae:	98 f0       	brcs	.+38     	; 0x6d6 <__fp_cmp+0x46>
 6b0:	62 1b       	sub	r22, r18
 6b2:	73 0b       	sbc	r23, r19
 6b4:	84 0b       	sbc	r24, r20
 6b6:	95 0b       	sbc	r25, r21
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <__fp_cmp+0x38>
 6ba:	0a 26       	eor	r0, r26
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <__fp_cmp+0x46>
 6be:	23 2b       	or	r18, r19
 6c0:	24 2b       	or	r18, r20
 6c2:	25 2b       	or	r18, r21
 6c4:	21 f4       	brne	.+8      	; 0x6ce <__fp_cmp+0x3e>
 6c6:	08 95       	ret
 6c8:	0a 26       	eor	r0, r26
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__fp_cmp+0x3e>
 6cc:	a1 40       	sbci	r26, 0x01	; 1
 6ce:	a6 95       	lsr	r26
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	81 1d       	adc	r24, r1
 6d4:	81 1d       	adc	r24, r1
 6d6:	08 95       	ret

000006d8 <__fp_inf>:
 6d8:	97 f9       	bld	r25, 7
 6da:	9f 67       	ori	r25, 0x7F	; 127
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <__fp_nan>:
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	80 ec       	ldi	r24, 0xC0	; 192
 6e8:	08 95       	ret

000006ea <__fp_pscA>:
 6ea:	00 24       	eor	r0, r0
 6ec:	0a 94       	dec	r0
 6ee:	16 16       	cp	r1, r22
 6f0:	17 06       	cpc	r1, r23
 6f2:	18 06       	cpc	r1, r24
 6f4:	09 06       	cpc	r0, r25
 6f6:	08 95       	ret

000006f8 <__fp_pscB>:
 6f8:	00 24       	eor	r0, r0
 6fa:	0a 94       	dec	r0
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	05 06       	cpc	r0, r21
 704:	08 95       	ret

00000706 <__fp_round>:
 706:	09 2e       	mov	r0, r25
 708:	03 94       	inc	r0
 70a:	00 0c       	add	r0, r0
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_round+0xc>
 70e:	88 23       	and	r24, r24
 710:	52 f0       	brmi	.+20     	; 0x726 <__fp_round+0x20>
 712:	bb 0f       	add	r27, r27
 714:	40 f4       	brcc	.+16     	; 0x726 <__fp_round+0x20>
 716:	bf 2b       	or	r27, r31
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0x18>
 71a:	60 ff       	sbrs	r22, 0
 71c:	04 c0       	rjmp	.+8      	; 0x726 <__fp_round+0x20>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	08 95       	ret

00000728 <__fp_split3>:
 728:	57 fd       	sbrc	r21, 7
 72a:	90 58       	subi	r25, 0x80	; 128
 72c:	44 0f       	add	r20, r20
 72e:	55 1f       	adc	r21, r21
 730:	59 f0       	breq	.+22     	; 0x748 <__fp_splitA+0x10>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	71 f0       	breq	.+28     	; 0x752 <__fp_splitA+0x1a>
 736:	47 95       	ror	r20

00000738 <__fp_splitA>:
 738:	88 0f       	add	r24, r24
 73a:	97 fb       	bst	r25, 7
 73c:	99 1f       	adc	r25, r25
 73e:	61 f0       	breq	.+24     	; 0x758 <__fp_splitA+0x20>
 740:	9f 3f       	cpi	r25, 0xFF	; 255
 742:	79 f0       	breq	.+30     	; 0x762 <__fp_splitA+0x2a>
 744:	87 95       	ror	r24
 746:	08 95       	ret
 748:	12 16       	cp	r1, r18
 74a:	13 06       	cpc	r1, r19
 74c:	14 06       	cpc	r1, r20
 74e:	55 1f       	adc	r21, r21
 750:	f2 cf       	rjmp	.-28     	; 0x736 <__fp_split3+0xe>
 752:	46 95       	lsr	r20
 754:	f1 df       	rcall	.-30     	; 0x738 <__fp_splitA>
 756:	08 c0       	rjmp	.+16     	; 0x768 <__fp_splitA+0x30>
 758:	16 16       	cp	r1, r22
 75a:	17 06       	cpc	r1, r23
 75c:	18 06       	cpc	r1, r24
 75e:	99 1f       	adc	r25, r25
 760:	f1 cf       	rjmp	.-30     	; 0x744 <__fp_splitA+0xc>
 762:	86 95       	lsr	r24
 764:	71 05       	cpc	r23, r1
 766:	61 05       	cpc	r22, r1
 768:	08 94       	sec
 76a:	08 95       	ret

0000076c <__fp_zero>:
 76c:	e8 94       	clt

0000076e <__fp_szero>:
 76e:	bb 27       	eor	r27, r27
 770:	66 27       	eor	r22, r22
 772:	77 27       	eor	r23, r23
 774:	cb 01       	movw	r24, r22
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret

0000077a <__gesf2>:
 77a:	8a df       	rcall	.-236    	; 0x690 <__fp_cmp>
 77c:	08 f4       	brcc	.+2      	; 0x780 <__gesf2+0x6>
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	08 95       	ret

00000782 <__mulsf3>:
 782:	0b d0       	rcall	.+22     	; 0x79a <__mulsf3x>
 784:	c0 cf       	rjmp	.-128    	; 0x706 <__fp_round>
 786:	b1 df       	rcall	.-158    	; 0x6ea <__fp_pscA>
 788:	28 f0       	brcs	.+10     	; 0x794 <__mulsf3+0x12>
 78a:	b6 df       	rcall	.-148    	; 0x6f8 <__fp_pscB>
 78c:	18 f0       	brcs	.+6      	; 0x794 <__mulsf3+0x12>
 78e:	95 23       	and	r25, r21
 790:	09 f0       	breq	.+2      	; 0x794 <__mulsf3+0x12>
 792:	a2 cf       	rjmp	.-188    	; 0x6d8 <__fp_inf>
 794:	a7 cf       	rjmp	.-178    	; 0x6e4 <__fp_nan>
 796:	11 24       	eor	r1, r1
 798:	ea cf       	rjmp	.-44     	; 0x76e <__fp_szero>

0000079a <__mulsf3x>:
 79a:	c6 df       	rcall	.-116    	; 0x728 <__fp_split3>
 79c:	a0 f3       	brcs	.-24     	; 0x786 <__mulsf3+0x4>

0000079e <__mulsf3_pse>:
 79e:	95 9f       	mul	r25, r21
 7a0:	d1 f3       	breq	.-12     	; 0x796 <__mulsf3+0x14>
 7a2:	95 0f       	add	r25, r21
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	55 1f       	adc	r21, r21
 7a8:	62 9f       	mul	r22, r18
 7aa:	f0 01       	movw	r30, r0
 7ac:	72 9f       	mul	r23, r18
 7ae:	bb 27       	eor	r27, r27
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	63 9f       	mul	r22, r19
 7b6:	aa 27       	eor	r26, r26
 7b8:	f0 0d       	add	r31, r0
 7ba:	b1 1d       	adc	r27, r1
 7bc:	aa 1f       	adc	r26, r26
 7be:	64 9f       	mul	r22, r20
 7c0:	66 27       	eor	r22, r22
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	66 1f       	adc	r22, r22
 7c8:	82 9f       	mul	r24, r18
 7ca:	22 27       	eor	r18, r18
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	73 9f       	mul	r23, r19
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	62 1f       	adc	r22, r18
 7da:	83 9f       	mul	r24, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	22 1f       	adc	r18, r18
 7e2:	74 9f       	mul	r23, r20
 7e4:	33 27       	eor	r19, r19
 7e6:	a0 0d       	add	r26, r0
 7e8:	61 1d       	adc	r22, r1
 7ea:	23 1f       	adc	r18, r19
 7ec:	84 9f       	mul	r24, r20
 7ee:	60 0d       	add	r22, r0
 7f0:	21 1d       	adc	r18, r1
 7f2:	82 2f       	mov	r24, r18
 7f4:	76 2f       	mov	r23, r22
 7f6:	6a 2f       	mov	r22, r26
 7f8:	11 24       	eor	r1, r1
 7fa:	9f 57       	subi	r25, 0x7F	; 127
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	8a f0       	brmi	.+34     	; 0x822 <__mulsf3_pse+0x84>
 800:	e1 f0       	breq	.+56     	; 0x83a <__mulsf3_pse+0x9c>
 802:	88 23       	and	r24, r24
 804:	4a f0       	brmi	.+18     	; 0x818 <__mulsf3_pse+0x7a>
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	91 50       	subi	r25, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	a9 f7       	brne	.-22     	; 0x802 <__mulsf3_pse+0x64>
 818:	9e 3f       	cpi	r25, 0xFE	; 254
 81a:	51 05       	cpc	r21, r1
 81c:	70 f0       	brcs	.+28     	; 0x83a <__mulsf3_pse+0x9c>
 81e:	5c cf       	rjmp	.-328    	; 0x6d8 <__fp_inf>
 820:	a6 cf       	rjmp	.-180    	; 0x76e <__fp_szero>
 822:	5f 3f       	cpi	r21, 0xFF	; 255
 824:	ec f3       	brlt	.-6      	; 0x820 <__mulsf3_pse+0x82>
 826:	98 3e       	cpi	r25, 0xE8	; 232
 828:	dc f3       	brlt	.-10     	; 0x820 <__mulsf3_pse+0x82>
 82a:	86 95       	lsr	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	e7 95       	ror	r30
 836:	9f 5f       	subi	r25, 0xFF	; 255
 838:	c1 f7       	brne	.-16     	; 0x82a <__mulsf3_pse+0x8c>
 83a:	fe 2b       	or	r31, r30
 83c:	88 0f       	add	r24, r24
 83e:	91 1d       	adc	r25, r1
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
