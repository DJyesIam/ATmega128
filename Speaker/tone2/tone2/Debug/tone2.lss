
tone2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000886  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000886  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc2  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a1  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006eb  00000000  00000000  0000290f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	d7 d1       	rcall	.+942    	; 0x462 <main>
  b4:	e6 c3       	rjmp	.+1996   	; 0x882 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <tone2>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <util/delay.h>
#define HALF_CYC 500000UL
#define M0 1<<0

void tone2(int fr, int duration){
  b8:	2f 92       	push	r2
  ba:	3f 92       	push	r3
  bc:	4f 92       	push	r4
  be:	5f 92       	push	r5
  c0:	6f 92       	push	r6
  c2:	7f 92       	push	r7
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	66 97       	sbiw	r28, 0x16	; 22
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	1b 01       	movw	r2, r22
	uint32_t t_tot = HALF_CYC/fr;
  ee:	9c 01       	movw	r18, r24
  f0:	99 0f       	add	r25, r25
  f2:	44 0b       	sbc	r20, r20
  f4:	55 0b       	sbc	r21, r21
  f6:	60 e2       	ldi	r22, 0x20	; 32
  f8:	71 ea       	ldi	r23, 0xA1	; 161
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9f d3       	rcall	.+1854   	; 0x83e <__udivmodsi4>
	int t_ms = t_tot / 1000;
 100:	ca 01       	movw	r24, r20
 102:	b9 01       	movw	r22, r18
 104:	28 ee       	ldi	r18, 0xE8	; 232
 106:	33 e0       	ldi	r19, 0x03	; 3
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	98 d3       	rcall	.+1840   	; 0x83e <__udivmodsi4>
 10e:	39 01       	movw	r6, r18
	int t_us = t_tot % 1000;
 110:	8b 01       	movw	r16, r22
	int i;
	for (i = 0; i < duration; i++){
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9e 8b       	std	Y+22, r25	; 0x16
 118:	8d 8b       	std	Y+21, r24	; 0x15
 11a:	84 c1       	rjmp	.+776    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		PORTC |= M0;
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 bb       	out	0x15, r24	; 21
		_delay_ms(t_ms); _delay_us(t_us);
 122:	b3 01       	movw	r22, r6
 124:	07 2c       	mov	r0, r7
 126:	00 0c       	add	r0, r0
 128:	88 0b       	sbc	r24, r24
 12a:	99 0b       	sbc	r25, r25
 12c:	71 d2       	rcall	.+1250   	; 0x610 <__floatsisf>
 12e:	69 87       	std	Y+9, r22	; 0x09
 130:	7a 87       	std	Y+10, r23	; 0x0a
 132:	8b 87       	std	Y+11, r24	; 0x0b
 134:	9c 87       	std	Y+12, r25	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4a e7       	ldi	r20, 0x7A	; 122
 13c:	55 e4       	ldi	r21, 0x45	; 69
 13e:	1c d3       	rcall	.+1592   	; 0x778 <__mulsf3>
 140:	6b 01       	movw	r12, r22
 142:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e8       	ldi	r20, 0x80	; 128
 14a:	5f e3       	ldi	r21, 0x3F	; 63
 14c:	c7 d1       	rcall	.+910    	; 0x4dc <__cmpsf2>
 14e:	88 23       	and	r24, r24
 150:	14 f1       	brlt	.+68     	; 0x196 <tone2+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	3f ef       	ldi	r19, 0xFF	; 255
 156:	4f e7       	ldi	r20, 0x7F	; 127
 158:	57 e4       	ldi	r21, 0x47	; 71
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	08 d3       	rcall	.+1552   	; 0x770 <__gesf2>
 160:	18 16       	cp	r1, r24
 162:	ac f4       	brge	.+42     	; 0x18e <tone2+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e2       	ldi	r20, 0x20	; 32
 16a:	51 e4       	ldi	r21, 0x41	; 65
 16c:	69 85       	ldd	r22, Y+9	; 0x09
 16e:	7a 85       	ldd	r23, Y+10	; 0x0a
 170:	8b 85       	ldd	r24, Y+11	; 0x0b
 172:	9c 85       	ldd	r25, Y+12	; 0x0c
 174:	01 d3       	rcall	.+1538   	; 0x778 <__mulsf3>
 176:	1e d2       	rcall	.+1084   	; 0x5b4 <__fixunssfsi>
 178:	06 c0       	rjmp	.+12     	; 0x186 <tone2+0xce>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	80 e9       	ldi	r24, 0x90	; 144
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <tone2+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	71 09       	sbc	r23, r1
 186:	61 15       	cp	r22, r1
 188:	71 05       	cpc	r23, r1
 18a:	b9 f7       	brne	.-18     	; 0x17a <tone2+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <tone2+0xe8>
 18e:	c7 01       	movw	r24, r14
 190:	b6 01       	movw	r22, r12
 192:	10 d2       	rcall	.+1056   	; 0x5b4 <__fixunssfsi>
 194:	02 c0       	rjmp	.+4      	; 0x19a <tone2+0xe2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	cb 01       	movw	r24, r22
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <tone2+0xe4>
 1a0:	b8 01       	movw	r22, r16
 1a2:	01 2e       	mov	r0, r17
 1a4:	00 0c       	add	r0, r0
 1a6:	88 0b       	sbc	r24, r24
 1a8:	99 0b       	sbc	r25, r25
 1aa:	32 d2       	rcall	.+1124   	; 0x610 <__floatsisf>
 1ac:	69 83       	std	Y+1, r22	; 0x01
 1ae:	7a 83       	std	Y+2, r23	; 0x02
 1b0:	8b 83       	std	Y+3, r24	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 1b2:	9c 83       	std	Y+4, r25	; 0x04
 1b4:	2b ea       	ldi	r18, 0xAB	; 171
 1b6:	3a ea       	ldi	r19, 0xAA	; 170
 1b8:	4a ea       	ldi	r20, 0xAA	; 170
 1ba:	50 e4       	ldi	r21, 0x40	; 64
 1bc:	dd d2       	rcall	.+1466   	; 0x778 <__mulsf3>
 1be:	4b 01       	movw	r8, r22
	__tmp2 = ((F_CPU) / 4e6) * __us;
 1c0:	5c 01       	movw	r10, r24
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e8       	ldi	r20, 0x80	; 128
 1c8:	50 e4       	ldi	r21, 0x40	; 64
 1ca:	69 81       	ldd	r22, Y+1	; 0x01
 1cc:	7a 81       	ldd	r23, Y+2	; 0x02
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	d2 d2       	rcall	.+1444   	; 0x778 <__mulsf3>
 1d4:	6d 83       	std	Y+5, r22	; 0x05
 1d6:	7e 83       	std	Y+6, r23	; 0x06
 1d8:	8f 83       	std	Y+7, r24	; 0x07
	if (__tmp < 1.0)
 1da:	98 87       	std	Y+8, r25	; 0x08
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	c5 01       	movw	r24, r10
 1e6:	b4 01       	movw	r22, r8
 1e8:	79 d1       	rcall	.+754    	; 0x4dc <__cmpsf2>
 1ea:	88 23       	and	r24, r24
 1ec:	0c f4       	brge	.+2      	; 0x1f0 <tone2+0x138>
		__ticks = 1;
	else if (__tmp2 > 65535)
 1ee:	6c c0       	rjmp	.+216    	; 0x2c8 <tone2+0x210>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	3f ef       	ldi	r19, 0xFF	; 255
 1f4:	4f e7       	ldi	r20, 0x7F	; 127
 1f6:	57 e4       	ldi	r21, 0x47	; 71
 1f8:	6d 81       	ldd	r22, Y+5	; 0x05
 1fa:	7e 81       	ldd	r23, Y+6	; 0x06
 1fc:	8f 81       	ldd	r24, Y+7	; 0x07
 1fe:	98 85       	ldd	r25, Y+8	; 0x08
 200:	b7 d2       	rcall	.+1390   	; 0x770 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	0c f0       	brlt	.+2      	; 0x208 <tone2+0x150>
	{
		_delay_ms(__us / 1000.0);
 206:	49 c0       	rjmp	.+146    	; 0x29a <tone2+0x1e2>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	4a e7       	ldi	r20, 0x7A	; 122
 20e:	54 e4       	ldi	r21, 0x44	; 68
 210:	69 81       	ldd	r22, Y+1	; 0x01
 212:	7a 81       	ldd	r23, Y+2	; 0x02
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	65 d1       	rcall	.+714    	; 0x4e4 <__divsf3>
 21a:	69 8b       	std	Y+17, r22	; 0x11
 21c:	7a 8b       	std	Y+18, r23	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 21e:	8b 8b       	std	Y+19, r24	; 0x13
 220:	9c 8b       	std	Y+20, r25	; 0x14
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	4a e7       	ldi	r20, 0x7A	; 122
 228:	55 e4       	ldi	r21, 0x45	; 69
 22a:	a6 d2       	rcall	.+1356   	; 0x778 <__mulsf3>
 22c:	6d 87       	std	Y+13, r22	; 0x0d
 22e:	7e 87       	std	Y+14, r23	; 0x0e
	if (__tmp < 1.0)
 230:	8f 87       	std	Y+15, r24	; 0x0f
 232:	98 8b       	std	Y+16, r25	; 0x10
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5f e3       	ldi	r21, 0x3F	; 63
 23c:	4f d1       	rcall	.+670    	; 0x4dc <__cmpsf2>
 23e:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 240:	34 f1       	brlt	.+76     	; 0x28e <tone2+0x1d6>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	3f ef       	ldi	r19, 0xFF	; 255
 246:	4f e7       	ldi	r20, 0x7F	; 127
 248:	57 e4       	ldi	r21, 0x47	; 71
 24a:	6d 85       	ldd	r22, Y+13	; 0x0d
 24c:	7e 85       	ldd	r23, Y+14	; 0x0e
 24e:	8f 85       	ldd	r24, Y+15	; 0x0f
 250:	98 89       	ldd	r25, Y+16	; 0x10
 252:	8e d2       	rcall	.+1308   	; 0x770 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 254:	18 16       	cp	r1, r24
 256:	ac f4       	brge	.+42     	; 0x282 <tone2+0x1ca>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e2       	ldi	r20, 0x20	; 32
 25e:	51 e4       	ldi	r21, 0x41	; 65
 260:	69 89       	ldd	r22, Y+17	; 0x11
 262:	7a 89       	ldd	r23, Y+18	; 0x12
 264:	8b 89       	ldd	r24, Y+19	; 0x13
 266:	9c 89       	ldd	r25, Y+20	; 0x14
 268:	87 d2       	rcall	.+1294   	; 0x778 <__mulsf3>
 26a:	a4 d1       	rcall	.+840    	; 0x5b4 <__fixunssfsi>
 26c:	06 c0       	rjmp	.+12     	; 0x27a <tone2+0x1c2>
 26e:	80 e9       	ldi	r24, 0x90	; 144
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 274:	f1 f7       	brne	.-4      	; 0x272 <tone2+0x1ba>
 276:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 278:	71 09       	sbc	r23, r1
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 27e:	b9 f7       	brne	.-18     	; 0x26e <tone2+0x1b6>
 280:	25 c0       	rjmp	.+74     	; 0x2cc <tone2+0x214>
 282:	6d 85       	ldd	r22, Y+13	; 0x0d
 284:	7e 85       	ldd	r23, Y+14	; 0x0e
 286:	8f 85       	ldd	r24, Y+15	; 0x0f
 288:	98 89       	ldd	r25, Y+16	; 0x10

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 28a:	94 d1       	rcall	.+808    	; 0x5b4 <__fixunssfsi>
 28c:	02 c0       	rjmp	.+4      	; 0x292 <tone2+0x1da>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	cb 01       	movw	r24, r22
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <tone2+0x1dc>
 298:	19 c0       	rjmp	.+50     	; 0x2cc <tone2+0x214>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	4f e7       	ldi	r20, 0x7F	; 127
 2a0:	53 e4       	ldi	r21, 0x43	; 67
 2a2:	c5 01       	movw	r24, r10
 2a4:	b4 01       	movw	r22, r8
 2a6:	64 d2       	rcall	.+1224   	; 0x770 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 2a8:	18 16       	cp	r1, r24
 2aa:	4c f4       	brge	.+18     	; 0x2be <tone2+0x206>
 2ac:	6d 81       	ldd	r22, Y+5	; 0x05
 2ae:	7e 81       	ldd	r23, Y+6	; 0x06
 2b0:	8f 81       	ldd	r24, Y+7	; 0x07
 2b2:	98 85       	ldd	r25, Y+8	; 0x08
 2b4:	7f d1       	rcall	.+766    	; 0x5b4 <__fixunssfsi>
 2b6:	cb 01       	movw	r24, r22
 2b8:	01 97       	sbiw	r24, 0x01	; 1
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <tone2+0x200>
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <tone2+0x21a>
 2be:	c5 01       	movw	r24, r10
 2c0:	b4 01       	movw	r22, r8
 2c2:	78 d1       	rcall	.+752    	; 0x5b4 <__fixunssfsi>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 2c4:	46 2e       	mov	r4, r22
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <tone2+0x214>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c8:	44 24       	eor	r4, r4
 2ca:	43 94       	inc	r4
 2cc:	84 2d       	mov	r24, r4
		PORTC &= ~M0;
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <tone2+0x216>
 2d2:	85 b3       	in	r24, 0x15	; 21
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	85 bb       	out	0x15, r24	; 21
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e8       	ldi	r20, 0x80	; 128
 2de:	5f e3       	ldi	r21, 0x3F	; 63
 2e0:	c7 01       	movw	r24, r14
 2e2:	b6 01       	movw	r22, r12
		__ticks = 1;
	else if (__tmp > 65535)
 2e4:	fb d0       	rcall	.+502    	; 0x4dc <__cmpsf2>
 2e6:	88 23       	and	r24, r24
 2e8:	14 f1       	brlt	.+68     	; 0x32e <tone2+0x276>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	3f ef       	ldi	r19, 0xFF	; 255
 2ee:	4f e7       	ldi	r20, 0x7F	; 127
 2f0:	57 e4       	ldi	r21, 0x47	; 71
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f6:	3c d2       	rcall	.+1144   	; 0x770 <__gesf2>
 2f8:	18 16       	cp	r1, r24
 2fa:	ac f4       	brge	.+42     	; 0x326 <tone2+0x26e>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e2       	ldi	r20, 0x20	; 32
 302:	51 e4       	ldi	r21, 0x41	; 65
 304:	69 85       	ldd	r22, Y+9	; 0x09
 306:	7a 85       	ldd	r23, Y+10	; 0x0a
 308:	8b 85       	ldd	r24, Y+11	; 0x0b
 30a:	9c 85       	ldd	r25, Y+12	; 0x0c
 30c:	35 d2       	rcall	.+1130   	; 0x778 <__mulsf3>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30e:	52 d1       	rcall	.+676    	; 0x5b4 <__fixunssfsi>
 310:	06 c0       	rjmp	.+12     	; 0x31e <tone2+0x266>
 312:	80 e9       	ldi	r24, 0x90	; 144
 314:	91 e0       	ldi	r25, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <tone2+0x25e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31a:	61 50       	subi	r22, 0x01	; 1
 31c:	71 09       	sbc	r23, r1
 31e:	61 15       	cp	r22, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 320:	71 05       	cpc	r23, r1
 322:	b9 f7       	brne	.-18     	; 0x312 <tone2+0x25a>
 324:	09 c0       	rjmp	.+18     	; 0x338 <tone2+0x280>
 326:	c7 01       	movw	r24, r14
 328:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 32a:	44 d1       	rcall	.+648    	; 0x5b4 <__fixunssfsi>
 32c:	02 c0       	rjmp	.+4      	; 0x332 <tone2+0x27a>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	cb 01       	movw	r24, r22
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <tone2+0x27c>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e8       	ldi	r20, 0x80	; 128
 33e:	5f e3       	ldi	r21, 0x3F	; 63
 340:	c5 01       	movw	r24, r10
 342:	b4 01       	movw	r22, r8
 344:	cb d0       	rcall	.+406    	; 0x4dc <__cmpsf2>
		__ticks = 1;
	else if (__tmp2 > 65535)
 346:	88 23       	and	r24, r24
 348:	0c f4       	brge	.+2      	; 0x34c <tone2+0x294>
 34a:	62 c0       	rjmp	.+196    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	3f ef       	ldi	r19, 0xFF	; 255
 350:	4f e7       	ldi	r20, 0x7F	; 127
 352:	57 e4       	ldi	r21, 0x47	; 71
 354:	6d 81       	ldd	r22, Y+5	; 0x05
 356:	7e 81       	ldd	r23, Y+6	; 0x06
 358:	8f 81       	ldd	r24, Y+7	; 0x07
 35a:	98 85       	ldd	r25, Y+8	; 0x08
 35c:	09 d2       	rcall	.+1042   	; 0x770 <__gesf2>
	{
		_delay_ms(__us / 1000.0);
 35e:	18 16       	cp	r1, r24
 360:	0c f0       	brlt	.+2      	; 0x364 <tone2+0x2ac>
 362:	3f c0       	rjmp	.+126    	; 0x3e2 <tone2+0x32a>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	4a e7       	ldi	r20, 0x7A	; 122
 36a:	54 e4       	ldi	r21, 0x44	; 68
 36c:	69 81       	ldd	r22, Y+1	; 0x01
 36e:	7a 81       	ldd	r23, Y+2	; 0x02
 370:	8b 81       	ldd	r24, Y+3	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 372:	9c 81       	ldd	r25, Y+4	; 0x04
 374:	b7 d0       	rcall	.+366    	; 0x4e4 <__divsf3>
 376:	4b 01       	movw	r8, r22
 378:	5c 01       	movw	r10, r24
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	4a e7       	ldi	r20, 0x7A	; 122
 380:	55 e4       	ldi	r21, 0x45	; 69
	if (__tmp < 1.0)
 382:	fa d1       	rcall	.+1012   	; 0x778 <__mulsf3>
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e8       	ldi	r20, 0x80	; 128
 38e:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
 390:	a5 d0       	rcall	.+330    	; 0x4dc <__cmpsf2>
 392:	88 23       	and	r24, r24
 394:	04 f1       	brlt	.+64     	; 0x3d6 <tone2+0x31e>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	3f ef       	ldi	r19, 0xFF	; 255
 39a:	4f e7       	ldi	r20, 0x7F	; 127
 39c:	57 e4       	ldi	r21, 0x47	; 71
 39e:	c7 01       	movw	r24, r14
 3a0:	b6 01       	movw	r22, r12
 3a2:	e6 d1       	rcall	.+972    	; 0x770 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a4:	18 16       	cp	r1, r24
 3a6:	9c f4       	brge	.+38     	; 0x3ce <tone2+0x316>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e2       	ldi	r20, 0x20	; 32
 3ae:	51 e4       	ldi	r21, 0x41	; 65
 3b0:	c5 01       	movw	r24, r10
 3b2:	b4 01       	movw	r22, r8
 3b4:	e1 d1       	rcall	.+962    	; 0x778 <__mulsf3>
 3b6:	fe d0       	rcall	.+508    	; 0x5b4 <__fixunssfsi>
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <tone2+0x30e>
 3ba:	80 e9       	ldi	r24, 0x90	; 144
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c0:	f1 f7       	brne	.-4      	; 0x3be <tone2+0x306>
 3c2:	61 50       	subi	r22, 0x01	; 1
 3c4:	71 09       	sbc	r23, r1
 3c6:	61 15       	cp	r22, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3c8:	71 05       	cpc	r23, r1
 3ca:	b9 f7       	brne	.-18     	; 0x3ba <tone2+0x302>
 3cc:	23 c0       	rjmp	.+70     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ce:	c7 01       	movw	r24, r14
 3d0:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3d2:	f0 d0       	rcall	.+480    	; 0x5b4 <__fixunssfsi>
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <tone2+0x322>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	cb 01       	movw	r24, r22
 3dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 3de:	f1 f7       	brne	.-4      	; 0x3dc <tone2+0x324>
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	4f e7       	ldi	r20, 0x7F	; 127
 3e8:	53 e4       	ldi	r21, 0x43	; 67
 3ea:	c5 01       	movw	r24, r10
 3ec:	b4 01       	movw	r22, r8
 3ee:	c0 d1       	rcall	.+896    	; 0x770 <__gesf2>
 3f0:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 3f2:	4c f4       	brge	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f4:	6d 81       	ldd	r22, Y+5	; 0x05
 3f6:	7e 81       	ldd	r23, Y+6	; 0x06
 3f8:	8f 81       	ldd	r24, Y+7	; 0x07
 3fa:	98 85       	ldd	r25, Y+8	; 0x08
 3fc:	db d0       	rcall	.+438    	; 0x5b4 <__fixunssfsi>
 3fe:	cb 01       	movw	r24, r22
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	0a c0       	rjmp	.+20     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 406:	c5 01       	movw	r24, r10
 408:	b4 01       	movw	r22, r8
 40a:	d4 d0       	rcall	.+424    	; 0x5b4 <__fixunssfsi>
 40c:	56 2e       	mov	r5, r22
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	55 24       	eor	r5, r5
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 412:	53 94       	inc	r5
 414:	85 2d       	mov	r24, r5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	8d 89       	ldd	r24, Y+21	; 0x15
void tone2(int fr, int duration){
	uint32_t t_tot = HALF_CYC/fr;
	int t_ms = t_tot / 1000;
	int t_us = t_tot % 1000;
	int i;
	for (i = 0; i < duration; i++){
 41c:	9e 89       	ldd	r25, Y+22	; 0x16
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	9e 8b       	std	Y+22, r25	; 0x16
 422:	8d 8b       	std	Y+21, r24	; 0x15
 424:	8d 89       	ldd	r24, Y+21	; 0x15
 426:	9e 89       	ldd	r25, Y+22	; 0x16
 428:	82 15       	cp	r24, r2
 42a:	93 05       	cpc	r25, r3
 42c:	0c f4       	brge	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	76 ce       	rjmp	.-788    	; 0x11c <tone2+0x64>
 430:	66 96       	adiw	r28, 0x16	; 22
		PORTC |= M0;
		_delay_ms(t_ms); _delay_us(t_us);
		PORTC &= ~M0;
		_delay_ms(t_ms); _delay_us(t_us);
	}
}
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	9f 90       	pop	r9
 452:	8f 90       	pop	r8
 454:	7f 90       	pop	r7
 456:	6f 90       	pop	r6
 458:	5f 90       	pop	r5
 45a:	4f 90       	pop	r4
 45c:	3f 90       	pop	r3
 45e:	2f 90       	pop	r2
 460:	08 95       	ret

00000462 <main>:
 462:	cf 93       	push	r28

int main(void)
{
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	60 97       	sbiw	r28, 0x10	; 16
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
	int i;
	int freq[] = {523, 587, 659, 698, 784, 880, 988, 1047};
 476:	80 e1       	ldi	r24, 0x10	; 16
 478:	e0 e0       	ldi	r30, 0x00	; 0
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	de 01       	movw	r26, r28
 47e:	11 96       	adiw	r26, 0x01	; 1
 480:	01 90       	ld	r0, Z+
 482:	0d 92       	st	X+, r0
 484:	8a 95       	dec	r24
 486:	e1 f7       	brne	.-8      	; 0x480 <main+0x1e>
	DDRB = 0x00;	// PORTB의 모든 포트를 입력 모드로
 488:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	88 bb       	out	0x18, r24	; 24
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
 48e:	84 b3       	in	r24, 0x14	; 20
 490:	81 60       	ori	r24, 0x01	; 1
 492:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		if (!(PINB & M0)){
 494:	b0 99       	sbic	0x16, 0	; 22
 496:	fe cf       	rjmp	.-4      	; 0x494 <main+0x32>
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <main+0x6e>
			for (i = 0; i < 8; i++){
				tone2(freq[i], 300);
 49a:	f8 01       	movw	r30, r16
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	8c 0f       	add	r24, r28
 4a6:	9d 1f       	adc	r25, r29
 4a8:	e8 0f       	add	r30, r24
 4aa:	f9 1f       	adc	r31, r25
 4ac:	6c e2       	ldi	r22, 0x2C	; 44
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	80 81       	ld	r24, Z
 4b2:	91 81       	ldd	r25, Z+1	; 0x01
 4b4:	01 de       	rcall	.-1022   	; 0xb8 <tone2>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4b6:	88 e8       	ldi	r24, 0x88	; 136
 4b8:	93 e1       	ldi	r25, 0x13	; 19
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <main+0x64>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4bc:	e0 e9       	ldi	r30, 0x90	; 144
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0x5e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	c9 f7       	brne	.-14     	; 0x4bc <main+0x5a>
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
	DDRC |= M0;		// PORTC의 0번 포트만 출력 모드로
	while (1)
	{
		if (!(PINB & M0)){
			for (i = 0; i < 8; i++){
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <main+0x72>
 4d0:	00 e0       	ldi	r16, 0x00	; 0
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	08 30       	cpi	r16, 0x08	; 8
 4d6:	11 05       	cpc	r17, r1
 4d8:	04 f3       	brlt	.-64     	; 0x49a <main+0x38>
 4da:	dc cf       	rjmp	.-72     	; 0x494 <main+0x32>

000004dc <__cmpsf2>:
 4dc:	d4 d0       	rcall	.+424    	; 0x686 <__fp_cmp>
 4de:	08 f4       	brcc	.+2      	; 0x4e2 <__cmpsf2+0x6>
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret

000004e4 <__divsf3>:
 4e4:	0c d0       	rcall	.+24     	; 0x4fe <__divsf3x>
 4e6:	0a c1       	rjmp	.+532    	; 0x6fc <__fp_round>
 4e8:	02 d1       	rcall	.+516    	; 0x6ee <__fp_pscB>
 4ea:	40 f0       	brcs	.+16     	; 0x4fc <__divsf3+0x18>
 4ec:	f9 d0       	rcall	.+498    	; 0x6e0 <__fp_pscA>
 4ee:	30 f0       	brcs	.+12     	; 0x4fc <__divsf3+0x18>
 4f0:	21 f4       	brne	.+8      	; 0x4fa <__divsf3+0x16>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	19 f0       	breq	.+6      	; 0x4fc <__divsf3+0x18>
 4f6:	eb c0       	rjmp	.+470    	; 0x6ce <__fp_inf>
 4f8:	51 11       	cpse	r21, r1
 4fa:	34 c1       	rjmp	.+616    	; 0x764 <__fp_szero>
 4fc:	ee c0       	rjmp	.+476    	; 0x6da <__fp_nan>

000004fe <__divsf3x>:
 4fe:	0f d1       	rcall	.+542    	; 0x71e <__fp_split3>
 500:	98 f3       	brcs	.-26     	; 0x4e8 <__divsf3+0x4>

00000502 <__divsf3_pse>:
 502:	99 23       	and	r25, r25
 504:	c9 f3       	breq	.-14     	; 0x4f8 <__divsf3+0x14>
 506:	55 23       	and	r21, r21
 508:	b1 f3       	breq	.-20     	; 0x4f6 <__divsf3+0x12>
 50a:	95 1b       	sub	r25, r21
 50c:	55 0b       	sbc	r21, r21
 50e:	bb 27       	eor	r27, r27
 510:	aa 27       	eor	r26, r26
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	38 f0       	brcs	.+14     	; 0x528 <__divsf3_pse+0x26>
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	44 1f       	adc	r20, r20
 524:	aa 1f       	adc	r26, r26
 526:	a9 f3       	breq	.-22     	; 0x512 <__divsf3_pse+0x10>
 528:	33 d0       	rcall	.+102    	; 0x590 <__divsf3_pse+0x8e>
 52a:	0e 2e       	mov	r0, r30
 52c:	3a f0       	brmi	.+14     	; 0x53c <__divsf3_pse+0x3a>
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	30 d0       	rcall	.+96     	; 0x592 <__divsf3_pse+0x90>
 532:	91 50       	subi	r25, 0x01	; 1
 534:	50 40       	sbci	r21, 0x00	; 0
 536:	e6 95       	lsr	r30
 538:	00 1c       	adc	r0, r0
 53a:	ca f7       	brpl	.-14     	; 0x52e <__divsf3_pse+0x2c>
 53c:	29 d0       	rcall	.+82     	; 0x590 <__divsf3_pse+0x8e>
 53e:	fe 2f       	mov	r31, r30
 540:	27 d0       	rcall	.+78     	; 0x590 <__divsf3_pse+0x8e>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	bb 1f       	adc	r27, r27
 54a:	26 17       	cp	r18, r22
 54c:	37 07       	cpc	r19, r23
 54e:	48 07       	cpc	r20, r24
 550:	ab 07       	cpc	r26, r27
 552:	b0 e8       	ldi	r27, 0x80	; 128
 554:	09 f0       	breq	.+2      	; 0x558 <__divsf3_pse+0x56>
 556:	bb 0b       	sbc	r27, r27
 558:	80 2d       	mov	r24, r0
 55a:	bf 01       	movw	r22, r30
 55c:	ff 27       	eor	r31, r31
 55e:	93 58       	subi	r25, 0x83	; 131
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	2a f0       	brmi	.+10     	; 0x56e <__divsf3_pse+0x6c>
 564:	9e 3f       	cpi	r25, 0xFE	; 254
 566:	51 05       	cpc	r21, r1
 568:	68 f0       	brcs	.+26     	; 0x584 <__divsf3_pse+0x82>
 56a:	b1 c0       	rjmp	.+354    	; 0x6ce <__fp_inf>
 56c:	fb c0       	rjmp	.+502    	; 0x764 <__fp_szero>
 56e:	5f 3f       	cpi	r21, 0xFF	; 255
 570:	ec f3       	brlt	.-6      	; 0x56c <__divsf3_pse+0x6a>
 572:	98 3e       	cpi	r25, 0xE8	; 232
 574:	dc f3       	brlt	.-10     	; 0x56c <__divsf3_pse+0x6a>
 576:	86 95       	lsr	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f7 95       	ror	r31
 580:	9f 5f       	subi	r25, 0xFF	; 255
 582:	c9 f7       	brne	.-14     	; 0x576 <__divsf3_pse+0x74>
 584:	88 0f       	add	r24, r24
 586:	91 1d       	adc	r25, r1
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	97 f9       	bld	r25, 7
 58e:	08 95       	ret
 590:	e1 e0       	ldi	r30, 0x01	; 1
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	bb 1f       	adc	r27, r27
 59a:	62 17       	cp	r22, r18
 59c:	73 07       	cpc	r23, r19
 59e:	84 07       	cpc	r24, r20
 5a0:	ba 07       	cpc	r27, r26
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <__divsf3_pse+0xaa>
 5a4:	62 1b       	sub	r22, r18
 5a6:	73 0b       	sbc	r23, r19
 5a8:	84 0b       	sbc	r24, r20
 5aa:	ba 0b       	sbc	r27, r26
 5ac:	ee 1f       	adc	r30, r30
 5ae:	88 f7       	brcc	.-30     	; 0x592 <__divsf3_pse+0x90>
 5b0:	e0 95       	com	r30
 5b2:	08 95       	ret

000005b4 <__fixunssfsi>:
 5b4:	bc d0       	rcall	.+376    	; 0x72e <__fp_splitA>
 5b6:	88 f0       	brcs	.+34     	; 0x5da <__fixunssfsi+0x26>
 5b8:	9f 57       	subi	r25, 0x7F	; 127
 5ba:	90 f0       	brcs	.+36     	; 0x5e0 <__fixunssfsi+0x2c>
 5bc:	b9 2f       	mov	r27, r25
 5be:	99 27       	eor	r25, r25
 5c0:	b7 51       	subi	r27, 0x17	; 23
 5c2:	a0 f0       	brcs	.+40     	; 0x5ec <__fixunssfsi+0x38>
 5c4:	d1 f0       	breq	.+52     	; 0x5fa <__fixunssfsi+0x46>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	1a f0       	brmi	.+6      	; 0x5d6 <__fixunssfsi+0x22>
 5d0:	ba 95       	dec	r27
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__fixunssfsi+0x12>
 5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__fixunssfsi+0x46>
 5d6:	b1 30       	cpi	r27, 0x01	; 1
 5d8:	81 f0       	breq	.+32     	; 0x5fa <__fixunssfsi+0x46>
 5da:	c3 d0       	rcall	.+390    	; 0x762 <__fp_zero>
 5dc:	b1 e0       	ldi	r27, 0x01	; 1
 5de:	08 95       	ret
 5e0:	c0 c0       	rjmp	.+384    	; 0x762 <__fp_zero>
 5e2:	67 2f       	mov	r22, r23
 5e4:	78 2f       	mov	r23, r24
 5e6:	88 27       	eor	r24, r24
 5e8:	b8 5f       	subi	r27, 0xF8	; 248
 5ea:	39 f0       	breq	.+14     	; 0x5fa <__fixunssfsi+0x46>
 5ec:	b9 3f       	cpi	r27, 0xF9	; 249
 5ee:	cc f3       	brlt	.-14     	; 0x5e2 <__fixunssfsi+0x2e>
 5f0:	86 95       	lsr	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b3 95       	inc	r27
 5f8:	d9 f7       	brne	.-10     	; 0x5f0 <__fixunssfsi+0x3c>
 5fa:	3e f4       	brtc	.+14     	; 0x60a <__fixunssfsi+0x56>
 5fc:	90 95       	com	r25
 5fe:	80 95       	com	r24
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__floatunsisf>:
 60c:	e8 94       	clt
 60e:	09 c0       	rjmp	.+18     	; 0x622 <__floatsisf+0x12>

00000610 <__floatsisf>:
 610:	97 fb       	bst	r25, 7
 612:	3e f4       	brtc	.+14     	; 0x622 <__floatsisf+0x12>
 614:	90 95       	com	r25
 616:	80 95       	com	r24
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	99 23       	and	r25, r25
 624:	a9 f0       	breq	.+42     	; 0x650 <__floatsisf+0x40>
 626:	f9 2f       	mov	r31, r25
 628:	96 e9       	ldi	r25, 0x96	; 150
 62a:	bb 27       	eor	r27, r27
 62c:	93 95       	inc	r25
 62e:	f6 95       	lsr	r31
 630:	87 95       	ror	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f1 11       	cpse	r31, r1
 63a:	f8 cf       	rjmp	.-16     	; 0x62c <__floatsisf+0x1c>
 63c:	fa f4       	brpl	.+62     	; 0x67c <__floatsisf+0x6c>
 63e:	bb 0f       	add	r27, r27
 640:	11 f4       	brne	.+4      	; 0x646 <__floatsisf+0x36>
 642:	60 ff       	sbrs	r22, 0
 644:	1b c0       	rjmp	.+54     	; 0x67c <__floatsisf+0x6c>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	16 c0       	rjmp	.+44     	; 0x67c <__floatsisf+0x6c>
 650:	88 23       	and	r24, r24
 652:	11 f0       	breq	.+4      	; 0x658 <__floatsisf+0x48>
 654:	96 e9       	ldi	r25, 0x96	; 150
 656:	11 c0       	rjmp	.+34     	; 0x67a <__floatsisf+0x6a>
 658:	77 23       	and	r23, r23
 65a:	21 f0       	breq	.+8      	; 0x664 <__floatsisf+0x54>
 65c:	9e e8       	ldi	r25, 0x8E	; 142
 65e:	87 2f       	mov	r24, r23
 660:	76 2f       	mov	r23, r22
 662:	05 c0       	rjmp	.+10     	; 0x66e <__floatsisf+0x5e>
 664:	66 23       	and	r22, r22
 666:	71 f0       	breq	.+28     	; 0x684 <__floatsisf+0x74>
 668:	96 e8       	ldi	r25, 0x86	; 134
 66a:	86 2f       	mov	r24, r22
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	2a f0       	brmi	.+10     	; 0x67c <__floatsisf+0x6c>
 672:	9a 95       	dec	r25
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	da f7       	brpl	.-10     	; 0x672 <__floatsisf+0x62>
 67c:	88 0f       	add	r24, r24
 67e:	96 95       	lsr	r25
 680:	87 95       	ror	r24
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__fp_cmp>:
 686:	99 0f       	add	r25, r25
 688:	00 08       	sbc	r0, r0
 68a:	55 0f       	add	r21, r21
 68c:	aa 0b       	sbc	r26, r26
 68e:	e0 e8       	ldi	r30, 0x80	; 128
 690:	fe ef       	ldi	r31, 0xFE	; 254
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	e8 07       	cpc	r30, r24
 698:	f9 07       	cpc	r31, r25
 69a:	c0 f0       	brcs	.+48     	; 0x6cc <__fp_cmp+0x46>
 69c:	12 16       	cp	r1, r18
 69e:	13 06       	cpc	r1, r19
 6a0:	e4 07       	cpc	r30, r20
 6a2:	f5 07       	cpc	r31, r21
 6a4:	98 f0       	brcs	.+38     	; 0x6cc <__fp_cmp+0x46>
 6a6:	62 1b       	sub	r22, r18
 6a8:	73 0b       	sbc	r23, r19
 6aa:	84 0b       	sbc	r24, r20
 6ac:	95 0b       	sbc	r25, r21
 6ae:	39 f4       	brne	.+14     	; 0x6be <__fp_cmp+0x38>
 6b0:	0a 26       	eor	r0, r26
 6b2:	61 f0       	breq	.+24     	; 0x6cc <__fp_cmp+0x46>
 6b4:	23 2b       	or	r18, r19
 6b6:	24 2b       	or	r18, r20
 6b8:	25 2b       	or	r18, r21
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <__fp_cmp+0x3e>
 6bc:	08 95       	ret
 6be:	0a 26       	eor	r0, r26
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <__fp_cmp+0x3e>
 6c2:	a1 40       	sbci	r26, 0x01	; 1
 6c4:	a6 95       	lsr	r26
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	81 1d       	adc	r24, r1
 6ca:	81 1d       	adc	r24, r1
 6cc:	08 95       	ret

000006ce <__fp_inf>:
 6ce:	97 f9       	bld	r25, 7
 6d0:	9f 67       	ori	r25, 0x7F	; 127
 6d2:	80 e8       	ldi	r24, 0x80	; 128
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	08 95       	ret

000006da <__fp_nan>:
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	80 ec       	ldi	r24, 0xC0	; 192
 6de:	08 95       	ret

000006e0 <__fp_pscA>:
 6e0:	00 24       	eor	r0, r0
 6e2:	0a 94       	dec	r0
 6e4:	16 16       	cp	r1, r22
 6e6:	17 06       	cpc	r1, r23
 6e8:	18 06       	cpc	r1, r24
 6ea:	09 06       	cpc	r0, r25
 6ec:	08 95       	ret

000006ee <__fp_pscB>:
 6ee:	00 24       	eor	r0, r0
 6f0:	0a 94       	dec	r0
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	05 06       	cpc	r0, r21
 6fa:	08 95       	ret

000006fc <__fp_round>:
 6fc:	09 2e       	mov	r0, r25
 6fe:	03 94       	inc	r0
 700:	00 0c       	add	r0, r0
 702:	11 f4       	brne	.+4      	; 0x708 <__fp_round+0xc>
 704:	88 23       	and	r24, r24
 706:	52 f0       	brmi	.+20     	; 0x71c <__fp_round+0x20>
 708:	bb 0f       	add	r27, r27
 70a:	40 f4       	brcc	.+16     	; 0x71c <__fp_round+0x20>
 70c:	bf 2b       	or	r27, r31
 70e:	11 f4       	brne	.+4      	; 0x714 <__fp_round+0x18>
 710:	60 ff       	sbrs	r22, 0
 712:	04 c0       	rjmp	.+8      	; 0x71c <__fp_round+0x20>
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__fp_split3>:
 71e:	57 fd       	sbrc	r21, 7
 720:	90 58       	subi	r25, 0x80	; 128
 722:	44 0f       	add	r20, r20
 724:	55 1f       	adc	r21, r21
 726:	59 f0       	breq	.+22     	; 0x73e <__fp_splitA+0x10>
 728:	5f 3f       	cpi	r21, 0xFF	; 255
 72a:	71 f0       	breq	.+28     	; 0x748 <__fp_splitA+0x1a>
 72c:	47 95       	ror	r20

0000072e <__fp_splitA>:
 72e:	88 0f       	add	r24, r24
 730:	97 fb       	bst	r25, 7
 732:	99 1f       	adc	r25, r25
 734:	61 f0       	breq	.+24     	; 0x74e <__fp_splitA+0x20>
 736:	9f 3f       	cpi	r25, 0xFF	; 255
 738:	79 f0       	breq	.+30     	; 0x758 <__fp_splitA+0x2a>
 73a:	87 95       	ror	r24
 73c:	08 95       	ret
 73e:	12 16       	cp	r1, r18
 740:	13 06       	cpc	r1, r19
 742:	14 06       	cpc	r1, r20
 744:	55 1f       	adc	r21, r21
 746:	f2 cf       	rjmp	.-28     	; 0x72c <__fp_split3+0xe>
 748:	46 95       	lsr	r20
 74a:	f1 df       	rcall	.-30     	; 0x72e <__fp_splitA>
 74c:	08 c0       	rjmp	.+16     	; 0x75e <__fp_splitA+0x30>
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	18 06       	cpc	r1, r24
 754:	99 1f       	adc	r25, r25
 756:	f1 cf       	rjmp	.-30     	; 0x73a <__fp_splitA+0xc>
 758:	86 95       	lsr	r24
 75a:	71 05       	cpc	r23, r1
 75c:	61 05       	cpc	r22, r1
 75e:	08 94       	sec
 760:	08 95       	ret

00000762 <__fp_zero>:
 762:	e8 94       	clt

00000764 <__fp_szero>:
 764:	bb 27       	eor	r27, r27
 766:	66 27       	eor	r22, r22
 768:	77 27       	eor	r23, r23
 76a:	cb 01       	movw	r24, r22
 76c:	97 f9       	bld	r25, 7
 76e:	08 95       	ret

00000770 <__gesf2>:
 770:	8a df       	rcall	.-236    	; 0x686 <__fp_cmp>
 772:	08 f4       	brcc	.+2      	; 0x776 <__gesf2+0x6>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	08 95       	ret

00000778 <__mulsf3>:
 778:	0b d0       	rcall	.+22     	; 0x790 <__mulsf3x>
 77a:	c0 cf       	rjmp	.-128    	; 0x6fc <__fp_round>
 77c:	b1 df       	rcall	.-158    	; 0x6e0 <__fp_pscA>
 77e:	28 f0       	brcs	.+10     	; 0x78a <__mulsf3+0x12>
 780:	b6 df       	rcall	.-148    	; 0x6ee <__fp_pscB>
 782:	18 f0       	brcs	.+6      	; 0x78a <__mulsf3+0x12>
 784:	95 23       	and	r25, r21
 786:	09 f0       	breq	.+2      	; 0x78a <__mulsf3+0x12>
 788:	a2 cf       	rjmp	.-188    	; 0x6ce <__fp_inf>
 78a:	a7 cf       	rjmp	.-178    	; 0x6da <__fp_nan>
 78c:	11 24       	eor	r1, r1
 78e:	ea cf       	rjmp	.-44     	; 0x764 <__fp_szero>

00000790 <__mulsf3x>:
 790:	c6 df       	rcall	.-116    	; 0x71e <__fp_split3>
 792:	a0 f3       	brcs	.-24     	; 0x77c <__mulsf3+0x4>

00000794 <__mulsf3_pse>:
 794:	95 9f       	mul	r25, r21
 796:	d1 f3       	breq	.-12     	; 0x78c <__mulsf3+0x14>
 798:	95 0f       	add	r25, r21
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	55 1f       	adc	r21, r21
 79e:	62 9f       	mul	r22, r18
 7a0:	f0 01       	movw	r30, r0
 7a2:	72 9f       	mul	r23, r18
 7a4:	bb 27       	eor	r27, r27
 7a6:	f0 0d       	add	r31, r0
 7a8:	b1 1d       	adc	r27, r1
 7aa:	63 9f       	mul	r22, r19
 7ac:	aa 27       	eor	r26, r26
 7ae:	f0 0d       	add	r31, r0
 7b0:	b1 1d       	adc	r27, r1
 7b2:	aa 1f       	adc	r26, r26
 7b4:	64 9f       	mul	r22, r20
 7b6:	66 27       	eor	r22, r22
 7b8:	b0 0d       	add	r27, r0
 7ba:	a1 1d       	adc	r26, r1
 7bc:	66 1f       	adc	r22, r22
 7be:	82 9f       	mul	r24, r18
 7c0:	22 27       	eor	r18, r18
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	62 1f       	adc	r22, r18
 7c8:	73 9f       	mul	r23, r19
 7ca:	b0 0d       	add	r27, r0
 7cc:	a1 1d       	adc	r26, r1
 7ce:	62 1f       	adc	r22, r18
 7d0:	83 9f       	mul	r24, r19
 7d2:	a0 0d       	add	r26, r0
 7d4:	61 1d       	adc	r22, r1
 7d6:	22 1f       	adc	r18, r18
 7d8:	74 9f       	mul	r23, r20
 7da:	33 27       	eor	r19, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	23 1f       	adc	r18, r19
 7e2:	84 9f       	mul	r24, r20
 7e4:	60 0d       	add	r22, r0
 7e6:	21 1d       	adc	r18, r1
 7e8:	82 2f       	mov	r24, r18
 7ea:	76 2f       	mov	r23, r22
 7ec:	6a 2f       	mov	r22, r26
 7ee:	11 24       	eor	r1, r1
 7f0:	9f 57       	subi	r25, 0x7F	; 127
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	8a f0       	brmi	.+34     	; 0x818 <__mulsf3_pse+0x84>
 7f6:	e1 f0       	breq	.+56     	; 0x830 <__mulsf3_pse+0x9c>
 7f8:	88 23       	and	r24, r24
 7fa:	4a f0       	brmi	.+18     	; 0x80e <__mulsf3_pse+0x7a>
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	bb 1f       	adc	r27, r27
 802:	66 1f       	adc	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	91 50       	subi	r25, 0x01	; 1
 80a:	50 40       	sbci	r21, 0x00	; 0
 80c:	a9 f7       	brne	.-22     	; 0x7f8 <__mulsf3_pse+0x64>
 80e:	9e 3f       	cpi	r25, 0xFE	; 254
 810:	51 05       	cpc	r21, r1
 812:	70 f0       	brcs	.+28     	; 0x830 <__mulsf3_pse+0x9c>
 814:	5c cf       	rjmp	.-328    	; 0x6ce <__fp_inf>
 816:	a6 cf       	rjmp	.-180    	; 0x764 <__fp_szero>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	ec f3       	brlt	.-6      	; 0x816 <__mulsf3_pse+0x82>
 81c:	98 3e       	cpi	r25, 0xE8	; 232
 81e:	dc f3       	brlt	.-10     	; 0x816 <__mulsf3_pse+0x82>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f7 95       	ror	r31
 82a:	e7 95       	ror	r30
 82c:	9f 5f       	subi	r25, 0xFF	; 255
 82e:	c1 f7       	brne	.-16     	; 0x820 <__mulsf3_pse+0x8c>
 830:	fe 2b       	or	r31, r30
 832:	88 0f       	add	r24, r24
 834:	91 1d       	adc	r25, r1
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__udivmodsi4>:
 83e:	a1 e2       	ldi	r26, 0x21	; 33
 840:	1a 2e       	mov	r1, r26
 842:	aa 1b       	sub	r26, r26
 844:	bb 1b       	sub	r27, r27
 846:	fd 01       	movw	r30, r26
 848:	0d c0       	rjmp	.+26     	; 0x864 <__udivmodsi4_ep>

0000084a <__udivmodsi4_loop>:
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	ee 1f       	adc	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	a2 17       	cp	r26, r18
 854:	b3 07       	cpc	r27, r19
 856:	e4 07       	cpc	r30, r20
 858:	f5 07       	cpc	r31, r21
 85a:	20 f0       	brcs	.+8      	; 0x864 <__udivmodsi4_ep>
 85c:	a2 1b       	sub	r26, r18
 85e:	b3 0b       	sbc	r27, r19
 860:	e4 0b       	sbc	r30, r20
 862:	f5 0b       	sbc	r31, r21

00000864 <__udivmodsi4_ep>:
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a 94       	dec	r1
 86e:	69 f7       	brne	.-38     	; 0x84a <__udivmodsi4_loop>
 870:	60 95       	com	r22
 872:	70 95       	com	r23
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	bd 01       	movw	r22, r26
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret

00000882 <_exit>:
 882:	f8 94       	cli

00000884 <__stop_program>:
 884:	ff cf       	rjmp	.-2      	; 0x884 <__stop_program>
