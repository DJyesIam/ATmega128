
tone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b62  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087c  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000449  00000000  00000000  00001bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041d  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d7  00000000  00000000  000024dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4e d1       	rcall	.+668    	; 0x336 <main>
  9a:	40 c3       	rjmp	.+1664   	; 0x71c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <tone>:
#define F_CPU 16000000UL
#define __DELAY_BACKWARD_COMPATIBLE__
#include <util/delay.h>
#define M0 1<<0

void tone(int fr, int duration){
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	6f 92       	push	r6
  a4:	7f 92       	push	r7
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	2e 97       	sbiw	r28, 0x0e	; 14
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	9c 01       	movw	r18, r24
  d0:	3b 01       	movw	r6, r22
	int tms = 500/fr, i;
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	b9 01       	movw	r22, r18
  d8:	fa d2       	rcall	.+1524   	; 0x6ce <__divmodhi4>
  da:	1b 01       	movw	r2, r22
	for (i = 0; i<duration; i++){
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9e 87       	std	Y+14, r25	; 0x0e
  e2:	8d 87       	std	Y+13, r24	; 0x0d
  e4:	0b c1       	rjmp	.+534    	; 0x2fc <tone+0x25e>
		PORTC |= M0;
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	85 bb       	out	0x15, r24	; 21
		_delay_us(tms);
  ec:	b1 01       	movw	r22, r2
  ee:	03 2c       	mov	r0, r3
  f0:	00 0c       	add	r0, r0
  f2:	88 0b       	sbc	r24, r24
  f4:	99 0b       	sbc	r25, r25
  f6:	d4 d1       	rcall	.+936    	; 0x4a0 <__floatsisf>
  f8:	4b 01       	movw	r8, r22
  fa:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
  fc:	2b ea       	ldi	r18, 0xAB	; 171
  fe:	3a ea       	ldi	r19, 0xAA	; 170
 100:	4a ea       	ldi	r20, 0xAA	; 170
 102:	50 e4       	ldi	r21, 0x40	; 64
 104:	81 d2       	rcall	.+1282   	; 0x608 <__mulsf3>
 106:	6b 01       	movw	r12, r22
 108:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	50 e4       	ldi	r21, 0x40	; 64
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	78 d2       	rcall	.+1264   	; 0x608 <__mulsf3>
 118:	69 83       	std	Y+1, r22	; 0x01
 11a:	7a 83       	std	Y+2, r23	; 0x02
 11c:	8b 83       	std	Y+3, r24	; 0x03
 11e:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e8       	ldi	r20, 0x80	; 128
 126:	5f e3       	ldi	r21, 0x3F	; 63
 128:	c7 01       	movw	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	1f d1       	rcall	.+574    	; 0x36c <__cmpsf2>
 12e:	88 23       	and	r24, r24
 130:	0c f4       	brge	.+2      	; 0x134 <tone+0x96>
 132:	6a c0       	rjmp	.+212    	; 0x208 <tone+0x16a>
		__ticks = 1;
	else if (__tmp2 > 65535)
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	4f e7       	ldi	r20, 0x7F	; 127
 13a:	57 e4       	ldi	r21, 0x47	; 71
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	7a 81       	ldd	r23, Y+2	; 0x02
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	9c 81       	ldd	r25, Y+4	; 0x04
 144:	5d d2       	rcall	.+1210   	; 0x600 <__gesf2>
 146:	18 16       	cp	r1, r24
 148:	0c f0       	brlt	.+2      	; 0x14c <tone+0xae>
 14a:	47 c0       	rjmp	.+142    	; 0x1da <tone+0x13c>
	{
		_delay_ms(__us / 1000.0);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4a e7       	ldi	r20, 0x7A	; 122
 152:	54 e4       	ldi	r21, 0x44	; 68
 154:	c5 01       	movw	r24, r10
 156:	b4 01       	movw	r22, r8
 158:	0d d1       	rcall	.+538    	; 0x374 <__divsf3>
 15a:	69 87       	std	Y+9, r22	; 0x09
 15c:	7a 87       	std	Y+10, r23	; 0x0a
 15e:	8b 87       	std	Y+11, r24	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 160:	9c 87       	std	Y+12, r25	; 0x0c
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	4a e7       	ldi	r20, 0x7A	; 122
 168:	55 e4       	ldi	r21, 0x45	; 69
 16a:	4e d2       	rcall	.+1180   	; 0x608 <__mulsf3>
 16c:	6d 83       	std	Y+5, r22	; 0x05
 16e:	7e 83       	std	Y+6, r23	; 0x06
 170:	8f 83       	std	Y+7, r24	; 0x07
	if (__tmp < 1.0)
 172:	98 87       	std	Y+8, r25	; 0x08
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	5f e3       	ldi	r21, 0x3F	; 63
 17c:	f7 d0       	rcall	.+494    	; 0x36c <__cmpsf2>
 17e:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 180:	34 f1       	brlt	.+76     	; 0x1ce <tone+0x130>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	3f ef       	ldi	r19, 0xFF	; 255
 186:	4f e7       	ldi	r20, 0x7F	; 127
 188:	57 e4       	ldi	r21, 0x47	; 71
 18a:	6d 81       	ldd	r22, Y+5	; 0x05
 18c:	7e 81       	ldd	r23, Y+6	; 0x06
 18e:	8f 81       	ldd	r24, Y+7	; 0x07
 190:	98 85       	ldd	r25, Y+8	; 0x08
 192:	36 d2       	rcall	.+1132   	; 0x600 <__gesf2>
 194:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 196:	ac f4       	brge	.+42     	; 0x1c2 <tone+0x124>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 e2       	ldi	r20, 0x20	; 32
 19e:	51 e4       	ldi	r21, 0x41	; 65
 1a0:	69 85       	ldd	r22, Y+9	; 0x09
 1a2:	7a 85       	ldd	r23, Y+10	; 0x0a
 1a4:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a6:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a8:	2f d2       	rcall	.+1118   	; 0x608 <__mulsf3>
 1aa:	4c d1       	rcall	.+664    	; 0x444 <__fixunssfsi>
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <tone+0x11c>
 1ae:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <tone+0x114>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	61 50       	subi	r22, 0x01	; 1
 1b8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ba:	61 15       	cp	r22, r1
 1bc:	71 05       	cpc	r23, r1
 1be:	b9 f7       	brne	.-18     	; 0x1ae <tone+0x110>
 1c0:	24 c0       	rjmp	.+72     	; 0x20a <tone+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c2:	6d 81       	ldd	r22, Y+5	; 0x05
 1c4:	7e 81       	ldd	r23, Y+6	; 0x06
 1c6:	8f 81       	ldd	r24, Y+7	; 0x07
 1c8:	98 85       	ldd	r25, Y+8	; 0x08
 1ca:	3c d1       	rcall	.+632    	; 0x444 <__fixunssfsi>
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <tone+0x134>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	cb 01       	movw	r24, r22
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <tone+0x136>
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <tone+0x16c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	4f e7       	ldi	r20, 0x7F	; 127
 1e0:	53 e4       	ldi	r21, 0x43	; 67
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	0c d2       	rcall	.+1048   	; 0x600 <__gesf2>
 1e8:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 1ea:	4c f4       	brge	.+18     	; 0x1fe <tone+0x160>
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	7a 81       	ldd	r23, Y+2	; 0x02
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	27 d1       	rcall	.+590    	; 0x444 <__fixunssfsi>
 1f6:	cb 01       	movw	r24, r22
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <tone+0x15a>
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <tone+0x172>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 1fe:	c7 01       	movw	r24, r14
 200:	b6 01       	movw	r22, r12
 202:	20 d1       	rcall	.+576    	; 0x444 <__fixunssfsi>
 204:	16 2f       	mov	r17, r22
 206:	01 c0       	rjmp	.+2      	; 0x20a <tone+0x16c>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 208:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 20a:	81 2f       	mov	r24, r17
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <tone+0x16e>
		PORTC &= ~M0;
 210:	85 b3       	in	r24, 0x15	; 21
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	85 bb       	out	0x15, r24	; 21
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e8       	ldi	r20, 0x80	; 128
 21c:	5f e3       	ldi	r21, 0x3F	; 63
 21e:	c7 01       	movw	r24, r14
 220:	b6 01       	movw	r22, r12
 222:	a4 d0       	rcall	.+328    	; 0x36c <__cmpsf2>
 224:	88 23       	and	r24, r24
 226:	0c f4       	brge	.+2      	; 0x22a <tone+0x18c>
 228:	60 c0       	rjmp	.+192    	; 0x2ea <tone+0x24c>
		__ticks = 1;
	else if (__tmp2 > 65535)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	3f ef       	ldi	r19, 0xFF	; 255
 22e:	4f e7       	ldi	r20, 0x7F	; 127
 230:	57 e4       	ldi	r21, 0x47	; 71
 232:	69 81       	ldd	r22, Y+1	; 0x01
 234:	7a 81       	ldd	r23, Y+2	; 0x02
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	9c 81       	ldd	r25, Y+4	; 0x04
 23a:	e2 d1       	rcall	.+964    	; 0x600 <__gesf2>
 23c:	18 16       	cp	r1, r24
 23e:	0c f0       	brlt	.+2      	; 0x242 <tone+0x1a4>
	{
		_delay_ms(__us / 1000.0);
 240:	3d c0       	rjmp	.+122    	; 0x2bc <tone+0x21e>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	4a e7       	ldi	r20, 0x7A	; 122
 248:	54 e4       	ldi	r21, 0x44	; 68
 24a:	c5 01       	movw	r24, r10
 24c:	b4 01       	movw	r22, r8
 24e:	92 d0       	rcall	.+292    	; 0x374 <__divsf3>
 250:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 252:	5c 01       	movw	r10, r24
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a e7       	ldi	r20, 0x7A	; 122
 25a:	55 e4       	ldi	r21, 0x45	; 69
 25c:	d5 d1       	rcall	.+938    	; 0x608 <__mulsf3>
 25e:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 260:	7c 01       	movw	r14, r24
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e8       	ldi	r20, 0x80	; 128
 268:	5f e3       	ldi	r21, 0x3F	; 63
 26a:	80 d0       	rcall	.+256    	; 0x36c <__cmpsf2>
		__ticks = 1;
	else if (__tmp > 65535)
 26c:	88 23       	and	r24, r24
 26e:	04 f1       	brlt	.+64     	; 0x2b0 <tone+0x212>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	3f ef       	ldi	r19, 0xFF	; 255
 274:	4f e7       	ldi	r20, 0x7F	; 127
 276:	57 e4       	ldi	r21, 0x47	; 71
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	c1 d1       	rcall	.+898    	; 0x600 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 27e:	18 16       	cp	r1, r24
 280:	9c f4       	brge	.+38     	; 0x2a8 <tone+0x20a>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e2       	ldi	r20, 0x20	; 32
 288:	51 e4       	ldi	r21, 0x41	; 65
 28a:	c5 01       	movw	r24, r10
 28c:	b4 01       	movw	r22, r8
 28e:	bc d1       	rcall	.+888    	; 0x608 <__mulsf3>
 290:	d9 d0       	rcall	.+434    	; 0x444 <__fixunssfsi>
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <tone+0x202>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 294:	80 e9       	ldi	r24, 0x90	; 144
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	f1 f7       	brne	.-4      	; 0x298 <tone+0x1fa>
 29c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	71 09       	sbc	r23, r1
 2a0:	61 15       	cp	r22, r1
 2a2:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a4:	b9 f7       	brne	.-18     	; 0x294 <tone+0x1f6>
 2a6:	22 c0       	rjmp	.+68     	; 0x2ec <tone+0x24e>
 2a8:	c7 01       	movw	r24, r14
 2aa:	b6 01       	movw	r22, r12
 2ac:	cb d0       	rcall	.+406    	; 0x444 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <tone+0x216>
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	cb 01       	movw	r24, r22
 2b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <tone+0x218>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <tone+0x24e>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	4f e7       	ldi	r20, 0x7F	; 127
 2c2:	53 e4       	ldi	r21, 0x43	; 67
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	9b d1       	rcall	.+822    	; 0x600 <__gesf2>
 2ca:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 2cc:	4c f4       	brge	.+18     	; 0x2e0 <tone+0x242>
 2ce:	69 81       	ldd	r22, Y+1	; 0x01
 2d0:	7a 81       	ldd	r23, Y+2	; 0x02
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	b6 d0       	rcall	.+364    	; 0x444 <__fixunssfsi>
 2d8:	cb 01       	movw	r24, r22
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <tone+0x23c>
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <tone+0x254>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2e0:	c7 01       	movw	r24, r14
 2e2:	b6 01       	movw	r22, r12
 2e4:	af d0       	rcall	.+350    	; 0x444 <__fixunssfsi>
 2e6:	06 2f       	mov	r16, r22
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <tone+0x24e>
 2ea:	01 e0       	ldi	r16, 0x01	; 1
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 2ec:	80 2f       	mov	r24, r16
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <tone+0x250>
 2f2:	8d 85       	ldd	r24, Y+13	; 0x0d
#include <util/delay.h>
#define M0 1<<0

void tone(int fr, int duration){
	int tms = 500/fr, i;
	for (i = 0; i<duration; i++){
 2f4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	9e 87       	std	Y+14, r25	; 0x0e
 2fa:	8d 87       	std	Y+13, r24	; 0x0d
 2fc:	8d 85       	ldd	r24, Y+13	; 0x0d
 2fe:	9e 85       	ldd	r25, Y+14	; 0x0e
 300:	86 15       	cp	r24, r6
 302:	97 05       	cpc	r25, r7
 304:	0c f4       	brge	.+2      	; 0x308 <tone+0x26a>
 306:	ef ce       	rjmp	.-546    	; 0xe6 <tone+0x48>
 308:	2e 96       	adiw	r28, 0x0e	; 14
		PORTC |= M0;
		_delay_us(tms);
		PORTC &= ~M0;
		_delay_us(tms);
	}
}
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	bf 90       	pop	r11
 326:	af 90       	pop	r10
 328:	9f 90       	pop	r9
 32a:	8f 90       	pop	r8
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	3f 90       	pop	r3
 332:	2f 90       	pop	r2
 334:	08 95       	ret

00000336 <main>:
 336:	17 ba       	out	0x17, r1	; 23

int main(void)
{
	int i;
	DDRB = 0x00;	// PORTB의 모든 포트를 입력 모드로
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	88 bb       	out	0x18, r24	; 24
	DDRC |= M0;	// PORTC의 0번 포트만 출력 모드로
 33c:	84 b3       	in	r24, 0x14	; 20
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	84 bb       	out	0x14, r24	; 20
	while (1) 
	{
		if (!(PINB & M0)){
 342:	b0 99       	sbic	0x16, 0	; 22
 344:	fe cf       	rjmp	.-4      	; 0x342 <main+0xc>
 346:	0c c0       	rjmp	.+24     	; 0x360 <main+0x2a>
			for (i = 0; i < 20; i++){
				tone(320,8);
 348:	68 e0       	ldi	r22, 0x08	; 8
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e4       	ldi	r24, 0x40	; 64
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	a6 de       	rcall	.-692    	; 0x9e <tone>
				tone(480,12);
 352:	6c e0       	ldi	r22, 0x0C	; 12
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 ee       	ldi	r24, 0xE0	; 224
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	a1 de       	rcall	.-702    	; 0x9e <tone>
	PORTB = 0x01;	// PORTB의 0번 포트만 출력 HIGH(내부 풀업 저항 사용)
	DDRC |= M0;	// PORTC의 0번 포트만 출력 모드로
	while (1) 
	{
		if (!(PINB & M0)){
			for (i = 0; i < 20; i++){
 35c:	21 96       	adiw	r28, 0x01	; 1
 35e:	02 c0       	rjmp	.+4      	; 0x364 <main+0x2e>
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	c4 31       	cpi	r28, 0x14	; 20
 366:	d1 05       	cpc	r29, r1
 368:	7c f3       	brlt	.-34     	; 0x348 <main+0x12>
 36a:	eb cf       	rjmp	.-42     	; 0x342 <main+0xc>

0000036c <__cmpsf2>:
 36c:	d4 d0       	rcall	.+424    	; 0x516 <__fp_cmp>
 36e:	08 f4       	brcc	.+2      	; 0x372 <__cmpsf2+0x6>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret

00000374 <__divsf3>:
 374:	0c d0       	rcall	.+24     	; 0x38e <__divsf3x>
 376:	0a c1       	rjmp	.+532    	; 0x58c <__fp_round>
 378:	02 d1       	rcall	.+516    	; 0x57e <__fp_pscB>
 37a:	40 f0       	brcs	.+16     	; 0x38c <__divsf3+0x18>
 37c:	f9 d0       	rcall	.+498    	; 0x570 <__fp_pscA>
 37e:	30 f0       	brcs	.+12     	; 0x38c <__divsf3+0x18>
 380:	21 f4       	brne	.+8      	; 0x38a <__divsf3+0x16>
 382:	5f 3f       	cpi	r21, 0xFF	; 255
 384:	19 f0       	breq	.+6      	; 0x38c <__divsf3+0x18>
 386:	eb c0       	rjmp	.+470    	; 0x55e <__fp_inf>
 388:	51 11       	cpse	r21, r1
 38a:	34 c1       	rjmp	.+616    	; 0x5f4 <__fp_szero>
 38c:	ee c0       	rjmp	.+476    	; 0x56a <__fp_nan>

0000038e <__divsf3x>:
 38e:	0f d1       	rcall	.+542    	; 0x5ae <__fp_split3>
 390:	98 f3       	brcs	.-26     	; 0x378 <__divsf3+0x4>

00000392 <__divsf3_pse>:
 392:	99 23       	and	r25, r25
 394:	c9 f3       	breq	.-14     	; 0x388 <__divsf3+0x14>
 396:	55 23       	and	r21, r21
 398:	b1 f3       	breq	.-20     	; 0x386 <__divsf3+0x12>
 39a:	95 1b       	sub	r25, r21
 39c:	55 0b       	sbc	r21, r21
 39e:	bb 27       	eor	r27, r27
 3a0:	aa 27       	eor	r26, r26
 3a2:	62 17       	cp	r22, r18
 3a4:	73 07       	cpc	r23, r19
 3a6:	84 07       	cpc	r24, r20
 3a8:	38 f0       	brcs	.+14     	; 0x3b8 <__divsf3_pse+0x26>
 3aa:	9f 5f       	subi	r25, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	44 1f       	adc	r20, r20
 3b4:	aa 1f       	adc	r26, r26
 3b6:	a9 f3       	breq	.-22     	; 0x3a2 <__divsf3_pse+0x10>
 3b8:	33 d0       	rcall	.+102    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ba:	0e 2e       	mov	r0, r30
 3bc:	3a f0       	brmi	.+14     	; 0x3cc <__divsf3_pse+0x3a>
 3be:	e0 e8       	ldi	r30, 0x80	; 128
 3c0:	30 d0       	rcall	.+96     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	e6 95       	lsr	r30
 3c8:	00 1c       	adc	r0, r0
 3ca:	ca f7       	brpl	.-14     	; 0x3be <__divsf3_pse+0x2c>
 3cc:	29 d0       	rcall	.+82     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ce:	fe 2f       	mov	r31, r30
 3d0:	27 d0       	rcall	.+78     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	bb 1f       	adc	r27, r27
 3da:	26 17       	cp	r18, r22
 3dc:	37 07       	cpc	r19, r23
 3de:	48 07       	cpc	r20, r24
 3e0:	ab 07       	cpc	r26, r27
 3e2:	b0 e8       	ldi	r27, 0x80	; 128
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__divsf3_pse+0x56>
 3e6:	bb 0b       	sbc	r27, r27
 3e8:	80 2d       	mov	r24, r0
 3ea:	bf 01       	movw	r22, r30
 3ec:	ff 27       	eor	r31, r31
 3ee:	93 58       	subi	r25, 0x83	; 131
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	2a f0       	brmi	.+10     	; 0x3fe <__divsf3_pse+0x6c>
 3f4:	9e 3f       	cpi	r25, 0xFE	; 254
 3f6:	51 05       	cpc	r21, r1
 3f8:	68 f0       	brcs	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3fa:	b1 c0       	rjmp	.+354    	; 0x55e <__fp_inf>
 3fc:	fb c0       	rjmp	.+502    	; 0x5f4 <__fp_szero>
 3fe:	5f 3f       	cpi	r21, 0xFF	; 255
 400:	ec f3       	brlt	.-6      	; 0x3fc <__divsf3_pse+0x6a>
 402:	98 3e       	cpi	r25, 0xE8	; 232
 404:	dc f3       	brlt	.-10     	; 0x3fc <__divsf3_pse+0x6a>
 406:	86 95       	lsr	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b7 95       	ror	r27
 40e:	f7 95       	ror	r31
 410:	9f 5f       	subi	r25, 0xFF	; 255
 412:	c9 f7       	brne	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	88 0f       	add	r24, r24
 416:	91 1d       	adc	r25, r1
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	97 f9       	bld	r25, 7
 41e:	08 95       	ret
 420:	e1 e0       	ldi	r30, 0x01	; 1
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	bb 1f       	adc	r27, r27
 42a:	62 17       	cp	r22, r18
 42c:	73 07       	cpc	r23, r19
 42e:	84 07       	cpc	r24, r20
 430:	ba 07       	cpc	r27, r26
 432:	20 f0       	brcs	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	62 1b       	sub	r22, r18
 436:	73 0b       	sbc	r23, r19
 438:	84 0b       	sbc	r24, r20
 43a:	ba 0b       	sbc	r27, r26
 43c:	ee 1f       	adc	r30, r30
 43e:	88 f7       	brcc	.-30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 440:	e0 95       	com	r30
 442:	08 95       	ret

00000444 <__fixunssfsi>:
 444:	bc d0       	rcall	.+376    	; 0x5be <__fp_splitA>
 446:	88 f0       	brcs	.+34     	; 0x46a <__fixunssfsi+0x26>
 448:	9f 57       	subi	r25, 0x7F	; 127
 44a:	90 f0       	brcs	.+36     	; 0x470 <__fixunssfsi+0x2c>
 44c:	b9 2f       	mov	r27, r25
 44e:	99 27       	eor	r25, r25
 450:	b7 51       	subi	r27, 0x17	; 23
 452:	a0 f0       	brcs	.+40     	; 0x47c <__fixunssfsi+0x38>
 454:	d1 f0       	breq	.+52     	; 0x48a <__fixunssfsi+0x46>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	1a f0       	brmi	.+6      	; 0x466 <__fixunssfsi+0x22>
 460:	ba 95       	dec	r27
 462:	c9 f7       	brne	.-14     	; 0x456 <__fixunssfsi+0x12>
 464:	12 c0       	rjmp	.+36     	; 0x48a <__fixunssfsi+0x46>
 466:	b1 30       	cpi	r27, 0x01	; 1
 468:	81 f0       	breq	.+32     	; 0x48a <__fixunssfsi+0x46>
 46a:	c3 d0       	rcall	.+390    	; 0x5f2 <__fp_zero>
 46c:	b1 e0       	ldi	r27, 0x01	; 1
 46e:	08 95       	ret
 470:	c0 c0       	rjmp	.+384    	; 0x5f2 <__fp_zero>
 472:	67 2f       	mov	r22, r23
 474:	78 2f       	mov	r23, r24
 476:	88 27       	eor	r24, r24
 478:	b8 5f       	subi	r27, 0xF8	; 248
 47a:	39 f0       	breq	.+14     	; 0x48a <__fixunssfsi+0x46>
 47c:	b9 3f       	cpi	r27, 0xF9	; 249
 47e:	cc f3       	brlt	.-14     	; 0x472 <__fixunssfsi+0x2e>
 480:	86 95       	lsr	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b3 95       	inc	r27
 488:	d9 f7       	brne	.-10     	; 0x480 <__fixunssfsi+0x3c>
 48a:	3e f4       	brtc	.+14     	; 0x49a <__fixunssfsi+0x56>
 48c:	90 95       	com	r25
 48e:	80 95       	com	r24
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	08 95       	ret

0000049c <__floatunsisf>:
 49c:	e8 94       	clt
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <__floatsisf+0x12>

000004a0 <__floatsisf>:
 4a0:	97 fb       	bst	r25, 7
 4a2:	3e f4       	brtc	.+14     	; 0x4b2 <__floatsisf+0x12>
 4a4:	90 95       	com	r25
 4a6:	80 95       	com	r24
 4a8:	70 95       	com	r23
 4aa:	61 95       	neg	r22
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	99 23       	and	r25, r25
 4b4:	a9 f0       	breq	.+42     	; 0x4e0 <__floatsisf+0x40>
 4b6:	f9 2f       	mov	r31, r25
 4b8:	96 e9       	ldi	r25, 0x96	; 150
 4ba:	bb 27       	eor	r27, r27
 4bc:	93 95       	inc	r25
 4be:	f6 95       	lsr	r31
 4c0:	87 95       	ror	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f1 11       	cpse	r31, r1
 4ca:	f8 cf       	rjmp	.-16     	; 0x4bc <__floatsisf+0x1c>
 4cc:	fa f4       	brpl	.+62     	; 0x50c <__floatsisf+0x6c>
 4ce:	bb 0f       	add	r27, r27
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__floatsisf+0x36>
 4d2:	60 ff       	sbrs	r22, 0
 4d4:	1b c0       	rjmp	.+54     	; 0x50c <__floatsisf+0x6c>
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	16 c0       	rjmp	.+44     	; 0x50c <__floatsisf+0x6c>
 4e0:	88 23       	and	r24, r24
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <__floatsisf+0x48>
 4e4:	96 e9       	ldi	r25, 0x96	; 150
 4e6:	11 c0       	rjmp	.+34     	; 0x50a <__floatsisf+0x6a>
 4e8:	77 23       	and	r23, r23
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <__floatsisf+0x54>
 4ec:	9e e8       	ldi	r25, 0x8E	; 142
 4ee:	87 2f       	mov	r24, r23
 4f0:	76 2f       	mov	r23, r22
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <__floatsisf+0x5e>
 4f4:	66 23       	and	r22, r22
 4f6:	71 f0       	breq	.+28     	; 0x514 <__floatsisf+0x74>
 4f8:	96 e8       	ldi	r25, 0x86	; 134
 4fa:	86 2f       	mov	r24, r22
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	2a f0       	brmi	.+10     	; 0x50c <__floatsisf+0x6c>
 502:	9a 95       	dec	r25
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	da f7       	brpl	.-10     	; 0x502 <__floatsisf+0x62>
 50c:	88 0f       	add	r24, r24
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__fp_cmp>:
 516:	99 0f       	add	r25, r25
 518:	00 08       	sbc	r0, r0
 51a:	55 0f       	add	r21, r21
 51c:	aa 0b       	sbc	r26, r26
 51e:	e0 e8       	ldi	r30, 0x80	; 128
 520:	fe ef       	ldi	r31, 0xFE	; 254
 522:	16 16       	cp	r1, r22
 524:	17 06       	cpc	r1, r23
 526:	e8 07       	cpc	r30, r24
 528:	f9 07       	cpc	r31, r25
 52a:	c0 f0       	brcs	.+48     	; 0x55c <__fp_cmp+0x46>
 52c:	12 16       	cp	r1, r18
 52e:	13 06       	cpc	r1, r19
 530:	e4 07       	cpc	r30, r20
 532:	f5 07       	cpc	r31, r21
 534:	98 f0       	brcs	.+38     	; 0x55c <__fp_cmp+0x46>
 536:	62 1b       	sub	r22, r18
 538:	73 0b       	sbc	r23, r19
 53a:	84 0b       	sbc	r24, r20
 53c:	95 0b       	sbc	r25, r21
 53e:	39 f4       	brne	.+14     	; 0x54e <__fp_cmp+0x38>
 540:	0a 26       	eor	r0, r26
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_cmp+0x46>
 544:	23 2b       	or	r18, r19
 546:	24 2b       	or	r18, r20
 548:	25 2b       	or	r18, r21
 54a:	21 f4       	brne	.+8      	; 0x554 <__fp_cmp+0x3e>
 54c:	08 95       	ret
 54e:	0a 26       	eor	r0, r26
 550:	09 f4       	brne	.+2      	; 0x554 <__fp_cmp+0x3e>
 552:	a1 40       	sbci	r26, 0x01	; 1
 554:	a6 95       	lsr	r26
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	81 1d       	adc	r24, r1
 55a:	81 1d       	adc	r24, r1
 55c:	08 95       	ret

0000055e <__fp_inf>:
 55e:	97 f9       	bld	r25, 7
 560:	9f 67       	ori	r25, 0x7F	; 127
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	08 95       	ret

0000056a <__fp_nan>:
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	80 ec       	ldi	r24, 0xC0	; 192
 56e:	08 95       	ret

00000570 <__fp_pscA>:
 570:	00 24       	eor	r0, r0
 572:	0a 94       	dec	r0
 574:	16 16       	cp	r1, r22
 576:	17 06       	cpc	r1, r23
 578:	18 06       	cpc	r1, r24
 57a:	09 06       	cpc	r0, r25
 57c:	08 95       	ret

0000057e <__fp_pscB>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	12 16       	cp	r1, r18
 584:	13 06       	cpc	r1, r19
 586:	14 06       	cpc	r1, r20
 588:	05 06       	cpc	r0, r21
 58a:	08 95       	ret

0000058c <__fp_round>:
 58c:	09 2e       	mov	r0, r25
 58e:	03 94       	inc	r0
 590:	00 0c       	add	r0, r0
 592:	11 f4       	brne	.+4      	; 0x598 <__fp_round+0xc>
 594:	88 23       	and	r24, r24
 596:	52 f0       	brmi	.+20     	; 0x5ac <__fp_round+0x20>
 598:	bb 0f       	add	r27, r27
 59a:	40 f4       	brcc	.+16     	; 0x5ac <__fp_round+0x20>
 59c:	bf 2b       	or	r27, r31
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__fp_round+0x18>
 5a0:	60 ff       	sbrs	r22, 0
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <__fp_round+0x20>
 5a4:	6f 5f       	subi	r22, 0xFF	; 255
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__fp_split3>:
 5ae:	57 fd       	sbrc	r21, 7
 5b0:	90 58       	subi	r25, 0x80	; 128
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	59 f0       	breq	.+22     	; 0x5ce <__fp_splitA+0x10>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <__fp_splitA+0x1a>
 5bc:	47 95       	ror	r20

000005be <__fp_splitA>:
 5be:	88 0f       	add	r24, r24
 5c0:	97 fb       	bst	r25, 7
 5c2:	99 1f       	adc	r25, r25
 5c4:	61 f0       	breq	.+24     	; 0x5de <__fp_splitA+0x20>
 5c6:	9f 3f       	cpi	r25, 0xFF	; 255
 5c8:	79 f0       	breq	.+30     	; 0x5e8 <__fp_splitA+0x2a>
 5ca:	87 95       	ror	r24
 5cc:	08 95       	ret
 5ce:	12 16       	cp	r1, r18
 5d0:	13 06       	cpc	r1, r19
 5d2:	14 06       	cpc	r1, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	f2 cf       	rjmp	.-28     	; 0x5bc <__fp_split3+0xe>
 5d8:	46 95       	lsr	r20
 5da:	f1 df       	rcall	.-30     	; 0x5be <__fp_splitA>
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <__fp_splitA+0x30>
 5de:	16 16       	cp	r1, r22
 5e0:	17 06       	cpc	r1, r23
 5e2:	18 06       	cpc	r1, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	f1 cf       	rjmp	.-30     	; 0x5ca <__fp_splitA+0xc>
 5e8:	86 95       	lsr	r24
 5ea:	71 05       	cpc	r23, r1
 5ec:	61 05       	cpc	r22, r1
 5ee:	08 94       	sec
 5f0:	08 95       	ret

000005f2 <__fp_zero>:
 5f2:	e8 94       	clt

000005f4 <__fp_szero>:
 5f4:	bb 27       	eor	r27, r27
 5f6:	66 27       	eor	r22, r22
 5f8:	77 27       	eor	r23, r23
 5fa:	cb 01       	movw	r24, r22
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <__gesf2>:
 600:	8a df       	rcall	.-236    	; 0x516 <__fp_cmp>
 602:	08 f4       	brcc	.+2      	; 0x606 <__gesf2+0x6>
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	08 95       	ret

00000608 <__mulsf3>:
 608:	0b d0       	rcall	.+22     	; 0x620 <__mulsf3x>
 60a:	c0 cf       	rjmp	.-128    	; 0x58c <__fp_round>
 60c:	b1 df       	rcall	.-158    	; 0x570 <__fp_pscA>
 60e:	28 f0       	brcs	.+10     	; 0x61a <__mulsf3+0x12>
 610:	b6 df       	rcall	.-148    	; 0x57e <__fp_pscB>
 612:	18 f0       	brcs	.+6      	; 0x61a <__mulsf3+0x12>
 614:	95 23       	and	r25, r21
 616:	09 f0       	breq	.+2      	; 0x61a <__mulsf3+0x12>
 618:	a2 cf       	rjmp	.-188    	; 0x55e <__fp_inf>
 61a:	a7 cf       	rjmp	.-178    	; 0x56a <__fp_nan>
 61c:	11 24       	eor	r1, r1
 61e:	ea cf       	rjmp	.-44     	; 0x5f4 <__fp_szero>

00000620 <__mulsf3x>:
 620:	c6 df       	rcall	.-116    	; 0x5ae <__fp_split3>
 622:	a0 f3       	brcs	.-24     	; 0x60c <__mulsf3+0x4>

00000624 <__mulsf3_pse>:
 624:	95 9f       	mul	r25, r21
 626:	d1 f3       	breq	.-12     	; 0x61c <__mulsf3+0x14>
 628:	95 0f       	add	r25, r21
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	55 1f       	adc	r21, r21
 62e:	62 9f       	mul	r22, r18
 630:	f0 01       	movw	r30, r0
 632:	72 9f       	mul	r23, r18
 634:	bb 27       	eor	r27, r27
 636:	f0 0d       	add	r31, r0
 638:	b1 1d       	adc	r27, r1
 63a:	63 9f       	mul	r22, r19
 63c:	aa 27       	eor	r26, r26
 63e:	f0 0d       	add	r31, r0
 640:	b1 1d       	adc	r27, r1
 642:	aa 1f       	adc	r26, r26
 644:	64 9f       	mul	r22, r20
 646:	66 27       	eor	r22, r22
 648:	b0 0d       	add	r27, r0
 64a:	a1 1d       	adc	r26, r1
 64c:	66 1f       	adc	r22, r22
 64e:	82 9f       	mul	r24, r18
 650:	22 27       	eor	r18, r18
 652:	b0 0d       	add	r27, r0
 654:	a1 1d       	adc	r26, r1
 656:	62 1f       	adc	r22, r18
 658:	73 9f       	mul	r23, r19
 65a:	b0 0d       	add	r27, r0
 65c:	a1 1d       	adc	r26, r1
 65e:	62 1f       	adc	r22, r18
 660:	83 9f       	mul	r24, r19
 662:	a0 0d       	add	r26, r0
 664:	61 1d       	adc	r22, r1
 666:	22 1f       	adc	r18, r18
 668:	74 9f       	mul	r23, r20
 66a:	33 27       	eor	r19, r19
 66c:	a0 0d       	add	r26, r0
 66e:	61 1d       	adc	r22, r1
 670:	23 1f       	adc	r18, r19
 672:	84 9f       	mul	r24, r20
 674:	60 0d       	add	r22, r0
 676:	21 1d       	adc	r18, r1
 678:	82 2f       	mov	r24, r18
 67a:	76 2f       	mov	r23, r22
 67c:	6a 2f       	mov	r22, r26
 67e:	11 24       	eor	r1, r1
 680:	9f 57       	subi	r25, 0x7F	; 127
 682:	50 40       	sbci	r21, 0x00	; 0
 684:	8a f0       	brmi	.+34     	; 0x6a8 <__mulsf3_pse+0x84>
 686:	e1 f0       	breq	.+56     	; 0x6c0 <__mulsf3_pse+0x9c>
 688:	88 23       	and	r24, r24
 68a:	4a f0       	brmi	.+18     	; 0x69e <__mulsf3_pse+0x7a>
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	bb 1f       	adc	r27, r27
 692:	66 1f       	adc	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	91 50       	subi	r25, 0x01	; 1
 69a:	50 40       	sbci	r21, 0x00	; 0
 69c:	a9 f7       	brne	.-22     	; 0x688 <__mulsf3_pse+0x64>
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	51 05       	cpc	r21, r1
 6a2:	70 f0       	brcs	.+28     	; 0x6c0 <__mulsf3_pse+0x9c>
 6a4:	5c cf       	rjmp	.-328    	; 0x55e <__fp_inf>
 6a6:	a6 cf       	rjmp	.-180    	; 0x5f4 <__fp_szero>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	ec f3       	brlt	.-6      	; 0x6a6 <__mulsf3_pse+0x82>
 6ac:	98 3e       	cpi	r25, 0xE8	; 232
 6ae:	dc f3       	brlt	.-10     	; 0x6a6 <__mulsf3_pse+0x82>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f7 95       	ror	r31
 6ba:	e7 95       	ror	r30
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c1 f7       	brne	.-16     	; 0x6b0 <__mulsf3_pse+0x8c>
 6c0:	fe 2b       	or	r31, r30
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret

000006ce <__divmodhi4>:
 6ce:	97 fb       	bst	r25, 7
 6d0:	07 2e       	mov	r0, r23
 6d2:	16 f4       	brtc	.+4      	; 0x6d8 <__divmodhi4+0xa>
 6d4:	00 94       	com	r0
 6d6:	06 d0       	rcall	.+12     	; 0x6e4 <__divmodhi4_neg1>
 6d8:	77 fd       	sbrc	r23, 7
 6da:	08 d0       	rcall	.+16     	; 0x6ec <__divmodhi4_neg2>
 6dc:	0b d0       	rcall	.+22     	; 0x6f4 <__udivmodhi4>
 6de:	07 fc       	sbrc	r0, 7
 6e0:	05 d0       	rcall	.+10     	; 0x6ec <__divmodhi4_neg2>
 6e2:	3e f4       	brtc	.+14     	; 0x6f2 <__divmodhi4_exit>

000006e4 <__divmodhi4_neg1>:
 6e4:	90 95       	com	r25
 6e6:	81 95       	neg	r24
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	08 95       	ret

000006ec <__divmodhi4_neg2>:
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255

000006f2 <__divmodhi4_exit>:
 6f2:	08 95       	ret

000006f4 <__udivmodhi4>:
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	51 e1       	ldi	r21, 0x11	; 17
 6fa:	07 c0       	rjmp	.+14     	; 0x70a <__udivmodhi4_ep>

000006fc <__udivmodhi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	a6 17       	cp	r26, r22
 702:	b7 07       	cpc	r27, r23
 704:	10 f0       	brcs	.+4      	; 0x70a <__udivmodhi4_ep>
 706:	a6 1b       	sub	r26, r22
 708:	b7 0b       	sbc	r27, r23

0000070a <__udivmodhi4_ep>:
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	5a 95       	dec	r21
 710:	a9 f7       	brne	.-22     	; 0x6fc <__udivmodhi4_loop>
 712:	80 95       	com	r24
 714:	90 95       	com	r25
 716:	bc 01       	movw	r22, r24
 718:	cd 01       	movw	r24, r26
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
