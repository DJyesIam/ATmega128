
tone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d8  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	9d d0       	rcall	.+314    	; 0x1d4 <main>
  9a:	22 c2       	rjmp	.+1092   	; 0x4e0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <tone>:
#define F_CPU 16000000UL
#define __DELAY_BACKWARD_COMPATIBLE__	// 딜레이 함수에 변수 사용 가능
#include <util/delay.h>
#define M0 1 << PORTC0

void tone(int fr, int duration){
  9e:	4f 92       	push	r4
  a0:	5f 92       	push	r5
  a2:	6f 92       	push	r6
  a4:	7f 92       	push	r7
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	9c 01       	movw	r18, r24
  bc:	8b 01       	movw	r16, r22
	int tms = 500/fr, i;
  be:	84 ef       	ldi	r24, 0xF4	; 244
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	b9 01       	movw	r22, r18
  c4:	e6 d1       	rcall	.+972    	; 0x492 <__divmodhi4>
  c6:	7b 01       	movw	r14, r22
	for (i = 0; i<duration; i++){
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	70 c0       	rjmp	.+224    	; 0x1ae <tone+0x110>
		PORTC |= M0;
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	85 bb       	out	0x15, r24	; 21
		_delay_ms(tms);
  d4:	b7 01       	movw	r22, r14
  d6:	0f 2c       	mov	r0, r15
  d8:	00 0c       	add	r0, r0
  da:	88 0b       	sbc	r24, r24
  dc:	99 0b       	sbc	r25, r25
  de:	c2 d0       	rcall	.+388    	; 0x264 <__floatsisf>
  e0:	2b 01       	movw	r4, r22
  e2:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	4a e7       	ldi	r20, 0x7A	; 122
  ea:	55 e4       	ldi	r21, 0x45	; 69
  ec:	47 d1       	rcall	.+654    	; 0x37c <__mulsf3>
  ee:	4b 01       	movw	r8, r22
  f0:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e8       	ldi	r20, 0x80	; 128
  f8:	5f e3       	ldi	r21, 0x3F	; 63
  fa:	82 d0       	rcall	.+260    	; 0x200 <__cmpsf2>
  fc:	88 23       	and	r24, r24
  fe:	04 f1       	brlt	.+64     	; 0x140 <tone+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	3f ef       	ldi	r19, 0xFF	; 255
 104:	4f e7       	ldi	r20, 0x7F	; 127
 106:	57 e4       	ldi	r21, 0x47	; 71
 108:	c5 01       	movw	r24, r10
 10a:	b4 01       	movw	r22, r8
 10c:	33 d1       	rcall	.+614    	; 0x374 <__gesf2>
 10e:	18 16       	cp	r1, r24
 110:	9c f4       	brge	.+38     	; 0x138 <tone+0x9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e2       	ldi	r20, 0x20	; 32
 118:	51 e4       	ldi	r21, 0x41	; 65
 11a:	c3 01       	movw	r24, r6
 11c:	b2 01       	movw	r22, r4
 11e:	2e d1       	rcall	.+604    	; 0x37c <__mulsf3>
 120:	73 d0       	rcall	.+230    	; 0x208 <__fixunssfsi>
 122:	06 c0       	rjmp	.+12     	; 0x130 <tone+0x92>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 124:	80 e9       	ldi	r24, 0x90	; 144
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <tone+0x8a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12c:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12e:	71 09       	sbc	r23, r1
 130:	61 15       	cp	r22, r1
 132:	71 05       	cpc	r23, r1
 134:	b9 f7       	brne	.-18     	; 0x124 <tone+0x86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 136:	09 c0       	rjmp	.+18     	; 0x14a <tone+0xac>
 138:	c5 01       	movw	r24, r10
 13a:	b4 01       	movw	r22, r8
 13c:	65 d0       	rcall	.+202    	; 0x208 <__fixunssfsi>
 13e:	02 c0       	rjmp	.+4      	; 0x144 <tone+0xa6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	cb 01       	movw	r24, r22
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <tone+0xa8>
		PORTC &= ~M0;
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	8e 7f       	andi	r24, 0xFE	; 254
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 14e:	85 bb       	out	0x15, r24	; 21
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e8       	ldi	r20, 0x80	; 128
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	c5 01       	movw	r24, r10
 15a:	b4 01       	movw	r22, r8
 15c:	51 d0       	rcall	.+162    	; 0x200 <__cmpsf2>
 15e:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 160:	04 f1       	brlt	.+64     	; 0x1a2 <tone+0x104>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	3f ef       	ldi	r19, 0xFF	; 255
 166:	4f e7       	ldi	r20, 0x7F	; 127
 168:	57 e4       	ldi	r21, 0x47	; 71
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	02 d1       	rcall	.+516    	; 0x374 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 170:	18 16       	cp	r1, r24
 172:	9c f4       	brge	.+38     	; 0x19a <tone+0xfc>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e2       	ldi	r20, 0x20	; 32
 17a:	51 e4       	ldi	r21, 0x41	; 65
 17c:	c3 01       	movw	r24, r6
 17e:	b2 01       	movw	r22, r4
 180:	fd d0       	rcall	.+506    	; 0x37c <__mulsf3>
 182:	42 d0       	rcall	.+132    	; 0x208 <__fixunssfsi>
 184:	06 c0       	rjmp	.+12     	; 0x192 <tone+0xf4>
 186:	80 e9       	ldi	r24, 0x90	; 144
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18c:	f1 f7       	brne	.-4      	; 0x18a <tone+0xec>
 18e:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 190:	71 09       	sbc	r23, r1
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	b9 f7       	brne	.-18     	; 0x186 <tone+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 198:	09 c0       	rjmp	.+18     	; 0x1ac <tone+0x10e>
 19a:	c5 01       	movw	r24, r10
 19c:	b4 01       	movw	r22, r8
 19e:	34 d0       	rcall	.+104    	; 0x208 <__fixunssfsi>
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <tone+0x108>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	cb 01       	movw	r24, r22
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <tone+0x10a>
#include <util/delay.h>
#define M0 1 << PORTC0

void tone(int fr, int duration){
	int tms = 500/fr, i;
	for (i = 0; i<duration; i++){
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	c0 17       	cp	r28, r16
 1b0:	d1 07       	cpc	r29, r17
 1b2:	0c f4       	brge	.+2      	; 0x1b6 <tone+0x118>
 1b4:	8c cf       	rjmp	.-232    	; 0xce <tone+0x30>
		PORTC |= M0;
		_delay_ms(tms);
		PORTC &= ~M0;
		_delay_ms(tms);
	}
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	bf 90       	pop	r11
 1c4:	af 90       	pop	r10
 1c6:	9f 90       	pop	r9
 1c8:	8f 90       	pop	r8
 1ca:	7f 90       	pop	r7
 1cc:	6f 90       	pop	r6
 1ce:	5f 90       	pop	r5
 1d0:	4f 90       	pop	r4
 1d2:	08 95       	ret

000001d4 <main>:

int main(void)
{
	DDRB &= ~M0;	// PORTB의 0번 비트만 입력 모드로
 1d4:	87 b3       	in	r24, 0x17	; 23
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	87 bb       	out	0x17, r24	; 23
	PORTB |= M0;	// PORTB의 0번 비트만 출력 HIGH(내부 풀업 저항 사용)
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	88 bb       	out	0x18, r24	; 24
	DDRC |= M0;	// PORTC의 0번 포트만 출력 모드로
 1e0:	84 b3       	in	r24, 0x14	; 20
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	84 bb       	out	0x14, r24	; 20
	while (1) 
	{
		if (!(PINB & M0)){
 1e6:	b0 99       	sbic	0x16, 0	; 22
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x12>
			tone(500,500);
 1ea:	64 ef       	ldi	r22, 0xF4	; 244
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	84 ef       	ldi	r24, 0xF4	; 244
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	55 df       	rcall	.-342    	; 0x9e <tone>
			tone(250,500);
 1f4:	64 ef       	ldi	r22, 0xF4	; 244
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	8a ef       	ldi	r24, 0xFA	; 250
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	50 df       	rcall	.-352    	; 0x9e <tone>
 1fe:	f3 cf       	rjmp	.-26     	; 0x1e6 <main+0x12>

00000200 <__cmpsf2>:
 200:	6c d0       	rcall	.+216    	; 0x2da <__fp_cmp>
 202:	08 f4       	brcc	.+2      	; 0x206 <__cmpsf2+0x6>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret

00000208 <__fixunssfsi>:
 208:	94 d0       	rcall	.+296    	; 0x332 <__fp_splitA>
 20a:	88 f0       	brcs	.+34     	; 0x22e <__fixunssfsi+0x26>
 20c:	9f 57       	subi	r25, 0x7F	; 127
 20e:	90 f0       	brcs	.+36     	; 0x234 <__fixunssfsi+0x2c>
 210:	b9 2f       	mov	r27, r25
 212:	99 27       	eor	r25, r25
 214:	b7 51       	subi	r27, 0x17	; 23
 216:	a0 f0       	brcs	.+40     	; 0x240 <__fixunssfsi+0x38>
 218:	d1 f0       	breq	.+52     	; 0x24e <__fixunssfsi+0x46>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	1a f0       	brmi	.+6      	; 0x22a <__fixunssfsi+0x22>
 224:	ba 95       	dec	r27
 226:	c9 f7       	brne	.-14     	; 0x21a <__fixunssfsi+0x12>
 228:	12 c0       	rjmp	.+36     	; 0x24e <__fixunssfsi+0x46>
 22a:	b1 30       	cpi	r27, 0x01	; 1
 22c:	81 f0       	breq	.+32     	; 0x24e <__fixunssfsi+0x46>
 22e:	9b d0       	rcall	.+310    	; 0x366 <__fp_zero>
 230:	b1 e0       	ldi	r27, 0x01	; 1
 232:	08 95       	ret
 234:	98 c0       	rjmp	.+304    	; 0x366 <__fp_zero>
 236:	67 2f       	mov	r22, r23
 238:	78 2f       	mov	r23, r24
 23a:	88 27       	eor	r24, r24
 23c:	b8 5f       	subi	r27, 0xF8	; 248
 23e:	39 f0       	breq	.+14     	; 0x24e <__fixunssfsi+0x46>
 240:	b9 3f       	cpi	r27, 0xF9	; 249
 242:	cc f3       	brlt	.-14     	; 0x236 <__fixunssfsi+0x2e>
 244:	86 95       	lsr	r24
 246:	77 95       	ror	r23
 248:	67 95       	ror	r22
 24a:	b3 95       	inc	r27
 24c:	d9 f7       	brne	.-10     	; 0x244 <__fixunssfsi+0x3c>
 24e:	3e f4       	brtc	.+14     	; 0x25e <__fixunssfsi+0x56>
 250:	90 95       	com	r25
 252:	80 95       	com	r24
 254:	70 95       	com	r23
 256:	61 95       	neg	r22
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	8f 4f       	sbci	r24, 0xFF	; 255
 25c:	9f 4f       	sbci	r25, 0xFF	; 255
 25e:	08 95       	ret

00000260 <__floatunsisf>:
 260:	e8 94       	clt
 262:	09 c0       	rjmp	.+18     	; 0x276 <__floatsisf+0x12>

00000264 <__floatsisf>:
 264:	97 fb       	bst	r25, 7
 266:	3e f4       	brtc	.+14     	; 0x276 <__floatsisf+0x12>
 268:	90 95       	com	r25
 26a:	80 95       	com	r24
 26c:	70 95       	com	r23
 26e:	61 95       	neg	r22
 270:	7f 4f       	sbci	r23, 0xFF	; 255
 272:	8f 4f       	sbci	r24, 0xFF	; 255
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	99 23       	and	r25, r25
 278:	a9 f0       	breq	.+42     	; 0x2a4 <__floatsisf+0x40>
 27a:	f9 2f       	mov	r31, r25
 27c:	96 e9       	ldi	r25, 0x96	; 150
 27e:	bb 27       	eor	r27, r27
 280:	93 95       	inc	r25
 282:	f6 95       	lsr	r31
 284:	87 95       	ror	r24
 286:	77 95       	ror	r23
 288:	67 95       	ror	r22
 28a:	b7 95       	ror	r27
 28c:	f1 11       	cpse	r31, r1
 28e:	f8 cf       	rjmp	.-16     	; 0x280 <__floatsisf+0x1c>
 290:	fa f4       	brpl	.+62     	; 0x2d0 <__floatsisf+0x6c>
 292:	bb 0f       	add	r27, r27
 294:	11 f4       	brne	.+4      	; 0x29a <__floatsisf+0x36>
 296:	60 ff       	sbrs	r22, 0
 298:	1b c0       	rjmp	.+54     	; 0x2d0 <__floatsisf+0x6c>
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	8f 4f       	sbci	r24, 0xFF	; 255
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	16 c0       	rjmp	.+44     	; 0x2d0 <__floatsisf+0x6c>
 2a4:	88 23       	and	r24, r24
 2a6:	11 f0       	breq	.+4      	; 0x2ac <__floatsisf+0x48>
 2a8:	96 e9       	ldi	r25, 0x96	; 150
 2aa:	11 c0       	rjmp	.+34     	; 0x2ce <__floatsisf+0x6a>
 2ac:	77 23       	and	r23, r23
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <__floatsisf+0x54>
 2b0:	9e e8       	ldi	r25, 0x8E	; 142
 2b2:	87 2f       	mov	r24, r23
 2b4:	76 2f       	mov	r23, r22
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <__floatsisf+0x5e>
 2b8:	66 23       	and	r22, r22
 2ba:	71 f0       	breq	.+28     	; 0x2d8 <__floatsisf+0x74>
 2bc:	96 e8       	ldi	r25, 0x86	; 134
 2be:	86 2f       	mov	r24, r22
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	2a f0       	brmi	.+10     	; 0x2d0 <__floatsisf+0x6c>
 2c6:	9a 95       	dec	r25
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	88 1f       	adc	r24, r24
 2ce:	da f7       	brpl	.-10     	; 0x2c6 <__floatsisf+0x62>
 2d0:	88 0f       	add	r24, r24
 2d2:	96 95       	lsr	r25
 2d4:	87 95       	ror	r24
 2d6:	97 f9       	bld	r25, 7
 2d8:	08 95       	ret

000002da <__fp_cmp>:
 2da:	99 0f       	add	r25, r25
 2dc:	00 08       	sbc	r0, r0
 2de:	55 0f       	add	r21, r21
 2e0:	aa 0b       	sbc	r26, r26
 2e2:	e0 e8       	ldi	r30, 0x80	; 128
 2e4:	fe ef       	ldi	r31, 0xFE	; 254
 2e6:	16 16       	cp	r1, r22
 2e8:	17 06       	cpc	r1, r23
 2ea:	e8 07       	cpc	r30, r24
 2ec:	f9 07       	cpc	r31, r25
 2ee:	c0 f0       	brcs	.+48     	; 0x320 <__fp_cmp+0x46>
 2f0:	12 16       	cp	r1, r18
 2f2:	13 06       	cpc	r1, r19
 2f4:	e4 07       	cpc	r30, r20
 2f6:	f5 07       	cpc	r31, r21
 2f8:	98 f0       	brcs	.+38     	; 0x320 <__fp_cmp+0x46>
 2fa:	62 1b       	sub	r22, r18
 2fc:	73 0b       	sbc	r23, r19
 2fe:	84 0b       	sbc	r24, r20
 300:	95 0b       	sbc	r25, r21
 302:	39 f4       	brne	.+14     	; 0x312 <__fp_cmp+0x38>
 304:	0a 26       	eor	r0, r26
 306:	61 f0       	breq	.+24     	; 0x320 <__fp_cmp+0x46>
 308:	23 2b       	or	r18, r19
 30a:	24 2b       	or	r18, r20
 30c:	25 2b       	or	r18, r21
 30e:	21 f4       	brne	.+8      	; 0x318 <__fp_cmp+0x3e>
 310:	08 95       	ret
 312:	0a 26       	eor	r0, r26
 314:	09 f4       	brne	.+2      	; 0x318 <__fp_cmp+0x3e>
 316:	a1 40       	sbci	r26, 0x01	; 1
 318:	a6 95       	lsr	r26
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	81 1d       	adc	r24, r1
 31e:	81 1d       	adc	r24, r1
 320:	08 95       	ret

00000322 <__fp_split3>:
 322:	57 fd       	sbrc	r21, 7
 324:	90 58       	subi	r25, 0x80	; 128
 326:	44 0f       	add	r20, r20
 328:	55 1f       	adc	r21, r21
 32a:	59 f0       	breq	.+22     	; 0x342 <__fp_splitA+0x10>
 32c:	5f 3f       	cpi	r21, 0xFF	; 255
 32e:	71 f0       	breq	.+28     	; 0x34c <__fp_splitA+0x1a>
 330:	47 95       	ror	r20

00000332 <__fp_splitA>:
 332:	88 0f       	add	r24, r24
 334:	97 fb       	bst	r25, 7
 336:	99 1f       	adc	r25, r25
 338:	61 f0       	breq	.+24     	; 0x352 <__fp_splitA+0x20>
 33a:	9f 3f       	cpi	r25, 0xFF	; 255
 33c:	79 f0       	breq	.+30     	; 0x35c <__fp_splitA+0x2a>
 33e:	87 95       	ror	r24
 340:	08 95       	ret
 342:	12 16       	cp	r1, r18
 344:	13 06       	cpc	r1, r19
 346:	14 06       	cpc	r1, r20
 348:	55 1f       	adc	r21, r21
 34a:	f2 cf       	rjmp	.-28     	; 0x330 <__fp_split3+0xe>
 34c:	46 95       	lsr	r20
 34e:	f1 df       	rcall	.-30     	; 0x332 <__fp_splitA>
 350:	08 c0       	rjmp	.+16     	; 0x362 <__fp_splitA+0x30>
 352:	16 16       	cp	r1, r22
 354:	17 06       	cpc	r1, r23
 356:	18 06       	cpc	r1, r24
 358:	99 1f       	adc	r25, r25
 35a:	f1 cf       	rjmp	.-30     	; 0x33e <__fp_splitA+0xc>
 35c:	86 95       	lsr	r24
 35e:	71 05       	cpc	r23, r1
 360:	61 05       	cpc	r22, r1
 362:	08 94       	sec
 364:	08 95       	ret

00000366 <__fp_zero>:
 366:	e8 94       	clt

00000368 <__fp_szero>:
 368:	bb 27       	eor	r27, r27
 36a:	66 27       	eor	r22, r22
 36c:	77 27       	eor	r23, r23
 36e:	cb 01       	movw	r24, r22
 370:	97 f9       	bld	r25, 7
 372:	08 95       	ret

00000374 <__gesf2>:
 374:	b2 df       	rcall	.-156    	; 0x2da <__fp_cmp>
 376:	08 f4       	brcc	.+2      	; 0x37a <__gesf2+0x6>
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__mulsf3>:
 37c:	0b d0       	rcall	.+22     	; 0x394 <__mulsf3x>
 37e:	78 c0       	rjmp	.+240    	; 0x470 <__fp_round>
 380:	69 d0       	rcall	.+210    	; 0x454 <__fp_pscA>
 382:	28 f0       	brcs	.+10     	; 0x38e <__mulsf3+0x12>
 384:	6e d0       	rcall	.+220    	; 0x462 <__fp_pscB>
 386:	18 f0       	brcs	.+6      	; 0x38e <__mulsf3+0x12>
 388:	95 23       	and	r25, r21
 38a:	09 f0       	breq	.+2      	; 0x38e <__mulsf3+0x12>
 38c:	5a c0       	rjmp	.+180    	; 0x442 <__fp_inf>
 38e:	5f c0       	rjmp	.+190    	; 0x44e <__fp_nan>
 390:	11 24       	eor	r1, r1
 392:	ea cf       	rjmp	.-44     	; 0x368 <__fp_szero>

00000394 <__mulsf3x>:
 394:	c6 df       	rcall	.-116    	; 0x322 <__fp_split3>
 396:	a0 f3       	brcs	.-24     	; 0x380 <__mulsf3+0x4>

00000398 <__mulsf3_pse>:
 398:	95 9f       	mul	r25, r21
 39a:	d1 f3       	breq	.-12     	; 0x390 <__mulsf3+0x14>
 39c:	95 0f       	add	r25, r21
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	55 1f       	adc	r21, r21
 3a2:	62 9f       	mul	r22, r18
 3a4:	f0 01       	movw	r30, r0
 3a6:	72 9f       	mul	r23, r18
 3a8:	bb 27       	eor	r27, r27
 3aa:	f0 0d       	add	r31, r0
 3ac:	b1 1d       	adc	r27, r1
 3ae:	63 9f       	mul	r22, r19
 3b0:	aa 27       	eor	r26, r26
 3b2:	f0 0d       	add	r31, r0
 3b4:	b1 1d       	adc	r27, r1
 3b6:	aa 1f       	adc	r26, r26
 3b8:	64 9f       	mul	r22, r20
 3ba:	66 27       	eor	r22, r22
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	66 1f       	adc	r22, r22
 3c2:	82 9f       	mul	r24, r18
 3c4:	22 27       	eor	r18, r18
 3c6:	b0 0d       	add	r27, r0
 3c8:	a1 1d       	adc	r26, r1
 3ca:	62 1f       	adc	r22, r18
 3cc:	73 9f       	mul	r23, r19
 3ce:	b0 0d       	add	r27, r0
 3d0:	a1 1d       	adc	r26, r1
 3d2:	62 1f       	adc	r22, r18
 3d4:	83 9f       	mul	r24, r19
 3d6:	a0 0d       	add	r26, r0
 3d8:	61 1d       	adc	r22, r1
 3da:	22 1f       	adc	r18, r18
 3dc:	74 9f       	mul	r23, r20
 3de:	33 27       	eor	r19, r19
 3e0:	a0 0d       	add	r26, r0
 3e2:	61 1d       	adc	r22, r1
 3e4:	23 1f       	adc	r18, r19
 3e6:	84 9f       	mul	r24, r20
 3e8:	60 0d       	add	r22, r0
 3ea:	21 1d       	adc	r18, r1
 3ec:	82 2f       	mov	r24, r18
 3ee:	76 2f       	mov	r23, r22
 3f0:	6a 2f       	mov	r22, r26
 3f2:	11 24       	eor	r1, r1
 3f4:	9f 57       	subi	r25, 0x7F	; 127
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	8a f0       	brmi	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fc:	88 23       	and	r24, r24
 3fe:	4a f0       	brmi	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	bb 1f       	adc	r27, r27
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	91 50       	subi	r25, 0x01	; 1
 40e:	50 40       	sbci	r21, 0x00	; 0
 410:	a9 f7       	brne	.-22     	; 0x3fc <__mulsf3_pse+0x64>
 412:	9e 3f       	cpi	r25, 0xFE	; 254
 414:	51 05       	cpc	r21, r1
 416:	70 f0       	brcs	.+28     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__fp_inf>
 41a:	a6 cf       	rjmp	.-180    	; 0x368 <__fp_szero>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	ec f3       	brlt	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 420:	98 3e       	cpi	r25, 0xE8	; 232
 422:	dc f3       	brlt	.-10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f7 95       	ror	r31
 42e:	e7 95       	ror	r30
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	c1 f7       	brne	.-16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 434:	fe 2b       	or	r31, r30
 436:	88 0f       	add	r24, r24
 438:	91 1d       	adc	r25, r1
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__divmodhi4>:
 492:	97 fb       	bst	r25, 7
 494:	07 2e       	mov	r0, r23
 496:	16 f4       	brtc	.+4      	; 0x49c <__divmodhi4+0xa>
 498:	00 94       	com	r0
 49a:	06 d0       	rcall	.+12     	; 0x4a8 <__divmodhi4_neg1>
 49c:	77 fd       	sbrc	r23, 7
 49e:	08 d0       	rcall	.+16     	; 0x4b0 <__divmodhi4_neg2>
 4a0:	0b d0       	rcall	.+22     	; 0x4b8 <__udivmodhi4>
 4a2:	07 fc       	sbrc	r0, 7
 4a4:	05 d0       	rcall	.+10     	; 0x4b0 <__divmodhi4_neg2>
 4a6:	3e f4       	brtc	.+14     	; 0x4b6 <__divmodhi4_exit>

000004a8 <__divmodhi4_neg1>:
 4a8:	90 95       	com	r25
 4aa:	81 95       	neg	r24
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__divmodhi4_neg2>:
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255

000004b6 <__divmodhi4_exit>:
 4b6:	08 95       	ret

000004b8 <__udivmodhi4>:
 4b8:	aa 1b       	sub	r26, r26
 4ba:	bb 1b       	sub	r27, r27
 4bc:	51 e1       	ldi	r21, 0x11	; 17
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <__udivmodhi4_ep>

000004c0 <__udivmodhi4_loop>:
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	a6 17       	cp	r26, r22
 4c6:	b7 07       	cpc	r27, r23
 4c8:	10 f0       	brcs	.+4      	; 0x4ce <__udivmodhi4_ep>
 4ca:	a6 1b       	sub	r26, r22
 4cc:	b7 0b       	sbc	r27, r23

000004ce <__udivmodhi4_ep>:
 4ce:	88 1f       	adc	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	5a 95       	dec	r21
 4d4:	a9 f7       	brne	.-22     	; 0x4c0 <__udivmodhi4_loop>
 4d6:	80 95       	com	r24
 4d8:	90 95       	com	r25
 4da:	bc 01       	movw	r22, r24
 4dc:	cd 01       	movw	r24, r26
 4de:	08 95       	ret

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
