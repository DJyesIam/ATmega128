
fndspk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a66  00000afa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2e  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a2  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060b  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000719  00000000  00000000  00003126  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000383f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	d2 c2       	rjmp	.+1444   	; 0x5aa <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	cd c2       	rjmp	.+1434   	; 0x5dc <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5c d2       	rcall	.+1208   	; 0x57c <main>
  c4:	ce c4       	rjmp	.+2460   	; 0xa62 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z4tonev>:
}
void tone(){
	int fr = 500;
	uint32_t t_tot=HALF_CYC/fr;
	int t_ms=t_tot/1000, t_us=t_tot % 1000, i;
	for (i=0; i<20; i++){
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	24 31       	cpi	r18, 0x14	; 20
  ce:	31 05       	cpc	r19, r1
  d0:	b4 f4       	brge	.+44     	; 0xfe <_Z4tonev+0x36>
		SPK |= 1;
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	88 bb       	out	0x18, r24	; 24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  d8:	e0 ea       	ldi	r30, 0xA0	; 160
  da:	ff e0       	ldi	r31, 0x0F	; 15
  dc:	cf 01       	movw	r24, r30
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z4tonev+0x16>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	98 2f       	mov	r25, r24
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <_Z4tonev+0x1e>
		_delay_ms(t_ms); _delay_us(t_us);
		SPK &= ~1;
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	9e 7f       	andi	r25, 0xFE	; 254
  ee:	98 bb       	out	0x18, r25	; 24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_Z4tonev+0x28>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_Z4tonev+0x2c>
}
void tone(){
	int fr = 500;
	uint32_t t_tot=HALF_CYC/fr;
	int t_ms=t_tot/1000, t_us=t_tot % 1000, i;
	for (i=0; i<20; i++){
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	e7 cf       	rjmp	.-50     	; 0xcc <_Z4tonev+0x4>
  fe:	08 95       	ret

00000100 <_Z10disp_digithh>:
		
	}
}

void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
 100:	e8 2f       	mov	r30, r24
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e0 50       	subi	r30, 0x00	; 0
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	80 81       	ld	r24, Z
 10a:	85 bb       	out	0x15, r24	; 21
	PORTG = 0x01 << d;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <_Z10disp_digithh+0x16>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <_Z10disp_digithh+0x12>
 11a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 11e:	08 95       	ret

00000120 <_Z8disp_FNDj>:
}

void disp_FND(unsigned int num){
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <_Z8disp_FNDj+0xa>
 12a:	00 d0       	rcall	.+0      	; 0x12c <_Z8disp_FNDj+0xc>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	fc 01       	movw	r30, r24
	unsigned char fnd[4];
	
	fnd[0] = (num / 1000) % 10;		// 천의 자리 수
 132:	9c 01       	movw	r18, r24
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	a5 ec       	ldi	r26, 0xC5	; 197
 142:	b0 e2       	ldi	r27, 0x20	; 32
 144:	7f d4       	rcall	.+2302   	; 0xa44 <__umulhisi3>
 146:	ac 01       	movw	r20, r24
 148:	52 95       	swap	r21
 14a:	42 95       	swap	r20
 14c:	4f 70       	andi	r20, 0x0F	; 15
 14e:	45 27       	eor	r20, r21
 150:	5f 70       	andi	r21, 0x0F	; 15
 152:	45 27       	eor	r20, r21
 154:	9a 01       	movw	r18, r20
 156:	ad ec       	ldi	r26, 0xCD	; 205
 158:	bc ec       	ldi	r27, 0xCC	; 204
 15a:	74 d4       	rcall	.+2280   	; 0xa44 <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	9c 01       	movw	r18, r24
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	9a 01       	movw	r18, r20
 180:	28 1b       	sub	r18, r24
 182:	39 0b       	sbc	r19, r25
 184:	29 83       	std	Y+1, r18	; 0x01
	fnd[1] = (num / 100)  % 10;		// 백의 자리 수
 186:	9f 01       	movw	r18, r30
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	36 95       	lsr	r19
 18e:	27 95       	ror	r18
 190:	ab e7       	ldi	r26, 0x7B	; 123
 192:	b4 e1       	ldi	r27, 0x14	; 20
 194:	57 d4       	rcall	.+2222   	; 0xa44 <__umulhisi3>
 196:	ac 01       	movw	r20, r24
 198:	56 95       	lsr	r21
 19a:	47 95       	ror	r20
 19c:	9a 01       	movw	r18, r20
 19e:	ad ec       	ldi	r26, 0xCD	; 205
 1a0:	bc ec       	ldi	r27, 0xCC	; 204
 1a2:	50 d4       	rcall	.+2208   	; 0xa44 <__umulhisi3>
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	9c 01       	movw	r18, r24
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	82 0f       	add	r24, r18
 1c4:	93 1f       	adc	r25, r19
 1c6:	9a 01       	movw	r18, r20
 1c8:	28 1b       	sub	r18, r24
 1ca:	39 0b       	sbc	r19, r25
	fnd[2] = (num / 10)   % 10;		// 십의 자리 수
 1cc:	2a 83       	std	Y+2, r18	; 0x02
 1ce:	9f 01       	movw	r18, r30
 1d0:	39 d4       	rcall	.+2162   	; 0xa44 <__umulhisi3>
 1d2:	ac 01       	movw	r20, r24
 1d4:	56 95       	lsr	r21
 1d6:	47 95       	ror	r20
 1d8:	56 95       	lsr	r21
 1da:	47 95       	ror	r20
 1dc:	56 95       	lsr	r21
 1de:	47 95       	ror	r20
 1e0:	9a 01       	movw	r18, r20
 1e2:	30 d4       	rcall	.+2144   	; 0xa44 <__umulhisi3>
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	9c 01       	movw	r18, r24
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	82 0f       	add	r24, r18
 204:	93 1f       	adc	r25, r19
 206:	9a 01       	movw	r18, r20
 208:	28 1b       	sub	r18, r24
 20a:	39 0b       	sbc	r19, r25
 20c:	2b 83       	std	Y+3, r18	; 0x03
	fnd[3] = (num / 1)    % 10;		// 일의 자리 수
 20e:	ca 01       	movw	r24, r20
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	48 0f       	add	r20, r24
 222:	59 1f       	adc	r21, r25
 224:	e4 1b       	sub	r30, r20
 226:	f5 0b       	sbc	r31, r21
 228:	ec 83       	std	Y+4, r30	; 0x04
	
	for (int i = 0; i < 4; i++){	// 유효한 값이 있는 자릿수만 출력한다.
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	04 30       	cpi	r16, 0x04	; 4
 230:	11 05       	cpc	r17, r1
 232:	3c f5       	brge	.+78     	; 0x282 <_Z8disp_FNDj+0x162>
		if (fnd[i] == 0){
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e0 0f       	add	r30, r16
 23e:	f1 1f       	adc	r31, r17
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	15 c0       	rjmp	.+42     	; 0x270 <_Z8disp_FNDj+0x150>
			if (i == 0 || fnd[i-1] == 0) continue;
 246:	01 15       	cp	r16, r1
 248:	11 05       	cpc	r17, r1
 24a:	c1 f0       	breq	.+48     	; 0x27c <_Z8disp_FNDj+0x15c>
 24c:	f8 01       	movw	r30, r16
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	2c 0f       	add	r18, r28
 256:	3d 1f       	adc	r19, r29
 258:	e2 0f       	add	r30, r18
 25a:	f3 1f       	adc	r31, r19
 25c:	90 81       	ld	r25, Z
 25e:	99 23       	and	r25, r25
			else{
				disp_digit(fnd[i], i);
 260:	69 f0       	breq	.+26     	; 0x27c <_Z8disp_FNDj+0x15c>
 262:	60 2f       	mov	r22, r16
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 264:	4d df       	rcall	.-358    	; 0x100 <_Z10disp_digithh>
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <_Z8disp_FNDj+0x14a>
				_delay_ms(2);
			}
		}
		else{
			disp_digit(fnd[i], i);
 26e:	06 c0       	rjmp	.+12     	; 0x27c <_Z8disp_FNDj+0x15c>
 270:	60 2f       	mov	r22, r16
 272:	46 df       	rcall	.-372    	; 0x100 <_Z10disp_digithh>
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	9f e1       	ldi	r25, 0x1F	; 31
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <_Z8disp_FNDj+0x158>
	fnd[0] = (num / 1000) % 10;		// 천의 자리 수
	fnd[1] = (num / 100)  % 10;		// 백의 자리 수
	fnd[2] = (num / 10)   % 10;		// 십의 자리 수
	fnd[3] = (num / 1)    % 10;		// 일의 자리 수
	
	for (int i = 0; i < 4; i++){	// 유효한 값이 있는 자릿수만 출력한다.
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	d6 cf       	rjmp	.-84     	; 0x22e <_Z8disp_FNDj+0x10e>
		else{
			disp_digit(fnd[i], i);
			_delay_ms(2);
		}
	}
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <_Z7getdistv>:
		}
	}
}


int getdist(){
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
			PORTE &= ~(1 << TRIG);	_delay_us(2);	// TRIG pin LOW
 2a8:	83 b1       	in	r24, 0x03	; 3
 2aa:	8f 7b       	andi	r24, 0xBF	; 191
 2ac:	83 b9       	out	0x03, r24	; 3
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	8a 95       	dec	r24
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <_Z7getdistv+0x1c>
			PORTE |=  (1 << TRIG);  _delay_us(10);	// TRIG pin HIGH
 2b4:	83 b1       	in	r24, 0x03	; 3
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	83 b9       	out	0x03, r24	; 3
 2ba:	85 e3       	ldi	r24, 0x35	; 53
 2bc:	8a 95       	dec	r24
 2be:	f1 f7       	brne	.-4      	; 0x2bc <_Z7getdistv+0x28>
			PORTE &= ~(1 << TRIG);					// TRIG pin LOW
 2c0:	83 b1       	in	r24, 0x03	; 3
 2c2:	8f 7b       	andi	r24, 0xBF	; 191
 2c4:	83 b9       	out	0x03, r24	; 3

			while(!(PINE & (1 << ECHO)));			// ECHO핀이 HIGH가 될 때까지 기다린다.
 2c6:	0f 9b       	sbis	0x01, 7	; 1
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <_Z7getdistv+0x32>

			dt = 0;
 2ca:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <dt+0x1>
 2ce:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <dt>
			TCCR0 |= 1 << CS01;						// ECHO핀이 HIGH인 시간을 재기 시작한다.
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	83 bf       	out	0x33, r24	; 51
			while(PINE & (1 << ECHO));				// ECHO핀이 HIGH인 동안 기다린다.
 2d8:	0f 99       	sbic	0x01, 7	; 1
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <_Z7getdistv+0x44>
			TCCR0 = 0;								// 시간 측정이 끝나면 Timer를 끈다.
 2dc:	13 be       	out	0x33, r1	; 51
			
			distance = dt / 58.2 * 3;				// 거리 구하는 공식 (원래 뒤에 *3 은 없는 게 맞는데 거리가 이상하게 나와서 임의로 붙임)
 2de:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dt>
 2e2:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dt+0x1>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	93 d2       	rcall	.+1318   	; 0x812 <__floatunsisf>
 2ec:	2d ec       	ldi	r18, 0xCD	; 205
 2ee:	3c ec       	ldi	r19, 0xCC	; 204
 2f0:	48 e6       	ldi	r20, 0x68	; 104
 2f2:	52 e4       	ldi	r21, 0x42	; 66
 2f4:	f5 d1       	rcall	.+1002   	; 0x6e0 <__divsf3>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e4       	ldi	r20, 0x40	; 64
 2fc:	50 e4       	ldi	r21, 0x40	; 64
 2fe:	3f d3       	rcall	.+1662   	; 0x97e <__mulsf3>
 300:	6b 01       	movw	r12, r22
 302:	7c 01       	movw	r14, r24
 304:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <distance>
 308:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <distance+0x1>
 30c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <distance+0x2>
 310:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <distance+0x3>
			
			filtered_distance = 0.99 * filtered_distance + 0.01 * distance;	// Low Pass Filter로 거리를 필터링한다. (민감도 : 0.01)
 314:	24 ea       	ldi	r18, 0xA4	; 164
 316:	30 e7       	ldi	r19, 0x70	; 112
 318:	4d e7       	ldi	r20, 0x7D	; 125
 31a:	5f e3       	ldi	r21, 0x3F	; 63
 31c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <filtered_distance>
 320:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <filtered_distance+0x1>
 324:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <filtered_distance+0x2>
 328:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <filtered_distance+0x3>
 32c:	28 d3       	rcall	.+1616   	; 0x97e <__mulsf3>
 32e:	4b 01       	movw	r8, r22
 330:	5c 01       	movw	r10, r24
 332:	2a e0       	ldi	r18, 0x0A	; 10
 334:	37 ed       	ldi	r19, 0xD7	; 215
 336:	43 e2       	ldi	r20, 0x23	; 35
 338:	5c e3       	ldi	r21, 0x3C	; 60
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	1f d3       	rcall	.+1598   	; 0x97e <__mulsf3>
 340:	9b 01       	movw	r18, r22
 342:	ac 01       	movw	r20, r24
 344:	c5 01       	movw	r24, r10
 346:	b4 01       	movw	r22, r8
 348:	63 d1       	rcall	.+710    	; 0x610 <__addsf3>
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
 34e:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <filtered_distance>
 352:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <filtered_distance+0x1>
 356:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <filtered_distance+0x2>
 35a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <filtered_distance+0x3>
			int dd = (int)filtered_distance;
 35e:	28 d2       	rcall	.+1104   	; 0x7b0 <__fixsfsi>
 360:	4b 01       	movw	r8, r22
 362:	5c 01       	movw	r10, r24
			
			if (filtered_distance > 31)	{SPK = 0; PORTC = 0; PORTG = 0; dd = 0;}	// 센서값이 30cm을 초과하면 0을 출력한다.
 364:	eb 01       	movw	r28, r22
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	48 ef       	ldi	r20, 0xF8	; 248
 36c:	51 e4       	ldi	r21, 0x41	; 65
 36e:	c7 01       	movw	r24, r14
 370:	b6 01       	movw	r22, r12
 372:	01 d3       	rcall	.+1538   	; 0x976 <__gesf2>
 374:	18 16       	cp	r1, r24
 376:	3c f4       	brge	.+14     	; 0x386 <_Z7getdistv+0xf2>
 378:	18 ba       	out	0x18, r1	; 24
 37a:	15 ba       	out	0x15, r1	; 21
 37c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 380:	c0 e0       	ldi	r28, 0x00	; 0
 382:	d0 e0       	ldi	r29, 0x00	; 0
			else disp_FND(dd);		// 아니라면 FND에 거리를 출력한다.
 384:	02 c0       	rjmp	.+4      	; 0x38a <_Z7getdistv+0xf6>
 386:	c4 01       	movw	r24, r8
 388:	cb de       	rcall	.-618    	; 0x120 <_Z8disp_FNDj>
			
			return dd;
}
 38a:	ce 01       	movw	r24, r28
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	08 95       	ret

000003a2 <_Z4beepv>:
		SPK &= ~1;
		_delay_ms(t_ms); _delay_us(t_us);
	}
}

void beep(){
 3a2:	4f 92       	push	r4
 3a4:	5f 92       	push	r5
 3a6:	6f 92       	push	r6
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
	dist = getdist();
 3c0:	69 df       	rcall	.-302    	; 0x294 <_Z7getdistv>
 3c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 3c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if(dist>0) tone();
 3ca:	18 16       	cp	r1, r24
 3cc:	19 06       	cpc	r1, r25
 3ce:	0c f4       	brge	.+2      	; 0x3d2 <_Z4beepv+0x30>
 3d0:	7b de       	rcall	.-778    	; 0xc8 <_Z4tonev>
		SPK &= ~1;
		_delay_ms(t_ms); _delay_us(t_us);
	}
}

void beep(){
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
	dist = getdist();
	if(dist>0) tone();
	for(int i=0; i<100;i++){
 3d6:	c4 36       	cpi	r28, 0x64	; 100
 3d8:	d1 05       	cpc	r29, r1
 3da:	0c f0       	brlt	.+2      	; 0x3de <_Z4beepv+0x3c>
 3dc:	99 c0       	rjmp	.+306    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		SPK |= 0;
 3de:	88 b3       	in	r24, 0x18	; 24
 3e0:	88 bb       	out	0x18, r24	; 24
		_delay_us(dist*dist -6*dist + 9);
 3e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3e6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 3ea:	9c 01       	movw	r18, r24
 3ec:	26 50       	subi	r18, 0x06	; 6
 3ee:	31 09       	sbc	r19, r1
 3f0:	28 9f       	mul	r18, r24
 3f2:	b0 01       	movw	r22, r0
 3f4:	29 9f       	mul	r18, r25
 3f6:	70 0d       	add	r23, r0
 3f8:	38 9f       	mul	r19, r24
 3fa:	70 0d       	add	r23, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	67 5f       	subi	r22, 0xF7	; 247
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	07 2e       	mov	r0, r23
 404:	00 0c       	add	r0, r0
 406:	88 0b       	sbc	r24, r24
 408:	99 0b       	sbc	r25, r25
 40a:	05 d2       	rcall	.+1034   	; 0x816 <__floatsisf>
 40c:	6b 01       	movw	r12, r22
 40e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 410:	2b ea       	ldi	r18, 0xAB	; 171
 412:	3a ea       	ldi	r19, 0xAA	; 170
 414:	4a ea       	ldi	r20, 0xAA	; 170
 416:	50 e4       	ldi	r21, 0x40	; 64
 418:	b2 d2       	rcall	.+1380   	; 0x97e <__mulsf3>
 41a:	4b 01       	movw	r8, r22
 41c:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e8       	ldi	r20, 0x80	; 128
 424:	50 e4       	ldi	r21, 0x40	; 64
 426:	c7 01       	movw	r24, r14
 428:	b6 01       	movw	r22, r12
 42a:	a9 d2       	rcall	.+1362   	; 0x97e <__mulsf3>
 42c:	2b 01       	movw	r4, r22
 42e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	40 e8       	ldi	r20, 0x80	; 128
 436:	5f e3       	ldi	r21, 0x3F	; 63
 438:	c5 01       	movw	r24, r10
 43a:	b4 01       	movw	r22, r8
 43c:	4d d1       	rcall	.+666    	; 0x6d8 <__cmpsf2>
 43e:	88 23       	and	r24, r24
 440:	0c f4       	brge	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	5b c0       	rjmp	.+182    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		__ticks = 1;
	else if (__tmp2 > 65535)
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	3f ef       	ldi	r19, 0xFF	; 255
 448:	4f e7       	ldi	r20, 0x7F	; 127
 44a:	57 e4       	ldi	r21, 0x47	; 71
 44c:	c3 01       	movw	r24, r6
 44e:	b2 01       	movw	r22, r4
 450:	92 d2       	rcall	.+1316   	; 0x976 <__gesf2>
 452:	18 16       	cp	r1, r24
 454:	0c f0       	brlt	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	3c c0       	rjmp	.+120    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	{
		_delay_ms(__us / 1000.0);
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	4a e7       	ldi	r20, 0x7A	; 122
 45e:	54 e4       	ldi	r21, 0x44	; 68
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	3d d1       	rcall	.+634    	; 0x6e0 <__divsf3>
 466:	4b 01       	movw	r8, r22
 468:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	4a e7       	ldi	r20, 0x7A	; 122
 470:	55 e4       	ldi	r21, 0x45	; 69
 472:	85 d2       	rcall	.+1290   	; 0x97e <__mulsf3>
 474:	6b 01       	movw	r12, r22
 476:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e8       	ldi	r20, 0x80	; 128
 47e:	5f e3       	ldi	r21, 0x3F	; 63
 480:	2b d1       	rcall	.+598    	; 0x6d8 <__cmpsf2>
 482:	88 23       	and	r24, r24
 484:	fc f0       	brlt	.+62     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		__ticks = 1;
	else if (__tmp > 65535)
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	3f ef       	ldi	r19, 0xFF	; 255
 48a:	4f e7       	ldi	r20, 0x7F	; 127
 48c:	57 e4       	ldi	r21, 0x47	; 71
 48e:	c7 01       	movw	r24, r14
 490:	b6 01       	movw	r22, r12
 492:	71 d2       	rcall	.+1250   	; 0x976 <__gesf2>
 494:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 496:	94 f4       	brge	.+36     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e2       	ldi	r20, 0x20	; 32
 49e:	51 e4       	ldi	r21, 0x41	; 65
 4a0:	c5 01       	movw	r24, r10
 4a2:	b4 01       	movw	r22, r8
 4a4:	6c d2       	rcall	.+1240   	; 0x97e <__mulsf3>
 4a6:	89 d1       	rcall	.+786    	; 0x7ba <__fixunssfsi>
		while(__ticks)
 4a8:	61 15       	cp	r22, r1
 4aa:	71 05       	cpc	r23, r1
 4ac:	39 f1       	breq	.+78     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 4ae:	80 e9       	ldi	r24, 0x90	; 144
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b6:	61 50       	subi	r22, 0x01	; 1
 4b8:	71 09       	sbc	r23, r1
 4ba:	f6 cf       	rjmp	.-20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	7c d1       	rcall	.+760    	; 0x7ba <__fixunssfsi>
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	cb 01       	movw	r24, r22
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 4ce:	16 c0       	rjmp	.+44     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	4f e7       	ldi	r20, 0x7F	; 127
 4d6:	53 e4       	ldi	r21, 0x43	; 67
 4d8:	c5 01       	movw	r24, r10
 4da:	b4 01       	movw	r22, r8
 4dc:	4c d2       	rcall	.+1176   	; 0x976 <__gesf2>
 4de:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 4e0:	3c f4       	brge	.+14     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e2:	c3 01       	movw	r24, r6
 4e4:	b2 01       	movw	r22, r4
 4e6:	69 d1       	rcall	.+722    	; 0x7ba <__fixunssfsi>
 4e8:	cb 01       	movw	r24, r22
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f0:	c5 01       	movw	r24, r10
 4f2:	b4 01       	movw	r22, r8
 4f4:	62 d1       	rcall	.+708    	; 0x7ba <__fixunssfsi>
 4f6:	16 2f       	mov	r17, r22
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 4fa:	11 e0       	ldi	r17, 0x01	; 1
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 4fc:	81 2f       	mov	r24, r17
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		dist = getdist();
 502:	c8 de       	rcall	.-624    	; 0x294 <_Z7getdistv>
 504:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 508:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 50c:	21 96       	adiw	r28, 0x01	; 1
}

void beep(){
	dist = getdist();
	if(dist>0) tone();
	for(int i=0; i<100;i++){
 50e:	63 cf       	rjmp	.-314    	; 0x3d6 <_Z4beepv+0x34>
 510:	df 91       	pop	r29
		SPK |= 0;
		_delay_us(dist*dist -6*dist + 9);
		dist = getdist();
		
	}
}
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	9f 90       	pop	r9
 524:	8f 90       	pop	r8
 526:	7f 90       	pop	r7
 528:	6f 90       	pop	r6
 52a:	5f 90       	pop	r5
 52c:	4f 90       	pop	r4
 52e:	08 95       	ret

00000530 <_Z10initializev>:
 530:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
}

void initialize(){
	DDRC = 0xff; DDRG = 0x0f;	// FND
 532:	84 bb       	out	0x14, r24	; 20
 534:	8f e0       	ldi	r24, 0x0F	; 15
 536:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	DDRA |= (1 << LED);			// LED
 53a:	8a b3       	in	r24, 0x1a	; 26
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	8a bb       	out	0x1a, r24	; 26
	
	DDRD  |= (1 << BUTTON);		// BUTTON
 540:	81 b3       	in	r24, 0x11	; 17
 542:	81 60       	ori	r24, 0x01	; 1
 544:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PORTD0);		// 내부 Pull-Up
 546:	82 b3       	in	r24, 0x12	; 18
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	82 bb       	out	0x12, r24	; 18
	EICRA |= (1 << ISC01);		// 하강 에지
 54c:	ea e6       	ldi	r30, 0x6A	; 106
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	82 60       	ori	r24, 0x02	; 2
 554:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);		// EI 인터럽트 활성
 556:	89 b7       	in	r24, 0x39	; 57
 558:	81 60       	ori	r24, 0x01	; 1
 55a:	89 bf       	out	0x39, r24	; 57
	
	DDRE |= (1 << TRIG);		// TRIG핀 출력
 55c:	82 b1       	in	r24, 0x02	; 2
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	82 b9       	out	0x02, r24	; 2
	DDRE &= ~(1 << ECHO);		// ECHO핀 입력
 562:	82 b1       	in	r24, 0x02	; 2
 564:	8f 77       	andi	r24, 0x7F	; 127
 566:	82 b9       	out	0x02, r24	; 2
	
	TCCR0 |= (1 << CS01);		//	Prescale 8 -> 0.5us
 568:	83 b7       	in	r24, 0x33	; 51
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);		//  Interrupt Enable
 56e:	87 b7       	in	r24, 0x37	; 55
 570:	81 60       	ori	r24, 0x01	; 1
 572:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 254; 				//	0.5us x (256 - 254) = 1us
 574:	8e ef       	ldi	r24, 0xFE	; 254
 576:	82 bf       	out	0x32, r24	; 50
	sei();
 578:	78 94       	sei
 57a:	08 95       	ret

0000057c <main>:
//


int main(void)
{
	DDRB |= 1;
 57c:	87 b3       	in	r24, 0x17	; 23
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	87 bb       	out	0x17, r24	; 23
	initialize();
 582:	d6 df       	rcall	.-84     	; 0x530 <_Z10initializev>
	while (1)
	{
		switch (curState){
 584:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <curState>
 588:	88 23       	and	r24, r24
 58a:	19 f0       	breq	.+6      	; 0x592 <main+0x16>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	31 f0       	breq	.+12     	; 0x59c <main+0x20>
 590:	f9 cf       	rjmp	.-14     	; 0x584 <main+0x8>
			case RUN:	// RUN 상태이면 LED를 켜고 초음파 센서로 거리를 측정하여 FND에 표시한다.
			PORTA |= (1 << LED);
 592:	8b b3       	in	r24, 0x1b	; 27
 594:	81 60       	ori	r24, 0x01	; 1
			
			beep();
 596:	8b bb       	out	0x1b, r24	; 27
 598:	04 df       	rcall	.-504    	; 0x3a2 <_Z4beepv>
						
			break;
 59a:	f4 cf       	rjmp	.-24     	; 0x584 <main+0x8>
			
			case PAUSE:		// PAUSE 상태이면 FND와 LED를 끄고 측정을 멈춘다.
			PORTA &= ~(1 << LED);
 59c:	8b b3       	in	r24, 0x1b	; 27
 59e:	8e 7f       	andi	r24, 0xFE	; 254
 5a0:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0;
 5a2:	15 ba       	out	0x15, r1	; 21
			PORTG = 0;
 5a4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			break;
 5a8:	ed cf       	rjmp	.-38     	; 0x584 <main+0x8>

000005aa <__vector_1>:
	TIMSK |= (1 << TOIE0);		//  Interrupt Enable
	TCNT0 = 254; 				//	0.5us x (256 - 254) = 1us
	sei();
}

ISR(INT0_vect) {				// 버튼이 눌릴 때마다 상태를 바꾼다.
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	8f 93       	push	r24
	switch (curState){
 5b6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <curState>
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <__vector_1+0x1a>
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	29 f0       	breq	.+10     	; 0x5cc <__vector_1+0x22>
 5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <__vector_1+0x26>
		case RUN:
		curState = PAUSE;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <curState>
		break;
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__vector_1+0x26>
		case PAUSE:
		curState = RUN;
 5cc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <curState>
		break;
	}
}
 5d0:	8f 91       	pop	r24
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__vector_16>:

ISR(TIMER0_OVF_vect) {
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25
	dt++;
 5ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dt>
 5ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <dt+0x1>
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <dt+0x1>
 5f8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <dt>
	TCNT0 = 254;				// 0.5us x (256 - 254) = 1us
 5fc:	8e ef       	ldi	r24, 0xFE	; 254
 5fe:	82 bf       	out	0x32, r24	; 50
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__subsf3>:
 60e:	50 58       	subi	r21, 0x80	; 128

00000610 <__addsf3>:
 610:	bb 27       	eor	r27, r27
 612:	aa 27       	eor	r26, r26
 614:	0e d0       	rcall	.+28     	; 0x632 <__addsf3x>
 616:	75 c1       	rjmp	.+746    	; 0x902 <__fp_round>
 618:	66 d1       	rcall	.+716    	; 0x8e6 <__fp_pscA>
 61a:	30 f0       	brcs	.+12     	; 0x628 <__addsf3+0x18>
 61c:	6b d1       	rcall	.+726    	; 0x8f4 <__fp_pscB>
 61e:	20 f0       	brcs	.+8      	; 0x628 <__addsf3+0x18>
 620:	31 f4       	brne	.+12     	; 0x62e <__addsf3+0x1e>
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	11 f4       	brne	.+4      	; 0x62a <__addsf3+0x1a>
 626:	1e f4       	brtc	.+6      	; 0x62e <__addsf3+0x1e>
 628:	5b c1       	rjmp	.+694    	; 0x8e0 <__fp_nan>
 62a:	0e f4       	brtc	.+2      	; 0x62e <__addsf3+0x1e>
 62c:	e0 95       	com	r30
 62e:	e7 fb       	bst	r30, 7
 630:	51 c1       	rjmp	.+674    	; 0x8d4 <__fp_inf>

00000632 <__addsf3x>:
 632:	e9 2f       	mov	r30, r25
 634:	77 d1       	rcall	.+750    	; 0x924 <__fp_split3>
 636:	80 f3       	brcs	.-32     	; 0x618 <__addsf3+0x8>
 638:	ba 17       	cp	r27, r26
 63a:	62 07       	cpc	r22, r18
 63c:	73 07       	cpc	r23, r19
 63e:	84 07       	cpc	r24, r20
 640:	95 07       	cpc	r25, r21
 642:	18 f0       	brcs	.+6      	; 0x64a <__addsf3x+0x18>
 644:	71 f4       	brne	.+28     	; 0x662 <__addsf3x+0x30>
 646:	9e f5       	brtc	.+102    	; 0x6ae <__addsf3x+0x7c>
 648:	8f c1       	rjmp	.+798    	; 0x968 <__fp_zero>
 64a:	0e f4       	brtc	.+2      	; 0x64e <__addsf3x+0x1c>
 64c:	e0 95       	com	r30
 64e:	0b 2e       	mov	r0, r27
 650:	ba 2f       	mov	r27, r26
 652:	a0 2d       	mov	r26, r0
 654:	0b 01       	movw	r0, r22
 656:	b9 01       	movw	r22, r18
 658:	90 01       	movw	r18, r0
 65a:	0c 01       	movw	r0, r24
 65c:	ca 01       	movw	r24, r20
 65e:	a0 01       	movw	r20, r0
 660:	11 24       	eor	r1, r1
 662:	ff 27       	eor	r31, r31
 664:	59 1b       	sub	r21, r25
 666:	99 f0       	breq	.+38     	; 0x68e <__addsf3x+0x5c>
 668:	59 3f       	cpi	r21, 0xF9	; 249
 66a:	50 f4       	brcc	.+20     	; 0x680 <__addsf3x+0x4e>
 66c:	50 3e       	cpi	r21, 0xE0	; 224
 66e:	68 f1       	brcs	.+90     	; 0x6ca <__addsf3x+0x98>
 670:	1a 16       	cp	r1, r26
 672:	f0 40       	sbci	r31, 0x00	; 0
 674:	a2 2f       	mov	r26, r18
 676:	23 2f       	mov	r18, r19
 678:	34 2f       	mov	r19, r20
 67a:	44 27       	eor	r20, r20
 67c:	58 5f       	subi	r21, 0xF8	; 248
 67e:	f3 cf       	rjmp	.-26     	; 0x666 <__addsf3x+0x34>
 680:	46 95       	lsr	r20
 682:	37 95       	ror	r19
 684:	27 95       	ror	r18
 686:	a7 95       	ror	r26
 688:	f0 40       	sbci	r31, 0x00	; 0
 68a:	53 95       	inc	r21
 68c:	c9 f7       	brne	.-14     	; 0x680 <__addsf3x+0x4e>
 68e:	7e f4       	brtc	.+30     	; 0x6ae <__addsf3x+0x7c>
 690:	1f 16       	cp	r1, r31
 692:	ba 0b       	sbc	r27, r26
 694:	62 0b       	sbc	r22, r18
 696:	73 0b       	sbc	r23, r19
 698:	84 0b       	sbc	r24, r20
 69a:	ba f0       	brmi	.+46     	; 0x6ca <__addsf3x+0x98>
 69c:	91 50       	subi	r25, 0x01	; 1
 69e:	a1 f0       	breq	.+40     	; 0x6c8 <__addsf3x+0x96>
 6a0:	ff 0f       	add	r31, r31
 6a2:	bb 1f       	adc	r27, r27
 6a4:	66 1f       	adc	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	c2 f7       	brpl	.-16     	; 0x69c <__addsf3x+0x6a>
 6ac:	0e c0       	rjmp	.+28     	; 0x6ca <__addsf3x+0x98>
 6ae:	ba 0f       	add	r27, r26
 6b0:	62 1f       	adc	r22, r18
 6b2:	73 1f       	adc	r23, r19
 6b4:	84 1f       	adc	r24, r20
 6b6:	48 f4       	brcc	.+18     	; 0x6ca <__addsf3x+0x98>
 6b8:	87 95       	ror	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b7 95       	ror	r27
 6c0:	f7 95       	ror	r31
 6c2:	9e 3f       	cpi	r25, 0xFE	; 254
 6c4:	08 f0       	brcs	.+2      	; 0x6c8 <__addsf3x+0x96>
 6c6:	b3 cf       	rjmp	.-154    	; 0x62e <__addsf3+0x1e>
 6c8:	93 95       	inc	r25
 6ca:	88 0f       	add	r24, r24
 6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__addsf3x+0x9e>
 6ce:	99 27       	eor	r25, r25
 6d0:	ee 0f       	add	r30, r30
 6d2:	97 95       	ror	r25
 6d4:	87 95       	ror	r24
 6d6:	08 95       	ret

000006d8 <__cmpsf2>:
 6d8:	d9 d0       	rcall	.+434    	; 0x88c <__fp_cmp>
 6da:	08 f4       	brcc	.+2      	; 0x6de <__cmpsf2+0x6>
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	08 95       	ret

000006e0 <__divsf3>:
 6e0:	0c d0       	rcall	.+24     	; 0x6fa <__divsf3x>
 6e2:	0f c1       	rjmp	.+542    	; 0x902 <__fp_round>
 6e4:	07 d1       	rcall	.+526    	; 0x8f4 <__fp_pscB>
 6e6:	40 f0       	brcs	.+16     	; 0x6f8 <__divsf3+0x18>
 6e8:	fe d0       	rcall	.+508    	; 0x8e6 <__fp_pscA>
 6ea:	30 f0       	brcs	.+12     	; 0x6f8 <__divsf3+0x18>
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <__divsf3+0x16>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <__divsf3+0x18>
 6f2:	f0 c0       	rjmp	.+480    	; 0x8d4 <__fp_inf>
 6f4:	51 11       	cpse	r21, r1
 6f6:	39 c1       	rjmp	.+626    	; 0x96a <__fp_szero>
 6f8:	f3 c0       	rjmp	.+486    	; 0x8e0 <__fp_nan>

000006fa <__divsf3x>:
 6fa:	14 d1       	rcall	.+552    	; 0x924 <__fp_split3>
 6fc:	98 f3       	brcs	.-26     	; 0x6e4 <__divsf3+0x4>

000006fe <__divsf3_pse>:
 6fe:	99 23       	and	r25, r25
 700:	c9 f3       	breq	.-14     	; 0x6f4 <__divsf3+0x14>
 702:	55 23       	and	r21, r21
 704:	b1 f3       	breq	.-20     	; 0x6f2 <__divsf3+0x12>
 706:	95 1b       	sub	r25, r21
 708:	55 0b       	sbc	r21, r21
 70a:	bb 27       	eor	r27, r27
 70c:	aa 27       	eor	r26, r26
 70e:	62 17       	cp	r22, r18
 710:	73 07       	cpc	r23, r19
 712:	84 07       	cpc	r24, r20
 714:	38 f0       	brcs	.+14     	; 0x724 <__divsf3_pse+0x26>
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	22 0f       	add	r18, r18
 71c:	33 1f       	adc	r19, r19
 71e:	44 1f       	adc	r20, r20
 720:	aa 1f       	adc	r26, r26
 722:	a9 f3       	breq	.-22     	; 0x70e <__divsf3_pse+0x10>
 724:	33 d0       	rcall	.+102    	; 0x78c <__divsf3_pse+0x8e>
 726:	0e 2e       	mov	r0, r30
 728:	3a f0       	brmi	.+14     	; 0x738 <__divsf3_pse+0x3a>
 72a:	e0 e8       	ldi	r30, 0x80	; 128
 72c:	30 d0       	rcall	.+96     	; 0x78e <__divsf3_pse+0x90>
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	e6 95       	lsr	r30
 734:	00 1c       	adc	r0, r0
 736:	ca f7       	brpl	.-14     	; 0x72a <__divsf3_pse+0x2c>
 738:	29 d0       	rcall	.+82     	; 0x78c <__divsf3_pse+0x8e>
 73a:	fe 2f       	mov	r31, r30
 73c:	27 d0       	rcall	.+78     	; 0x78c <__divsf3_pse+0x8e>
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	bb 1f       	adc	r27, r27
 746:	26 17       	cp	r18, r22
 748:	37 07       	cpc	r19, r23
 74a:	48 07       	cpc	r20, r24
 74c:	ab 07       	cpc	r26, r27
 74e:	b0 e8       	ldi	r27, 0x80	; 128
 750:	09 f0       	breq	.+2      	; 0x754 <__divsf3_pse+0x56>
 752:	bb 0b       	sbc	r27, r27
 754:	80 2d       	mov	r24, r0
 756:	bf 01       	movw	r22, r30
 758:	ff 27       	eor	r31, r31
 75a:	93 58       	subi	r25, 0x83	; 131
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	2a f0       	brmi	.+10     	; 0x76a <__divsf3_pse+0x6c>
 760:	9e 3f       	cpi	r25, 0xFE	; 254
 762:	51 05       	cpc	r21, r1
 764:	68 f0       	brcs	.+26     	; 0x780 <__divsf3_pse+0x82>
 766:	b6 c0       	rjmp	.+364    	; 0x8d4 <__fp_inf>
 768:	00 c1       	rjmp	.+512    	; 0x96a <__fp_szero>
 76a:	5f 3f       	cpi	r21, 0xFF	; 255
 76c:	ec f3       	brlt	.-6      	; 0x768 <__divsf3_pse+0x6a>
 76e:	98 3e       	cpi	r25, 0xE8	; 232
 770:	dc f3       	brlt	.-10     	; 0x768 <__divsf3_pse+0x6a>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f7 95       	ror	r31
 77c:	9f 5f       	subi	r25, 0xFF	; 255
 77e:	c9 f7       	brne	.-14     	; 0x772 <__divsf3_pse+0x74>
 780:	88 0f       	add	r24, r24
 782:	91 1d       	adc	r25, r1
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	97 f9       	bld	r25, 7
 78a:	08 95       	ret
 78c:	e1 e0       	ldi	r30, 0x01	; 1
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	bb 1f       	adc	r27, r27
 796:	62 17       	cp	r22, r18
 798:	73 07       	cpc	r23, r19
 79a:	84 07       	cpc	r24, r20
 79c:	ba 07       	cpc	r27, r26
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <__divsf3_pse+0xaa>
 7a0:	62 1b       	sub	r22, r18
 7a2:	73 0b       	sbc	r23, r19
 7a4:	84 0b       	sbc	r24, r20
 7a6:	ba 0b       	sbc	r27, r26
 7a8:	ee 1f       	adc	r30, r30
 7aa:	88 f7       	brcc	.-30     	; 0x78e <__divsf3_pse+0x90>
 7ac:	e0 95       	com	r30
 7ae:	08 95       	ret

000007b0 <__fixsfsi>:
 7b0:	04 d0       	rcall	.+8      	; 0x7ba <__fixunssfsi>
 7b2:	68 94       	set
 7b4:	b1 11       	cpse	r27, r1
 7b6:	d9 c0       	rjmp	.+434    	; 0x96a <__fp_szero>
 7b8:	08 95       	ret

000007ba <__fixunssfsi>:
 7ba:	bc d0       	rcall	.+376    	; 0x934 <__fp_splitA>
 7bc:	88 f0       	brcs	.+34     	; 0x7e0 <__fixunssfsi+0x26>
 7be:	9f 57       	subi	r25, 0x7F	; 127
 7c0:	90 f0       	brcs	.+36     	; 0x7e6 <__fixunssfsi+0x2c>
 7c2:	b9 2f       	mov	r27, r25
 7c4:	99 27       	eor	r25, r25
 7c6:	b7 51       	subi	r27, 0x17	; 23
 7c8:	a0 f0       	brcs	.+40     	; 0x7f2 <__fixunssfsi+0x38>
 7ca:	d1 f0       	breq	.+52     	; 0x800 <__fixunssfsi+0x46>
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	1a f0       	brmi	.+6      	; 0x7dc <__fixunssfsi+0x22>
 7d6:	ba 95       	dec	r27
 7d8:	c9 f7       	brne	.-14     	; 0x7cc <__fixunssfsi+0x12>
 7da:	12 c0       	rjmp	.+36     	; 0x800 <__fixunssfsi+0x46>
 7dc:	b1 30       	cpi	r27, 0x01	; 1
 7de:	81 f0       	breq	.+32     	; 0x800 <__fixunssfsi+0x46>
 7e0:	c3 d0       	rcall	.+390    	; 0x968 <__fp_zero>
 7e2:	b1 e0       	ldi	r27, 0x01	; 1
 7e4:	08 95       	ret
 7e6:	c0 c0       	rjmp	.+384    	; 0x968 <__fp_zero>
 7e8:	67 2f       	mov	r22, r23
 7ea:	78 2f       	mov	r23, r24
 7ec:	88 27       	eor	r24, r24
 7ee:	b8 5f       	subi	r27, 0xF8	; 248
 7f0:	39 f0       	breq	.+14     	; 0x800 <__fixunssfsi+0x46>
 7f2:	b9 3f       	cpi	r27, 0xF9	; 249
 7f4:	cc f3       	brlt	.-14     	; 0x7e8 <__fixunssfsi+0x2e>
 7f6:	86 95       	lsr	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	b3 95       	inc	r27
 7fe:	d9 f7       	brne	.-10     	; 0x7f6 <__fixunssfsi+0x3c>
 800:	3e f4       	brtc	.+14     	; 0x810 <__fixunssfsi+0x56>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <__floatunsisf>:
 812:	e8 94       	clt
 814:	09 c0       	rjmp	.+18     	; 0x828 <__floatsisf+0x12>

00000816 <__floatsisf>:
 816:	97 fb       	bst	r25, 7
 818:	3e f4       	brtc	.+14     	; 0x828 <__floatsisf+0x12>
 81a:	90 95       	com	r25
 81c:	80 95       	com	r24
 81e:	70 95       	com	r23
 820:	61 95       	neg	r22
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	99 23       	and	r25, r25
 82a:	a9 f0       	breq	.+42     	; 0x856 <__floatsisf+0x40>
 82c:	f9 2f       	mov	r31, r25
 82e:	96 e9       	ldi	r25, 0x96	; 150
 830:	bb 27       	eor	r27, r27
 832:	93 95       	inc	r25
 834:	f6 95       	lsr	r31
 836:	87 95       	ror	r24
 838:	77 95       	ror	r23
 83a:	67 95       	ror	r22
 83c:	b7 95       	ror	r27
 83e:	f1 11       	cpse	r31, r1
 840:	f8 cf       	rjmp	.-16     	; 0x832 <__floatsisf+0x1c>
 842:	fa f4       	brpl	.+62     	; 0x882 <__floatsisf+0x6c>
 844:	bb 0f       	add	r27, r27
 846:	11 f4       	brne	.+4      	; 0x84c <__floatsisf+0x36>
 848:	60 ff       	sbrs	r22, 0
 84a:	1b c0       	rjmp	.+54     	; 0x882 <__floatsisf+0x6c>
 84c:	6f 5f       	subi	r22, 0xFF	; 255
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	16 c0       	rjmp	.+44     	; 0x882 <__floatsisf+0x6c>
 856:	88 23       	and	r24, r24
 858:	11 f0       	breq	.+4      	; 0x85e <__floatsisf+0x48>
 85a:	96 e9       	ldi	r25, 0x96	; 150
 85c:	11 c0       	rjmp	.+34     	; 0x880 <__floatsisf+0x6a>
 85e:	77 23       	and	r23, r23
 860:	21 f0       	breq	.+8      	; 0x86a <__floatsisf+0x54>
 862:	9e e8       	ldi	r25, 0x8E	; 142
 864:	87 2f       	mov	r24, r23
 866:	76 2f       	mov	r23, r22
 868:	05 c0       	rjmp	.+10     	; 0x874 <__floatsisf+0x5e>
 86a:	66 23       	and	r22, r22
 86c:	71 f0       	breq	.+28     	; 0x88a <__floatsisf+0x74>
 86e:	96 e8       	ldi	r25, 0x86	; 134
 870:	86 2f       	mov	r24, r22
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	2a f0       	brmi	.+10     	; 0x882 <__floatsisf+0x6c>
 878:	9a 95       	dec	r25
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	da f7       	brpl	.-10     	; 0x878 <__floatsisf+0x62>
 882:	88 0f       	add	r24, r24
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	97 f9       	bld	r25, 7
 88a:	08 95       	ret

0000088c <__fp_cmp>:
 88c:	99 0f       	add	r25, r25
 88e:	00 08       	sbc	r0, r0
 890:	55 0f       	add	r21, r21
 892:	aa 0b       	sbc	r26, r26
 894:	e0 e8       	ldi	r30, 0x80	; 128
 896:	fe ef       	ldi	r31, 0xFE	; 254
 898:	16 16       	cp	r1, r22
 89a:	17 06       	cpc	r1, r23
 89c:	e8 07       	cpc	r30, r24
 89e:	f9 07       	cpc	r31, r25
 8a0:	c0 f0       	brcs	.+48     	; 0x8d2 <__fp_cmp+0x46>
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	e4 07       	cpc	r30, r20
 8a8:	f5 07       	cpc	r31, r21
 8aa:	98 f0       	brcs	.+38     	; 0x8d2 <__fp_cmp+0x46>
 8ac:	62 1b       	sub	r22, r18
 8ae:	73 0b       	sbc	r23, r19
 8b0:	84 0b       	sbc	r24, r20
 8b2:	95 0b       	sbc	r25, r21
 8b4:	39 f4       	brne	.+14     	; 0x8c4 <__fp_cmp+0x38>
 8b6:	0a 26       	eor	r0, r26
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_cmp+0x46>
 8ba:	23 2b       	or	r18, r19
 8bc:	24 2b       	or	r18, r20
 8be:	25 2b       	or	r18, r21
 8c0:	21 f4       	brne	.+8      	; 0x8ca <__fp_cmp+0x3e>
 8c2:	08 95       	ret
 8c4:	0a 26       	eor	r0, r26
 8c6:	09 f4       	brne	.+2      	; 0x8ca <__fp_cmp+0x3e>
 8c8:	a1 40       	sbci	r26, 0x01	; 1
 8ca:	a6 95       	lsr	r26
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	81 1d       	adc	r24, r1
 8d0:	81 1d       	adc	r24, r1
 8d2:	08 95       	ret

000008d4 <__fp_inf>:
 8d4:	97 f9       	bld	r25, 7
 8d6:	9f 67       	ori	r25, 0x7F	; 127
 8d8:	80 e8       	ldi	r24, 0x80	; 128
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	08 95       	ret

000008e0 <__fp_nan>:
 8e0:	9f ef       	ldi	r25, 0xFF	; 255
 8e2:	80 ec       	ldi	r24, 0xC0	; 192
 8e4:	08 95       	ret

000008e6 <__fp_pscA>:
 8e6:	00 24       	eor	r0, r0
 8e8:	0a 94       	dec	r0
 8ea:	16 16       	cp	r1, r22
 8ec:	17 06       	cpc	r1, r23
 8ee:	18 06       	cpc	r1, r24
 8f0:	09 06       	cpc	r0, r25
 8f2:	08 95       	ret

000008f4 <__fp_pscB>:
 8f4:	00 24       	eor	r0, r0
 8f6:	0a 94       	dec	r0
 8f8:	12 16       	cp	r1, r18
 8fa:	13 06       	cpc	r1, r19
 8fc:	14 06       	cpc	r1, r20
 8fe:	05 06       	cpc	r0, r21
 900:	08 95       	ret

00000902 <__fp_round>:
 902:	09 2e       	mov	r0, r25
 904:	03 94       	inc	r0
 906:	00 0c       	add	r0, r0
 908:	11 f4       	brne	.+4      	; 0x90e <__fp_round+0xc>
 90a:	88 23       	and	r24, r24
 90c:	52 f0       	brmi	.+20     	; 0x922 <__fp_round+0x20>
 90e:	bb 0f       	add	r27, r27
 910:	40 f4       	brcc	.+16     	; 0x922 <__fp_round+0x20>
 912:	bf 2b       	or	r27, r31
 914:	11 f4       	brne	.+4      	; 0x91a <__fp_round+0x18>
 916:	60 ff       	sbrs	r22, 0
 918:	04 c0       	rjmp	.+8      	; 0x922 <__fp_round+0x20>
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	08 95       	ret

00000924 <__fp_split3>:
 924:	57 fd       	sbrc	r21, 7
 926:	90 58       	subi	r25, 0x80	; 128
 928:	44 0f       	add	r20, r20
 92a:	55 1f       	adc	r21, r21
 92c:	59 f0       	breq	.+22     	; 0x944 <__fp_splitA+0x10>
 92e:	5f 3f       	cpi	r21, 0xFF	; 255
 930:	71 f0       	breq	.+28     	; 0x94e <__fp_splitA+0x1a>
 932:	47 95       	ror	r20

00000934 <__fp_splitA>:
 934:	88 0f       	add	r24, r24
 936:	97 fb       	bst	r25, 7
 938:	99 1f       	adc	r25, r25
 93a:	61 f0       	breq	.+24     	; 0x954 <__fp_splitA+0x20>
 93c:	9f 3f       	cpi	r25, 0xFF	; 255
 93e:	79 f0       	breq	.+30     	; 0x95e <__fp_splitA+0x2a>
 940:	87 95       	ror	r24
 942:	08 95       	ret
 944:	12 16       	cp	r1, r18
 946:	13 06       	cpc	r1, r19
 948:	14 06       	cpc	r1, r20
 94a:	55 1f       	adc	r21, r21
 94c:	f2 cf       	rjmp	.-28     	; 0x932 <__fp_split3+0xe>
 94e:	46 95       	lsr	r20
 950:	f1 df       	rcall	.-30     	; 0x934 <__fp_splitA>
 952:	08 c0       	rjmp	.+16     	; 0x964 <__fp_splitA+0x30>
 954:	16 16       	cp	r1, r22
 956:	17 06       	cpc	r1, r23
 958:	18 06       	cpc	r1, r24
 95a:	99 1f       	adc	r25, r25
 95c:	f1 cf       	rjmp	.-30     	; 0x940 <__fp_splitA+0xc>
 95e:	86 95       	lsr	r24
 960:	71 05       	cpc	r23, r1
 962:	61 05       	cpc	r22, r1
 964:	08 94       	sec
 966:	08 95       	ret

00000968 <__fp_zero>:
 968:	e8 94       	clt

0000096a <__fp_szero>:
 96a:	bb 27       	eor	r27, r27
 96c:	66 27       	eor	r22, r22
 96e:	77 27       	eor	r23, r23
 970:	cb 01       	movw	r24, r22
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret

00000976 <__gesf2>:
 976:	8a df       	rcall	.-236    	; 0x88c <__fp_cmp>
 978:	08 f4       	brcc	.+2      	; 0x97c <__gesf2+0x6>
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	08 95       	ret

0000097e <__mulsf3>:
 97e:	0b d0       	rcall	.+22     	; 0x996 <__mulsf3x>
 980:	c0 cf       	rjmp	.-128    	; 0x902 <__fp_round>
 982:	b1 df       	rcall	.-158    	; 0x8e6 <__fp_pscA>
 984:	28 f0       	brcs	.+10     	; 0x990 <__mulsf3+0x12>
 986:	b6 df       	rcall	.-148    	; 0x8f4 <__fp_pscB>
 988:	18 f0       	brcs	.+6      	; 0x990 <__mulsf3+0x12>
 98a:	95 23       	and	r25, r21
 98c:	09 f0       	breq	.+2      	; 0x990 <__mulsf3+0x12>
 98e:	a2 cf       	rjmp	.-188    	; 0x8d4 <__fp_inf>
 990:	a7 cf       	rjmp	.-178    	; 0x8e0 <__fp_nan>
 992:	11 24       	eor	r1, r1
 994:	ea cf       	rjmp	.-44     	; 0x96a <__fp_szero>

00000996 <__mulsf3x>:
 996:	c6 df       	rcall	.-116    	; 0x924 <__fp_split3>
 998:	a0 f3       	brcs	.-24     	; 0x982 <__mulsf3+0x4>

0000099a <__mulsf3_pse>:
 99a:	95 9f       	mul	r25, r21
 99c:	d1 f3       	breq	.-12     	; 0x992 <__mulsf3+0x14>
 99e:	95 0f       	add	r25, r21
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	55 1f       	adc	r21, r21
 9a4:	62 9f       	mul	r22, r18
 9a6:	f0 01       	movw	r30, r0
 9a8:	72 9f       	mul	r23, r18
 9aa:	bb 27       	eor	r27, r27
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	63 9f       	mul	r22, r19
 9b2:	aa 27       	eor	r26, r26
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	aa 1f       	adc	r26, r26
 9ba:	64 9f       	mul	r22, r20
 9bc:	66 27       	eor	r22, r22
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	66 1f       	adc	r22, r22
 9c4:	82 9f       	mul	r24, r18
 9c6:	22 27       	eor	r18, r18
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	73 9f       	mul	r23, r19
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	83 9f       	mul	r24, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	22 1f       	adc	r18, r18
 9de:	74 9f       	mul	r23, r20
 9e0:	33 27       	eor	r19, r19
 9e2:	a0 0d       	add	r26, r0
 9e4:	61 1d       	adc	r22, r1
 9e6:	23 1f       	adc	r18, r19
 9e8:	84 9f       	mul	r24, r20
 9ea:	60 0d       	add	r22, r0
 9ec:	21 1d       	adc	r18, r1
 9ee:	82 2f       	mov	r24, r18
 9f0:	76 2f       	mov	r23, r22
 9f2:	6a 2f       	mov	r22, r26
 9f4:	11 24       	eor	r1, r1
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	8a f0       	brmi	.+34     	; 0xa1e <__mulsf3_pse+0x84>
 9fc:	e1 f0       	breq	.+56     	; 0xa36 <__mulsf3_pse+0x9c>
 9fe:	88 23       	and	r24, r24
 a00:	4a f0       	brmi	.+18     	; 0xa14 <__mulsf3_pse+0x7a>
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	91 50       	subi	r25, 0x01	; 1
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__mulsf3_pse+0x64>
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	51 05       	cpc	r21, r1
 a18:	70 f0       	brcs	.+28     	; 0xa36 <__mulsf3_pse+0x9c>
 a1a:	5c cf       	rjmp	.-328    	; 0x8d4 <__fp_inf>
 a1c:	a6 cf       	rjmp	.-180    	; 0x96a <__fp_szero>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	ec f3       	brlt	.-6      	; 0xa1c <__mulsf3_pse+0x82>
 a22:	98 3e       	cpi	r25, 0xE8	; 232
 a24:	dc f3       	brlt	.-10     	; 0xa1c <__mulsf3_pse+0x82>
 a26:	86 95       	lsr	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b7 95       	ror	r27
 a2e:	f7 95       	ror	r31
 a30:	e7 95       	ror	r30
 a32:	9f 5f       	subi	r25, 0xFF	; 255
 a34:	c1 f7       	brne	.-16     	; 0xa26 <__mulsf3_pse+0x8c>
 a36:	fe 2b       	or	r31, r30
 a38:	88 0f       	add	r24, r24
 a3a:	91 1d       	adc	r25, r1
 a3c:	96 95       	lsr	r25
 a3e:	87 95       	ror	r24
 a40:	97 f9       	bld	r25, 7
 a42:	08 95       	ret

00000a44 <__umulhisi3>:
 a44:	a2 9f       	mul	r26, r18
 a46:	b0 01       	movw	r22, r0
 a48:	b3 9f       	mul	r27, r19
 a4a:	c0 01       	movw	r24, r0
 a4c:	a3 9f       	mul	r26, r19
 a4e:	70 0d       	add	r23, r0
 a50:	81 1d       	adc	r24, r1
 a52:	11 24       	eor	r1, r1
 a54:	91 1d       	adc	r25, r1
 a56:	b2 9f       	mul	r27, r18
 a58:	70 0d       	add	r23, r0
 a5a:	81 1d       	adc	r24, r1
 a5c:	11 24       	eor	r1, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	08 95       	ret

00000a62 <_exit>:
 a62:	f8 94       	cli

00000a64 <__stop_program>:
 a64:	ff cf       	rjmp	.-2      	; 0xa64 <__stop_program>
