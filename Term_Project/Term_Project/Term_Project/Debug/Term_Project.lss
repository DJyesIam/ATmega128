
Term_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010a  0080010a  00000904  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b15  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000458  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000278  00000000  00000000  00002786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000029fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	d6 c1       	rjmp	.+940    	; 0x3b2 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	d1 c1       	rjmp	.+930    	; 0x3e4 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f6 d0       	rcall	.+492    	; 0x2b0 <main>
  c4:	ce c3       	rjmp	.+1948   	; 0x862 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <disp_digit>:
		}
	}
}

void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
  c8:	e8 2f       	mov	r30, r24
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	80 81       	ld	r24, Z
  d2:	85 bb       	out	0x15, r24	; 21
	PORTG = 0x01 << d;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <disp_digit+0x16>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <disp_digit+0x12>
  e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
  e6:	08 95       	ret

000000e8 <disp_FND>:
}

void disp_FND(unsigned int num){
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <disp_FND+0xa>
  f2:	00 d0       	rcall	.+0      	; 0xf4 <disp_FND+0xc>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	fc 01       	movw	r30, r24
	unsigned char fnd[4];
	
	fnd[0] = (num / 1000) % 10;		// 천의 자리 수
  fa:	9c 01       	movw	r18, r24
  fc:	36 95       	lsr	r19
  fe:	27 95       	ror	r18
 100:	36 95       	lsr	r19
 102:	27 95       	ror	r18
 104:	36 95       	lsr	r19
 106:	27 95       	ror	r18
 108:	a5 ec       	ldi	r26, 0xC5	; 197
 10a:	b0 e2       	ldi	r27, 0x20	; 32
 10c:	9b d3       	rcall	.+1846   	; 0x844 <__umulhisi3>
 10e:	ac 01       	movw	r20, r24
 110:	52 95       	swap	r21
 112:	42 95       	swap	r20
 114:	4f 70       	andi	r20, 0x0F	; 15
 116:	45 27       	eor	r20, r21
 118:	5f 70       	andi	r21, 0x0F	; 15
 11a:	45 27       	eor	r20, r21
 11c:	9a 01       	movw	r18, r20
 11e:	ad ec       	ldi	r26, 0xCD	; 205
 120:	bc ec       	ldi	r27, 0xCC	; 204
 122:	90 d3       	rcall	.+1824   	; 0x844 <__umulhisi3>
 124:	96 95       	lsr	r25
 126:	87 95       	ror	r24
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	9c 01       	movw	r18, r24
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	82 0f       	add	r24, r18
 144:	93 1f       	adc	r25, r19
 146:	9a 01       	movw	r18, r20
 148:	28 1b       	sub	r18, r24
 14a:	39 0b       	sbc	r19, r25
 14c:	29 83       	std	Y+1, r18	; 0x01
	fnd[1] = (num / 100)  % 10;		// 백의 자리 수
 14e:	9f 01       	movw	r18, r30
 150:	36 95       	lsr	r19
 152:	27 95       	ror	r18
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	ab e7       	ldi	r26, 0x7B	; 123
 15a:	b4 e1       	ldi	r27, 0x14	; 20
 15c:	73 d3       	rcall	.+1766   	; 0x844 <__umulhisi3>
 15e:	ac 01       	movw	r20, r24
 160:	56 95       	lsr	r21
 162:	47 95       	ror	r20
 164:	9a 01       	movw	r18, r20
 166:	ad ec       	ldi	r26, 0xCD	; 205
 168:	bc ec       	ldi	r27, 0xCC	; 204
 16a:	6c d3       	rcall	.+1752   	; 0x844 <__umulhisi3>
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	9c 01       	movw	r18, r24
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	9a 01       	movw	r18, r20
 190:	28 1b       	sub	r18, r24
 192:	39 0b       	sbc	r19, r25
	fnd[2] = (num / 10)   % 10;		// 십의 자리 수
 194:	2a 83       	std	Y+2, r18	; 0x02
 196:	9f 01       	movw	r18, r30
 198:	55 d3       	rcall	.+1706   	; 0x844 <__umulhisi3>
 19a:	ac 01       	movw	r20, r24
 19c:	56 95       	lsr	r21
 19e:	47 95       	ror	r20
 1a0:	56 95       	lsr	r21
 1a2:	47 95       	ror	r20
 1a4:	56 95       	lsr	r21
 1a6:	47 95       	ror	r20
 1a8:	9a 01       	movw	r18, r20
 1aa:	4c d3       	rcall	.+1688   	; 0x844 <__umulhisi3>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	9c 01       	movw	r18, r24
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	9a 01       	movw	r18, r20
 1d0:	28 1b       	sub	r18, r24
 1d2:	39 0b       	sbc	r19, r25
 1d4:	2b 83       	std	Y+3, r18	; 0x03
	fnd[3] = (num / 1)    % 10;		// 일의 자리 수
 1d6:	ca 01       	movw	r24, r20
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	44 0f       	add	r20, r20
 1de:	55 1f       	adc	r21, r21
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	48 0f       	add	r20, r24
 1ea:	59 1f       	adc	r21, r25
 1ec:	e4 1b       	sub	r30, r20
 1ee:	f5 0b       	sbc	r31, r21
 1f0:	ec 83       	std	Y+4, r30	; 0x04
	
	for (int i = 0; i < 4; i++){	// 유효한 값이 있는 자릿수만 출력한다.
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	2a c0       	rjmp	.+84     	; 0x24c <disp_FND+0x164>
		if (fnd[i] == 0){
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e0 0f       	add	r30, r16
 202:	f1 1f       	adc	r31, r17
 204:	80 81       	ld	r24, Z
 206:	81 11       	cpse	r24, r1
 208:	17 c0       	rjmp	.+46     	; 0x238 <disp_FND+0x150>
			if (i == 0 || fnd[i-1] == 0) continue;
 20a:	01 15       	cp	r16, r1
 20c:	11 05       	cpc	r17, r1
 20e:	e1 f0       	breq	.+56     	; 0x248 <disp_FND+0x160>
 210:	f8 01       	movw	r30, r16
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	2c 0f       	add	r18, r28
 21a:	3d 1f       	adc	r19, r29
 21c:	e2 0f       	add	r30, r18
 21e:	f3 1f       	adc	r31, r19
 220:	90 81       	ld	r25, Z
 222:	99 23       	and	r25, r25
			else{
				disp_digit(fnd[i], i);
 224:	89 f0       	breq	.+34     	; 0x248 <disp_FND+0x160>
 226:	60 2f       	mov	r22, r16
 228:	4f df       	rcall	.-354    	; 0xc8 <disp_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9f e1       	ldi	r25, 0x1F	; 31
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <disp_FND+0x146>
 232:	00 c0       	rjmp	.+0      	; 0x234 <disp_FND+0x14c>
 234:	00 00       	nop
				_delay_ms(2);
			}
		}
		else{
			disp_digit(fnd[i], i);
 236:	08 c0       	rjmp	.+16     	; 0x248 <disp_FND+0x160>
 238:	60 2f       	mov	r22, r16
 23a:	46 df       	rcall	.-372    	; 0xc8 <disp_digit>
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	9f e1       	ldi	r25, 0x1F	; 31
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <disp_FND+0x158>
 244:	00 c0       	rjmp	.+0      	; 0x246 <disp_FND+0x15e>
 246:	00 00       	nop
	fnd[0] = (num / 1000) % 10;		// 천의 자리 수
	fnd[1] = (num / 100)  % 10;		// 백의 자리 수
	fnd[2] = (num / 10)   % 10;		// 십의 자리 수
	fnd[3] = (num / 1)    % 10;		// 일의 자리 수
	
	for (int i = 0; i < 4; i++){	// 유효한 값이 있는 자릿수만 출력한다.
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	04 30       	cpi	r16, 0x04	; 4
 24e:	11 05       	cpc	r17, r1
 250:	9c f2       	brlt	.-90     	; 0x1f8 <disp_FND+0x110>
		else{
			disp_digit(fnd[i], i);
			_delay_ms(2);
		}
	}
}
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <initialize>:

void initialize(){
	DDRC = 0xff; DDRG = 0x0f;	// FND
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	84 bb       	out	0x14, r24	; 20
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	DDRA |= (1 << LED);			// LED
 26e:	8a b3       	in	r24, 0x1a	; 26
 270:	81 60       	ori	r24, 0x01	; 1
 272:	8a bb       	out	0x1a, r24	; 26
	
	DDRD  |= (1 << BUTTON);		// BUTTON
 274:	81 b3       	in	r24, 0x11	; 17
 276:	81 60       	ori	r24, 0x01	; 1
 278:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PORTD0);		// 내부 Pull-Up
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	82 bb       	out	0x12, r24	; 18
	EICRA |= (1 << ISC01);		// 하강 에지
 280:	ea e6       	ldi	r30, 0x6A	; 106
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	82 60       	ori	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);		// EI 인터럽트 활성
 28a:	89 b7       	in	r24, 0x39	; 57
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	89 bf       	out	0x39, r24	; 57
	
	DDRE |= (1 << TRIG);		// TRIG핀 출력
 290:	82 b1       	in	r24, 0x02	; 2
 292:	80 64       	ori	r24, 0x40	; 64
 294:	82 b9       	out	0x02, r24	; 2
	DDRE &= ~(1 << ECHO);		// ECHO핀 입력
 296:	82 b1       	in	r24, 0x02	; 2
 298:	8f 77       	andi	r24, 0x7F	; 127
 29a:	82 b9       	out	0x02, r24	; 2
	
	TCCR0 |= (1 << CS01);		//	Prescale 8 -> 0.5us
 29c:	83 b7       	in	r24, 0x33	; 51
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);		//  Interrupt Enable
 2a2:	87 b7       	in	r24, 0x37	; 55
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 254; 				//	0.5us x (256 - 254) = 1us
 2a8:	8e ef       	ldi	r24, 0xFE	; 254
 2aa:	82 bf       	out	0x32, r24	; 50
	sei();
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <main>:
double distance;				// 센서로 측정한 거리	(단위 : cm)
double filtered_distance;		// Low Pass Filter로 필터링한 거리 (단위 : cm)

int main(void)
{
	initialize();
 2b0:	d9 df       	rcall	.-78     	; 0x264 <initialize>
	while (1)
	{
		switch (curState){
 2b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <curState>
 2b6:	88 23       	and	r24, r24
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <main+0x12>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0x10>
 2be:	72 c0       	rjmp	.+228    	; 0x3a4 <main+0xf4>
 2c0:	f8 cf       	rjmp	.-16     	; 0x2b2 <main+0x2>
			case RUN:	// RUN 상태이면 LED를 켜고 초음파 센서로 거리를 측정하여 FND에 표시한다.
			PORTA |= (1 << LED);
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	8b bb       	out	0x1b, r24	; 27
			
			PORTE &= ~(1 << TRIG);	_delay_us(2);	// TRIG pin LOW
 2c8:	83 b1       	in	r24, 0x03	; 3
 2ca:	8f 7b       	andi	r24, 0xBF	; 191
 2cc:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x20>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x26>
			PORTE |=  (1 << TRIG);  _delay_us(10);	// TRIG pin HIGH
 2d6:	83 b1       	in	r24, 0x03	; 3
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	83 b9       	out	0x03, r24	; 3
 2dc:	85 e3       	ldi	r24, 0x35	; 53
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x2e>
 2e2:	00 00       	nop
			PORTE &= ~(1 << TRIG);					// TRIG pin LOW
 2e4:	83 b1       	in	r24, 0x03	; 3
 2e6:	8f 7b       	andi	r24, 0xBF	; 191
 2e8:	83 b9       	out	0x03, r24	; 3

			while(!(PINE & (1 << ECHO)));			// ECHO핀이 HIGH가 될 때까지 기다린다.
 2ea:	0f 9b       	sbis	0x01, 7	; 1
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <main+0x3a>

			dt = 0;
 2ee:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 2f2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			TCCR0 |= 1 << CS01;						// ECHO핀이 HIGH인 시간을 재기 시작한다.
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	83 bf       	out	0x33, r24	; 51
			while(PINE & (1 << ECHO));				// ECHO핀이 HIGH인 동안 기다린다.
 2fc:	0f 99       	sbic	0x01, 7	; 1
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <main+0x4c>
			TCCR0 = 0;								// 시간 측정이 끝나면 Timer를 끈다.
 300:	13 be       	out	0x33, r1	; 51
			
			distance = dt / 58.2 * 3;				// 거리 구하는 공식 (원래 뒤에 *3 은 없는 게 맞는데 거리가 이상하게 나와서 임의로 붙임)
 302:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 306:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	81 d1       	rcall	.+770    	; 0x612 <__floatunsisf>
 310:	2d ec       	ldi	r18, 0xCD	; 205
 312:	3c ec       	ldi	r19, 0xCC	; 204
 314:	48 e6       	ldi	r20, 0x68	; 104
 316:	52 e4       	ldi	r21, 0x42	; 66
 318:	e3 d0       	rcall	.+454    	; 0x4e0 <__divsf3>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e4       	ldi	r20, 0x40	; 64
 320:	50 e4       	ldi	r21, 0x40	; 64
 322:	09 d2       	rcall	.+1042   	; 0x736 <__mulsf3>
 324:	6b 01       	movw	r12, r22
 326:	7c 01       	movw	r14, r24
 328:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <distance>
 32c:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <distance+0x1>
 330:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <distance+0x2>
 334:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <distance+0x3>
			
			filtered_distance = 0.99 * filtered_distance + 0.01 * distance;	// Low Pass Filter로 거리를 필터링한다. (민감도 : 0.01)
 338:	24 ea       	ldi	r18, 0xA4	; 164
 33a:	30 e7       	ldi	r19, 0x70	; 112
 33c:	4d e7       	ldi	r20, 0x7D	; 125
 33e:	5f e3       	ldi	r21, 0x3F	; 63
 340:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <filtered_distance>
 344:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <filtered_distance+0x1>
 348:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <filtered_distance+0x2>
 34c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <filtered_distance+0x3>
 350:	f2 d1       	rcall	.+996    	; 0x736 <__mulsf3>
 352:	4b 01       	movw	r8, r22
 354:	5c 01       	movw	r10, r24
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	37 ed       	ldi	r19, 0xD7	; 215
 35a:	43 e2       	ldi	r20, 0x23	; 35
 35c:	5c e3       	ldi	r21, 0x3C	; 60
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	e9 d1       	rcall	.+978    	; 0x736 <__mulsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	c5 01       	movw	r24, r10
 36a:	b4 01       	movw	r22, r8
 36c:	55 d0       	rcall	.+170    	; 0x418 <__addsf3>
 36e:	6b 01       	movw	r12, r22
 370:	7c 01       	movw	r14, r24
 372:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <filtered_distance>
 376:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <filtered_distance+0x1>
 37a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <filtered_distance+0x2>
 37e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <filtered_distance+0x3>
			
			if (filtered_distance > 31)	{PORTC = 0; PORTG = 0;}	// 센서값이 30cm을 초과하면 0을 출력한다.
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	48 ef       	ldi	r20, 0xF8	; 248
 388:	51 e4       	ldi	r21, 0x41	; 65
 38a:	d1 d1       	rcall	.+930    	; 0x72e <__gesf2>
 38c:	18 16       	cp	r1, r24
 38e:	24 f4       	brge	.+8      	; 0x398 <main+0xe8>
 390:	15 ba       	out	0x15, r1	; 21
 392:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			else disp_FND((int)filtered_distance);		// 아니라면 FND에 거리를 출력한다.
 396:	8d cf       	rjmp	.-230    	; 0x2b2 <main+0x2>
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12
 39c:	09 d1       	rcall	.+530    	; 0x5b0 <__fixsfsi>
 39e:	cb 01       	movw	r24, r22
 3a0:	a3 de       	rcall	.-698    	; 0xe8 <disp_FND>
 3a2:	87 cf       	rjmp	.-242    	; 0x2b2 <main+0x2>
 3a4:	8b b3       	in	r24, 0x1b	; 27
			
			break;
			
			case PAUSE:		// PAUSE 상태이면 FND와 LED를 끄고 측정을 멈춘다.
			PORTA &= ~(1 << LED);
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	8b bb       	out	0x1b, r24	; 27
 3aa:	15 ba       	out	0x15, r1	; 21
			PORTC = 0;
 3ac:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			PORTG = 0;
 3b0:	80 cf       	rjmp	.-256    	; 0x2b2 <main+0x2>

000003b2 <__vector_1>:
			break;
 3b2:	1f 92       	push	r1
	TIMSK |= (1 << TOIE0);		//  Interrupt Enable
	TCNT0 = 254; 				//	0.5us x (256 - 254) = 1us
	sei();
}

ISR(INT0_vect) {				// 버튼이 눌릴 때마다 상태를 바꾼다.
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	8f 93       	push	r24
	switch (curState){
 3be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <curState>
 3c2:	88 23       	and	r24, r24
 3c4:	19 f0       	breq	.+6      	; 0x3cc <__vector_1+0x1a>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	29 f0       	breq	.+10     	; 0x3d4 <__vector_1+0x22>
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <__vector_1+0x26>
		case RUN:
		curState = PAUSE;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <curState>
		break;
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_1+0x26>
		case PAUSE:
		curState = RUN;
 3d4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <curState>
		break;
	}
}
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
	dt++;
 3f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 400:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	TCNT0 = 254;				// 0.5us x (256 - 254) = 1us
 404:	8e ef       	ldi	r24, 0xFE	; 254
 406:	82 bf       	out	0x32, r24	; 50
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__subsf3>:
 416:	50 58       	subi	r21, 0x80	; 128

00000418 <__addsf3>:
 418:	bb 27       	eor	r27, r27
 41a:	aa 27       	eor	r26, r26
 41c:	0e d0       	rcall	.+28     	; 0x43a <__addsf3x>
 41e:	4d c1       	rjmp	.+666    	; 0x6ba <__fp_round>
 420:	3e d1       	rcall	.+636    	; 0x69e <__fp_pscA>
 422:	30 f0       	brcs	.+12     	; 0x430 <__addsf3+0x18>
 424:	43 d1       	rcall	.+646    	; 0x6ac <__fp_pscB>
 426:	20 f0       	brcs	.+8      	; 0x430 <__addsf3+0x18>
 428:	31 f4       	brne	.+12     	; 0x436 <__addsf3+0x1e>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	11 f4       	brne	.+4      	; 0x432 <__addsf3+0x1a>
 42e:	1e f4       	brtc	.+6      	; 0x436 <__addsf3+0x1e>
 430:	33 c1       	rjmp	.+614    	; 0x698 <__fp_nan>
 432:	0e f4       	brtc	.+2      	; 0x436 <__addsf3+0x1e>
 434:	e0 95       	com	r30
 436:	e7 fb       	bst	r30, 7
 438:	29 c1       	rjmp	.+594    	; 0x68c <__fp_inf>

0000043a <__addsf3x>:
 43a:	e9 2f       	mov	r30, r25
 43c:	4f d1       	rcall	.+670    	; 0x6dc <__fp_split3>
 43e:	80 f3       	brcs	.-32     	; 0x420 <__addsf3+0x8>
 440:	ba 17       	cp	r27, r26
 442:	62 07       	cpc	r22, r18
 444:	73 07       	cpc	r23, r19
 446:	84 07       	cpc	r24, r20
 448:	95 07       	cpc	r25, r21
 44a:	18 f0       	brcs	.+6      	; 0x452 <__addsf3x+0x18>
 44c:	71 f4       	brne	.+28     	; 0x46a <__addsf3x+0x30>
 44e:	9e f5       	brtc	.+102    	; 0x4b6 <__addsf3x+0x7c>
 450:	67 c1       	rjmp	.+718    	; 0x720 <__fp_zero>
 452:	0e f4       	brtc	.+2      	; 0x456 <__addsf3x+0x1c>
 454:	e0 95       	com	r30
 456:	0b 2e       	mov	r0, r27
 458:	ba 2f       	mov	r27, r26
 45a:	a0 2d       	mov	r26, r0
 45c:	0b 01       	movw	r0, r22
 45e:	b9 01       	movw	r22, r18
 460:	90 01       	movw	r18, r0
 462:	0c 01       	movw	r0, r24
 464:	ca 01       	movw	r24, r20
 466:	a0 01       	movw	r20, r0
 468:	11 24       	eor	r1, r1
 46a:	ff 27       	eor	r31, r31
 46c:	59 1b       	sub	r21, r25
 46e:	99 f0       	breq	.+38     	; 0x496 <__addsf3x+0x5c>
 470:	59 3f       	cpi	r21, 0xF9	; 249
 472:	50 f4       	brcc	.+20     	; 0x488 <__addsf3x+0x4e>
 474:	50 3e       	cpi	r21, 0xE0	; 224
 476:	68 f1       	brcs	.+90     	; 0x4d2 <__addsf3x+0x98>
 478:	1a 16       	cp	r1, r26
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	a2 2f       	mov	r26, r18
 47e:	23 2f       	mov	r18, r19
 480:	34 2f       	mov	r19, r20
 482:	44 27       	eor	r20, r20
 484:	58 5f       	subi	r21, 0xF8	; 248
 486:	f3 cf       	rjmp	.-26     	; 0x46e <__addsf3x+0x34>
 488:	46 95       	lsr	r20
 48a:	37 95       	ror	r19
 48c:	27 95       	ror	r18
 48e:	a7 95       	ror	r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	53 95       	inc	r21
 494:	c9 f7       	brne	.-14     	; 0x488 <__addsf3x+0x4e>
 496:	7e f4       	brtc	.+30     	; 0x4b6 <__addsf3x+0x7c>
 498:	1f 16       	cp	r1, r31
 49a:	ba 0b       	sbc	r27, r26
 49c:	62 0b       	sbc	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	ba f0       	brmi	.+46     	; 0x4d2 <__addsf3x+0x98>
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	a1 f0       	breq	.+40     	; 0x4d0 <__addsf3x+0x96>
 4a8:	ff 0f       	add	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	c2 f7       	brpl	.-16     	; 0x4a4 <__addsf3x+0x6a>
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__addsf3x+0x98>
 4b6:	ba 0f       	add	r27, r26
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 1f       	adc	r23, r19
 4bc:	84 1f       	adc	r24, r20
 4be:	48 f4       	brcc	.+18     	; 0x4d2 <__addsf3x+0x98>
 4c0:	87 95       	ror	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0x96>
 4ce:	b3 cf       	rjmp	.-154    	; 0x436 <__addsf3+0x1e>
 4d0:	93 95       	inc	r25
 4d2:	88 0f       	add	r24, r24
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__addsf3x+0x9e>
 4d6:	99 27       	eor	r25, r25
 4d8:	ee 0f       	add	r30, r30
 4da:	97 95       	ror	r25
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret

000004e0 <__divsf3>:
 4e0:	0c d0       	rcall	.+24     	; 0x4fa <__divsf3x>
 4e2:	eb c0       	rjmp	.+470    	; 0x6ba <__fp_round>
 4e4:	e3 d0       	rcall	.+454    	; 0x6ac <__fp_pscB>
 4e6:	40 f0       	brcs	.+16     	; 0x4f8 <__divsf3+0x18>
 4e8:	da d0       	rcall	.+436    	; 0x69e <__fp_pscA>
 4ea:	30 f0       	brcs	.+12     	; 0x4f8 <__divsf3+0x18>
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <__divsf3+0x16>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	19 f0       	breq	.+6      	; 0x4f8 <__divsf3+0x18>
 4f2:	cc c0       	rjmp	.+408    	; 0x68c <__fp_inf>
 4f4:	51 11       	cpse	r21, r1
 4f6:	15 c1       	rjmp	.+554    	; 0x722 <__fp_szero>
 4f8:	cf c0       	rjmp	.+414    	; 0x698 <__fp_nan>

000004fa <__divsf3x>:
 4fa:	f0 d0       	rcall	.+480    	; 0x6dc <__fp_split3>
 4fc:	98 f3       	brcs	.-26     	; 0x4e4 <__divsf3+0x4>

000004fe <__divsf3_pse>:
 4fe:	99 23       	and	r25, r25
 500:	c9 f3       	breq	.-14     	; 0x4f4 <__divsf3+0x14>
 502:	55 23       	and	r21, r21
 504:	b1 f3       	breq	.-20     	; 0x4f2 <__divsf3+0x12>
 506:	95 1b       	sub	r25, r21
 508:	55 0b       	sbc	r21, r21
 50a:	bb 27       	eor	r27, r27
 50c:	aa 27       	eor	r26, r26
 50e:	62 17       	cp	r22, r18
 510:	73 07       	cpc	r23, r19
 512:	84 07       	cpc	r24, r20
 514:	38 f0       	brcs	.+14     	; 0x524 <__divsf3_pse+0x26>
 516:	9f 5f       	subi	r25, 0xFF	; 255
 518:	5f 4f       	sbci	r21, 0xFF	; 255
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	44 1f       	adc	r20, r20
 520:	aa 1f       	adc	r26, r26
 522:	a9 f3       	breq	.-22     	; 0x50e <__divsf3_pse+0x10>
 524:	33 d0       	rcall	.+102    	; 0x58c <__divsf3_pse+0x8e>
 526:	0e 2e       	mov	r0, r30
 528:	3a f0       	brmi	.+14     	; 0x538 <__divsf3_pse+0x3a>
 52a:	e0 e8       	ldi	r30, 0x80	; 128
 52c:	30 d0       	rcall	.+96     	; 0x58e <__divsf3_pse+0x90>
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	50 40       	sbci	r21, 0x00	; 0
 532:	e6 95       	lsr	r30
 534:	00 1c       	adc	r0, r0
 536:	ca f7       	brpl	.-14     	; 0x52a <__divsf3_pse+0x2c>
 538:	29 d0       	rcall	.+82     	; 0x58c <__divsf3_pse+0x8e>
 53a:	fe 2f       	mov	r31, r30
 53c:	27 d0       	rcall	.+78     	; 0x58c <__divsf3_pse+0x8e>
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	bb 1f       	adc	r27, r27
 546:	26 17       	cp	r18, r22
 548:	37 07       	cpc	r19, r23
 54a:	48 07       	cpc	r20, r24
 54c:	ab 07       	cpc	r26, r27
 54e:	b0 e8       	ldi	r27, 0x80	; 128
 550:	09 f0       	breq	.+2      	; 0x554 <__divsf3_pse+0x56>
 552:	bb 0b       	sbc	r27, r27
 554:	80 2d       	mov	r24, r0
 556:	bf 01       	movw	r22, r30
 558:	ff 27       	eor	r31, r31
 55a:	93 58       	subi	r25, 0x83	; 131
 55c:	5f 4f       	sbci	r21, 0xFF	; 255
 55e:	2a f0       	brmi	.+10     	; 0x56a <__divsf3_pse+0x6c>
 560:	9e 3f       	cpi	r25, 0xFE	; 254
 562:	51 05       	cpc	r21, r1
 564:	68 f0       	brcs	.+26     	; 0x580 <__divsf3_pse+0x82>
 566:	92 c0       	rjmp	.+292    	; 0x68c <__fp_inf>
 568:	dc c0       	rjmp	.+440    	; 0x722 <__fp_szero>
 56a:	5f 3f       	cpi	r21, 0xFF	; 255
 56c:	ec f3       	brlt	.-6      	; 0x568 <__divsf3_pse+0x6a>
 56e:	98 3e       	cpi	r25, 0xE8	; 232
 570:	dc f3       	brlt	.-10     	; 0x568 <__divsf3_pse+0x6a>
 572:	86 95       	lsr	r24
 574:	77 95       	ror	r23
 576:	67 95       	ror	r22
 578:	b7 95       	ror	r27
 57a:	f7 95       	ror	r31
 57c:	9f 5f       	subi	r25, 0xFF	; 255
 57e:	c9 f7       	brne	.-14     	; 0x572 <__divsf3_pse+0x74>
 580:	88 0f       	add	r24, r24
 582:	91 1d       	adc	r25, r1
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	97 f9       	bld	r25, 7
 58a:	08 95       	ret
 58c:	e1 e0       	ldi	r30, 0x01	; 1
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	bb 1f       	adc	r27, r27
 596:	62 17       	cp	r22, r18
 598:	73 07       	cpc	r23, r19
 59a:	84 07       	cpc	r24, r20
 59c:	ba 07       	cpc	r27, r26
 59e:	20 f0       	brcs	.+8      	; 0x5a8 <__divsf3_pse+0xaa>
 5a0:	62 1b       	sub	r22, r18
 5a2:	73 0b       	sbc	r23, r19
 5a4:	84 0b       	sbc	r24, r20
 5a6:	ba 0b       	sbc	r27, r26
 5a8:	ee 1f       	adc	r30, r30
 5aa:	88 f7       	brcc	.-30     	; 0x58e <__divsf3_pse+0x90>
 5ac:	e0 95       	com	r30
 5ae:	08 95       	ret

000005b0 <__fixsfsi>:
 5b0:	04 d0       	rcall	.+8      	; 0x5ba <__fixunssfsi>
 5b2:	68 94       	set
 5b4:	b1 11       	cpse	r27, r1
 5b6:	b5 c0       	rjmp	.+362    	; 0x722 <__fp_szero>
 5b8:	08 95       	ret

000005ba <__fixunssfsi>:
 5ba:	98 d0       	rcall	.+304    	; 0x6ec <__fp_splitA>
 5bc:	88 f0       	brcs	.+34     	; 0x5e0 <__fixunssfsi+0x26>
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	90 f0       	brcs	.+36     	; 0x5e6 <__fixunssfsi+0x2c>
 5c2:	b9 2f       	mov	r27, r25
 5c4:	99 27       	eor	r25, r25
 5c6:	b7 51       	subi	r27, 0x17	; 23
 5c8:	a0 f0       	brcs	.+40     	; 0x5f2 <__fixunssfsi+0x38>
 5ca:	d1 f0       	breq	.+52     	; 0x600 <__fixunssfsi+0x46>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a f0       	brmi	.+6      	; 0x5dc <__fixunssfsi+0x22>
 5d6:	ba 95       	dec	r27
 5d8:	c9 f7       	brne	.-14     	; 0x5cc <__fixunssfsi+0x12>
 5da:	12 c0       	rjmp	.+36     	; 0x600 <__fixunssfsi+0x46>
 5dc:	b1 30       	cpi	r27, 0x01	; 1
 5de:	81 f0       	breq	.+32     	; 0x600 <__fixunssfsi+0x46>
 5e0:	9f d0       	rcall	.+318    	; 0x720 <__fp_zero>
 5e2:	b1 e0       	ldi	r27, 0x01	; 1
 5e4:	08 95       	ret
 5e6:	9c c0       	rjmp	.+312    	; 0x720 <__fp_zero>
 5e8:	67 2f       	mov	r22, r23
 5ea:	78 2f       	mov	r23, r24
 5ec:	88 27       	eor	r24, r24
 5ee:	b8 5f       	subi	r27, 0xF8	; 248
 5f0:	39 f0       	breq	.+14     	; 0x600 <__fixunssfsi+0x46>
 5f2:	b9 3f       	cpi	r27, 0xF9	; 249
 5f4:	cc f3       	brlt	.-14     	; 0x5e8 <__fixunssfsi+0x2e>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b3 95       	inc	r27
 5fe:	d9 f7       	brne	.-10     	; 0x5f6 <__fixunssfsi+0x3c>
 600:	3e f4       	brtc	.+14     	; 0x610 <__fixunssfsi+0x56>
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	08 95       	ret

00000612 <__floatunsisf>:
 612:	e8 94       	clt
 614:	09 c0       	rjmp	.+18     	; 0x628 <__floatsisf+0x12>

00000616 <__floatsisf>:
 616:	97 fb       	bst	r25, 7
 618:	3e f4       	brtc	.+14     	; 0x628 <__floatsisf+0x12>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	99 23       	and	r25, r25
 62a:	a9 f0       	breq	.+42     	; 0x656 <__floatsisf+0x40>
 62c:	f9 2f       	mov	r31, r25
 62e:	96 e9       	ldi	r25, 0x96	; 150
 630:	bb 27       	eor	r27, r27
 632:	93 95       	inc	r25
 634:	f6 95       	lsr	r31
 636:	87 95       	ror	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f1 11       	cpse	r31, r1
 640:	f8 cf       	rjmp	.-16     	; 0x632 <__floatsisf+0x1c>
 642:	fa f4       	brpl	.+62     	; 0x682 <__floatsisf+0x6c>
 644:	bb 0f       	add	r27, r27
 646:	11 f4       	brne	.+4      	; 0x64c <__floatsisf+0x36>
 648:	60 ff       	sbrs	r22, 0
 64a:	1b c0       	rjmp	.+54     	; 0x682 <__floatsisf+0x6c>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	16 c0       	rjmp	.+44     	; 0x682 <__floatsisf+0x6c>
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <__floatsisf+0x48>
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	11 c0       	rjmp	.+34     	; 0x680 <__floatsisf+0x6a>
 65e:	77 23       	and	r23, r23
 660:	21 f0       	breq	.+8      	; 0x66a <__floatsisf+0x54>
 662:	9e e8       	ldi	r25, 0x8E	; 142
 664:	87 2f       	mov	r24, r23
 666:	76 2f       	mov	r23, r22
 668:	05 c0       	rjmp	.+10     	; 0x674 <__floatsisf+0x5e>
 66a:	66 23       	and	r22, r22
 66c:	71 f0       	breq	.+28     	; 0x68a <__floatsisf+0x74>
 66e:	96 e8       	ldi	r25, 0x86	; 134
 670:	86 2f       	mov	r24, r22
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	2a f0       	brmi	.+10     	; 0x682 <__floatsisf+0x6c>
 678:	9a 95       	dec	r25
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	da f7       	brpl	.-10     	; 0x678 <__floatsisf+0x62>
 682:	88 0f       	add	r24, r24
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__fp_inf>:
 68c:	97 f9       	bld	r25, 7
 68e:	9f 67       	ori	r25, 0x7F	; 127
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	08 95       	ret

00000698 <__fp_nan>:
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	08 95       	ret

0000069e <__fp_pscA>:
 69e:	00 24       	eor	r0, r0
 6a0:	0a 94       	dec	r0
 6a2:	16 16       	cp	r1, r22
 6a4:	17 06       	cpc	r1, r23
 6a6:	18 06       	cpc	r1, r24
 6a8:	09 06       	cpc	r0, r25
 6aa:	08 95       	ret

000006ac <__fp_pscB>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	05 06       	cpc	r0, r21
 6b8:	08 95       	ret

000006ba <__fp_round>:
 6ba:	09 2e       	mov	r0, r25
 6bc:	03 94       	inc	r0
 6be:	00 0c       	add	r0, r0
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__fp_round+0xc>
 6c2:	88 23       	and	r24, r24
 6c4:	52 f0       	brmi	.+20     	; 0x6da <__fp_round+0x20>
 6c6:	bb 0f       	add	r27, r27
 6c8:	40 f4       	brcc	.+16     	; 0x6da <__fp_round+0x20>
 6ca:	bf 2b       	or	r27, r31
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0x18>
 6ce:	60 ff       	sbrs	r22, 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <__fp_round+0x20>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__fp_split3>:
 6dc:	57 fd       	sbrc	r21, 7
 6de:	90 58       	subi	r25, 0x80	; 128
 6e0:	44 0f       	add	r20, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	59 f0       	breq	.+22     	; 0x6fc <__fp_splitA+0x10>
 6e6:	5f 3f       	cpi	r21, 0xFF	; 255
 6e8:	71 f0       	breq	.+28     	; 0x706 <__fp_splitA+0x1a>
 6ea:	47 95       	ror	r20

000006ec <__fp_splitA>:
 6ec:	88 0f       	add	r24, r24
 6ee:	97 fb       	bst	r25, 7
 6f0:	99 1f       	adc	r25, r25
 6f2:	61 f0       	breq	.+24     	; 0x70c <__fp_splitA+0x20>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	79 f0       	breq	.+30     	; 0x716 <__fp_splitA+0x2a>
 6f8:	87 95       	ror	r24
 6fa:	08 95       	ret
 6fc:	12 16       	cp	r1, r18
 6fe:	13 06       	cpc	r1, r19
 700:	14 06       	cpc	r1, r20
 702:	55 1f       	adc	r21, r21
 704:	f2 cf       	rjmp	.-28     	; 0x6ea <__fp_split3+0xe>
 706:	46 95       	lsr	r20
 708:	f1 df       	rcall	.-30     	; 0x6ec <__fp_splitA>
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__fp_splitA+0x30>
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	18 06       	cpc	r1, r24
 712:	99 1f       	adc	r25, r25
 714:	f1 cf       	rjmp	.-30     	; 0x6f8 <__fp_splitA+0xc>
 716:	86 95       	lsr	r24
 718:	71 05       	cpc	r23, r1
 71a:	61 05       	cpc	r22, r1
 71c:	08 94       	sec
 71e:	08 95       	ret

00000720 <__fp_zero>:
 720:	e8 94       	clt

00000722 <__fp_szero>:
 722:	bb 27       	eor	r27, r27
 724:	66 27       	eor	r22, r22
 726:	77 27       	eor	r23, r23
 728:	cb 01       	movw	r24, r22
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <__gesf2>:
 72e:	66 d0       	rcall	.+204    	; 0x7fc <__fp_cmp>
 730:	08 f4       	brcc	.+2      	; 0x734 <__gesf2+0x6>
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	08 95       	ret

00000736 <__mulsf3>:
 736:	0b d0       	rcall	.+22     	; 0x74e <__mulsf3x>
 738:	c0 cf       	rjmp	.-128    	; 0x6ba <__fp_round>
 73a:	b1 df       	rcall	.-158    	; 0x69e <__fp_pscA>
 73c:	28 f0       	brcs	.+10     	; 0x748 <__mulsf3+0x12>
 73e:	b6 df       	rcall	.-148    	; 0x6ac <__fp_pscB>
 740:	18 f0       	brcs	.+6      	; 0x748 <__mulsf3+0x12>
 742:	95 23       	and	r25, r21
 744:	09 f0       	breq	.+2      	; 0x748 <__mulsf3+0x12>
 746:	a2 cf       	rjmp	.-188    	; 0x68c <__fp_inf>
 748:	a7 cf       	rjmp	.-178    	; 0x698 <__fp_nan>
 74a:	11 24       	eor	r1, r1
 74c:	ea cf       	rjmp	.-44     	; 0x722 <__fp_szero>

0000074e <__mulsf3x>:
 74e:	c6 df       	rcall	.-116    	; 0x6dc <__fp_split3>
 750:	a0 f3       	brcs	.-24     	; 0x73a <__mulsf3+0x4>

00000752 <__mulsf3_pse>:
 752:	95 9f       	mul	r25, r21
 754:	d1 f3       	breq	.-12     	; 0x74a <__mulsf3+0x14>
 756:	95 0f       	add	r25, r21
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	55 1f       	adc	r21, r21
 75c:	62 9f       	mul	r22, r18
 75e:	f0 01       	movw	r30, r0
 760:	72 9f       	mul	r23, r18
 762:	bb 27       	eor	r27, r27
 764:	f0 0d       	add	r31, r0
 766:	b1 1d       	adc	r27, r1
 768:	63 9f       	mul	r22, r19
 76a:	aa 27       	eor	r26, r26
 76c:	f0 0d       	add	r31, r0
 76e:	b1 1d       	adc	r27, r1
 770:	aa 1f       	adc	r26, r26
 772:	64 9f       	mul	r22, r20
 774:	66 27       	eor	r22, r22
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	66 1f       	adc	r22, r22
 77c:	82 9f       	mul	r24, r18
 77e:	22 27       	eor	r18, r18
 780:	b0 0d       	add	r27, r0
 782:	a1 1d       	adc	r26, r1
 784:	62 1f       	adc	r22, r18
 786:	73 9f       	mul	r23, r19
 788:	b0 0d       	add	r27, r0
 78a:	a1 1d       	adc	r26, r1
 78c:	62 1f       	adc	r22, r18
 78e:	83 9f       	mul	r24, r19
 790:	a0 0d       	add	r26, r0
 792:	61 1d       	adc	r22, r1
 794:	22 1f       	adc	r18, r18
 796:	74 9f       	mul	r23, r20
 798:	33 27       	eor	r19, r19
 79a:	a0 0d       	add	r26, r0
 79c:	61 1d       	adc	r22, r1
 79e:	23 1f       	adc	r18, r19
 7a0:	84 9f       	mul	r24, r20
 7a2:	60 0d       	add	r22, r0
 7a4:	21 1d       	adc	r18, r1
 7a6:	82 2f       	mov	r24, r18
 7a8:	76 2f       	mov	r23, r22
 7aa:	6a 2f       	mov	r22, r26
 7ac:	11 24       	eor	r1, r1
 7ae:	9f 57       	subi	r25, 0x7F	; 127
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	8a f0       	brmi	.+34     	; 0x7d6 <__mulsf3_pse+0x84>
 7b4:	e1 f0       	breq	.+56     	; 0x7ee <__mulsf3_pse+0x9c>
 7b6:	88 23       	and	r24, r24
 7b8:	4a f0       	brmi	.+18     	; 0x7cc <__mulsf3_pse+0x7a>
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	bb 1f       	adc	r27, r27
 7c0:	66 1f       	adc	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	91 50       	subi	r25, 0x01	; 1
 7c8:	50 40       	sbci	r21, 0x00	; 0
 7ca:	a9 f7       	brne	.-22     	; 0x7b6 <__mulsf3_pse+0x64>
 7cc:	9e 3f       	cpi	r25, 0xFE	; 254
 7ce:	51 05       	cpc	r21, r1
 7d0:	70 f0       	brcs	.+28     	; 0x7ee <__mulsf3_pse+0x9c>
 7d2:	5c cf       	rjmp	.-328    	; 0x68c <__fp_inf>
 7d4:	a6 cf       	rjmp	.-180    	; 0x722 <__fp_szero>
 7d6:	5f 3f       	cpi	r21, 0xFF	; 255
 7d8:	ec f3       	brlt	.-6      	; 0x7d4 <__mulsf3_pse+0x82>
 7da:	98 3e       	cpi	r25, 0xE8	; 232
 7dc:	dc f3       	brlt	.-10     	; 0x7d4 <__mulsf3_pse+0x82>
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	f7 95       	ror	r31
 7e8:	e7 95       	ror	r30
 7ea:	9f 5f       	subi	r25, 0xFF	; 255
 7ec:	c1 f7       	brne	.-16     	; 0x7de <__mulsf3_pse+0x8c>
 7ee:	fe 2b       	or	r31, r30
 7f0:	88 0f       	add	r24, r24
 7f2:	91 1d       	adc	r25, r1
 7f4:	96 95       	lsr	r25
 7f6:	87 95       	ror	r24
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret

000007fc <__fp_cmp>:
 7fc:	99 0f       	add	r25, r25
 7fe:	00 08       	sbc	r0, r0
 800:	55 0f       	add	r21, r21
 802:	aa 0b       	sbc	r26, r26
 804:	e0 e8       	ldi	r30, 0x80	; 128
 806:	fe ef       	ldi	r31, 0xFE	; 254
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	e8 07       	cpc	r30, r24
 80e:	f9 07       	cpc	r31, r25
 810:	c0 f0       	brcs	.+48     	; 0x842 <__fp_cmp+0x46>
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	e4 07       	cpc	r30, r20
 818:	f5 07       	cpc	r31, r21
 81a:	98 f0       	brcs	.+38     	; 0x842 <__fp_cmp+0x46>
 81c:	62 1b       	sub	r22, r18
 81e:	73 0b       	sbc	r23, r19
 820:	84 0b       	sbc	r24, r20
 822:	95 0b       	sbc	r25, r21
 824:	39 f4       	brne	.+14     	; 0x834 <__fp_cmp+0x38>
 826:	0a 26       	eor	r0, r26
 828:	61 f0       	breq	.+24     	; 0x842 <__fp_cmp+0x46>
 82a:	23 2b       	or	r18, r19
 82c:	24 2b       	or	r18, r20
 82e:	25 2b       	or	r18, r21
 830:	21 f4       	brne	.+8      	; 0x83a <__fp_cmp+0x3e>
 832:	08 95       	ret
 834:	0a 26       	eor	r0, r26
 836:	09 f4       	brne	.+2      	; 0x83a <__fp_cmp+0x3e>
 838:	a1 40       	sbci	r26, 0x01	; 1
 83a:	a6 95       	lsr	r26
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	81 1d       	adc	r24, r1
 840:	81 1d       	adc	r24, r1
 842:	08 95       	ret

00000844 <__umulhisi3>:
 844:	a2 9f       	mul	r26, r18
 846:	b0 01       	movw	r22, r0
 848:	b3 9f       	mul	r27, r19
 84a:	c0 01       	movw	r24, r0
 84c:	a3 9f       	mul	r26, r19
 84e:	70 0d       	add	r23, r0
 850:	81 1d       	adc	r24, r1
 852:	11 24       	eor	r1, r1
 854:	91 1d       	adc	r25, r1
 856:	b2 9f       	mul	r27, r18
 858:	70 0d       	add	r23, r0
 85a:	81 1d       	adc	r24, r1
 85c:	11 24       	eor	r1, r1
 85e:	91 1d       	adc	r25, r1
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
