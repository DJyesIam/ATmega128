
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000842  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e5  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b5  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	47 d1       	rcall	.+654    	; 0x352 <main>
  c4:	74 c1       	rjmp	.+744    	; 0x3ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
void disp_FND(unsigned int);

unsigned char digit[10] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83,0xBC, 0x80, 0xB0};
volatile unsigned int count=0, ad_val=0;

ISR(TIMER0_OVF_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	count++;
  d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
  da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <count+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <count+0x1>
  e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
	TCNT0=130;
  e8:	82 e8       	ldi	r24, 0x82	; 130
  ea:	82 bf       	out	0x32, r24	; 50
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_21>:
ISR(ADC_vect) {
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	ad_val=ADC;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 110:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <disp_digit>:
		disp_FND(ad_val);
    }
}

void disp_digit(unsigned char num, unsigned char d){
	PORTC = digit[num];
 122:	e8 2f       	mov	r30, r24
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	85 bb       	out	0x15, r24	; 21
	PORTG = 0x01<<d; 
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <disp_digit+0x16>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <disp_digit+0x12>
 13c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 140:	08 95       	ret

00000142 <disp_FND>:
}

void disp_FND(unsigned int val){
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	unsigned char num;
	if ((count % 10)==0){
 148:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <count>
 14c:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <count+0x1>
 150:	9a 01       	movw	r18, r20
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	1c d1       	rcall	.+568    	; 0x390 <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	9c 01       	movw	r18, r24
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	82 0f       	add	r24, r18
 178:	93 1f       	adc	r25, r19
 17a:	48 17       	cp	r20, r24
 17c:	59 07       	cpc	r21, r25
 17e:	c1 f4       	brne	.+48     	; 0x1b0 <disp_FND+0x6e>
	num = (val) % 10; disp_digit(num, 3); }
 180:	9e 01       	movw	r18, r28
 182:	06 d1       	rcall	.+524    	; 0x390 <__umulhisi3>
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	9c 01       	movw	r18, r24
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	2c 2f       	mov	r18, r28
 1aa:	28 1b       	sub	r18, r24
 1ac:	82 2f       	mov	r24, r18
 1ae:	b9 df       	rcall	.-142    	; 0x122 <disp_digit>
	if ((count % 10)==2){
 1b0:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <count>
 1b4:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <count+0x1>
 1b8:	9a 01       	movw	r18, r20
 1ba:	ad ec       	ldi	r26, 0xCD	; 205
 1bc:	bc ec       	ldi	r27, 0xCC	; 204
 1be:	e8 d0       	rcall	.+464    	; 0x390 <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	9a 01       	movw	r18, r20
 1e4:	28 1b       	sub	r18, r24
 1e6:	39 0b       	sbc	r19, r25
 1e8:	22 30       	cpi	r18, 0x02	; 2
 1ea:	31 05       	cpc	r19, r1
	num = (val/10) % 10; disp_digit(num, 2); }
 1ec:	09 f5       	brne	.+66     	; 0x230 <disp_FND+0xee>
 1ee:	9e 01       	movw	r18, r28
 1f0:	cf d0       	rcall	.+414    	; 0x390 <__umulhisi3>
 1f2:	ac 01       	movw	r20, r24
 1f4:	56 95       	lsr	r21
 1f6:	47 95       	ror	r20
 1f8:	56 95       	lsr	r21
 1fa:	47 95       	ror	r20
 1fc:	56 95       	lsr	r21
 1fe:	47 95       	ror	r20
 200:	9a 01       	movw	r18, r20
 202:	c6 d0       	rcall	.+396    	; 0x390 <__umulhisi3>
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	9c 01       	movw	r18, r24
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	34 2f       	mov	r19, r20
 22a:	38 1b       	sub	r19, r24
 22c:	83 2f       	mov	r24, r19
 22e:	79 df       	rcall	.-270    	; 0x122 <disp_digit>
	if ((count % 10)==4){
 230:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <count>
 234:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <count+0x1>
 238:	9a 01       	movw	r18, r20
 23a:	ad ec       	ldi	r26, 0xCD	; 205
 23c:	bc ec       	ldi	r27, 0xCC	; 204
 23e:	a8 d0       	rcall	.+336    	; 0x390 <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	9c 01       	movw	r18, r24
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	82 0f       	add	r24, r18
 260:	93 1f       	adc	r25, r19
 262:	9a 01       	movw	r18, r20
 264:	28 1b       	sub	r18, r24
 266:	39 0b       	sbc	r19, r25
 268:	24 30       	cpi	r18, 0x04	; 4
 26a:	31 05       	cpc	r19, r1
 26c:	29 f5       	brne	.+74     	; 0x2b8 <disp_FND+0x176>
	num = (val/100) % 10; disp_digit(num, 1); }
 26e:	9e 01       	movw	r18, r28
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	ab e7       	ldi	r26, 0x7B	; 123
 27a:	b4 e1       	ldi	r27, 0x14	; 20
 27c:	89 d0       	rcall	.+274    	; 0x390 <__umulhisi3>
 27e:	ac 01       	movw	r20, r24
 280:	56 95       	lsr	r21
 282:	47 95       	ror	r20
 284:	9a 01       	movw	r18, r20
 286:	ad ec       	ldi	r26, 0xCD	; 205
 288:	bc ec       	ldi	r27, 0xCC	; 204
 28a:	82 d0       	rcall	.+260    	; 0x390 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	9c 01       	movw	r18, r24
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	34 2f       	mov	r19, r20
 2b2:	38 1b       	sub	r19, r24
 2b4:	83 2f       	mov	r24, r19
 2b6:	35 df       	rcall	.-406    	; 0x122 <disp_digit>
	if ((count % 10)==6){
 2b8:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <count>
 2bc:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <count+0x1>
 2c0:	9a 01       	movw	r18, r20
 2c2:	ad ec       	ldi	r26, 0xCD	; 205
 2c4:	bc ec       	ldi	r27, 0xCC	; 204
 2c6:	64 d0       	rcall	.+200    	; 0x390 <__umulhisi3>
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	9c 01       	movw	r18, r24
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	9a 01       	movw	r18, r20
 2ec:	28 1b       	sub	r18, r24
 2ee:	39 0b       	sbc	r19, r25
 2f0:	26 30       	cpi	r18, 0x06	; 6
 2f2:	31 05       	cpc	r19, r1
 2f4:	59 f5       	brne	.+86     	; 0x34c <disp_FND+0x20a>
	num = (val/1000) % 10; disp_digit(num, 0); }
 2f6:	9e 01       	movw	r18, r28
 2f8:	36 95       	lsr	r19
 2fa:	27 95       	ror	r18
 2fc:	36 95       	lsr	r19
 2fe:	27 95       	ror	r18
 300:	36 95       	lsr	r19
 302:	27 95       	ror	r18
 304:	a5 ec       	ldi	r26, 0xC5	; 197
 306:	b0 e2       	ldi	r27, 0x20	; 32
 308:	43 d0       	rcall	.+134    	; 0x390 <__umulhisi3>
 30a:	ac 01       	movw	r20, r24
 30c:	52 95       	swap	r21
 30e:	42 95       	swap	r20
 310:	4f 70       	andi	r20, 0x0F	; 15
 312:	45 27       	eor	r20, r21
 314:	5f 70       	andi	r21, 0x0F	; 15
 316:	45 27       	eor	r20, r21
 318:	9a 01       	movw	r18, r20
 31a:	ad ec       	ldi	r26, 0xCD	; 205
 31c:	bc ec       	ldi	r27, 0xCC	; 204
 31e:	38 d0       	rcall	.+112    	; 0x390 <__umulhisi3>
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	9c 01       	movw	r18, r24
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	34 2f       	mov	r19, r20
 346:	38 1b       	sub	r19, r24
 348:	83 2f       	mov	r24, r19
 34a:	eb de       	rcall	.-554    	; 0x122 <disp_digit>
 34c:	df 91       	pop	r29
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <main>:
 352:	8f ef       	ldi	r24, 0xFF	; 255
	ad_val=ADC;
}

int main(void)
{
	DDRC = 0xff; DDRG = 0x0f;
 354:	84 bb       	out	0x14, r24	; 20
 356:	8f e0       	ldi	r24, 0x0F	; 15
 358:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	TCCR0 |= TC0_PRESCALE_128; // Prescale 128 --> 8us
 35c:	83 b7       	in	r24, 0x33	; 51
 35e:	85 60       	ori	r24, 0x05	; 5
 360:	83 bf       	out	0x33, r24	; 51
	TIMSK |= TC0_INTERRUPT_ENABLE; // Interrupt Enable
 362:	87 b7       	in	r24, 0x37	; 55
 364:	81 60       	ori	r24, 0x01	; 1
 366:	87 bf       	out	0x37, r24	; 55
	TCNT0=130; // 8us x (255-130)= 1ms
 368:	82 e8       	ldi	r24, 0x82	; 130
 36a:	82 bf       	out	0x32, r24	; 50
	
	ADMUX= ADC_AREF_CH0;
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= ADC_PRESCALE_128 | ADC_ENABLE; // prescale 128
 370:	86 b1       	in	r24, 0x06	; 6
 372:	87 68       	ori	r24, 0x87	; 135
 374:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ADC_INTERRUPT_ENABLE |ADC_FREE_RUN;
 376:	86 b1       	in	r24, 0x06	; 6
 378:	88 62       	ori	r24, 0x28	; 40
 37a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ADC_START; // Start !!
 37c:	86 b1       	in	r24, 0x06	; 6
 37e:	80 64       	ori	r24, 0x40	; 64
 380:	86 b9       	out	0x06, r24	; 6
	
	sei();
 382:	78 94       	sei
	
    while (1) 
    {
		disp_FND(ad_val);
 384:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 388:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 38c:	da de       	rcall	.-588    	; 0x142 <disp_FND>
 38e:	fa cf       	rjmp	.-12     	; 0x384 <main+0x32>

00000390 <__umulhisi3>:
 390:	a2 9f       	mul	r26, r18
 392:	b0 01       	movw	r22, r0
 394:	b3 9f       	mul	r27, r19
 396:	c0 01       	movw	r24, r0
 398:	a3 9f       	mul	r26, r19
 39a:	70 0d       	add	r23, r0
 39c:	81 1d       	adc	r24, r1
 39e:	11 24       	eor	r1, r1
 3a0:	91 1d       	adc	r25, r1
 3a2:	b2 9f       	mul	r27, r18
 3a4:	70 0d       	add	r23, r0
 3a6:	81 1d       	adc	r24, r1
 3a8:	11 24       	eor	r1, r1
 3aa:	91 1d       	adc	r25, r1
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
