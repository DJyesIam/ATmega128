
Middle_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  000008b4  00000948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008001d6  008001d6  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c30  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fc  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ad  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000615  00000000  00000000  00002a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3d       	cpi	r26, 0xD6	; 214
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 ed       	ldi	r26, 0xD6	; 214
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3d       	cpi	r26, 0xD8	; 216
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cb d1       	rcall	.+918    	; 0x45a <main>
  c4:	f5 c3       	rjmp	.+2026   	; 0x8b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:

void initialize(void);
void beep(int pin, uint16_t on_time, uint16_t off_time);
void tone3(uint16_t fr, uint16_t dur);

ISR(INT0_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	if ((EICRA & (0x01 << ISC00)) == 0){
  de:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
  e2:	80 fd       	sbrc	r24, 0
  e4:	15 c0       	rjmp	.+42     	; 0x110 <__vector_1+0x48>
		i++;
  e6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <i>
  ea:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <i+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <i+0x1>
  f4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <i>
		IE0_Detect_Rising;
  f8:	ea e6       	ldi	r30, 0x6A	; 106
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 83       	st	Z, r24
		nextMelody = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__data_end+0x1>
 10a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 10e:	09 c0       	rjmp	.+18     	; 0x122 <__vector_1+0x5a>
	}
	else {
		IE0_Detect_Falling;
 110:	ea e6       	ldi	r30, 0x6A	; 106
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	80 83       	st	Z, r24
		nextMelody = 0;
 11a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <__data_end+0x1>
 11e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0b be       	out	0x3b, r0	; 59
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <initialize>:
	initialize();
	while (1) if (nextMelody == 1) tone3(melody[i], 1000);
}

void initialize(void){
	DDRD &= ~(1 << PORTD0);	PORTD |= 1 << PORTD0;	// 스위치
 138:	81 b3       	in	r24, 0x11	; 17
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	81 60       	ori	r24, 0x01	; 1
 142:	82 bb       	out	0x12, r24	; 18
	DDRB |= 1 << PORTB0;	// 스피커
 144:	87 b3       	in	r24, 0x17	; 23
 146:	81 60       	ori	r24, 0x01	; 1
 148:	87 bb       	out	0x17, r24	; 23
	
	Use_IE0_Interrupt;
 14a:	89 b7       	in	r24, 0x39	; 57
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	89 bf       	out	0x39, r24	; 57
	IE0_Detect_Falling;
 150:	ea e6       	ldi	r30, 0x6A	; 106
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	80 83       	st	Z, r24
	sei();
 15a:	78 94       	sei
 15c:	08 95       	ret

0000015e <beep>:
}

void beep(int pin, uint16_t on_time, uint16_t off_time){
 15e:	4f 92       	push	r4
 160:	5f 92       	push	r5
 162:	6f 92       	push	r6
 164:	7f 92       	push	r7
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ea 01       	movw	r28, r20
	PORTB |= 1 << PORTB0;
 180:	88 b3       	in	r24, 0x18	; 24
 182:	81 60       	ori	r24, 0x01	; 1
 184:	88 bb       	out	0x18, r24	; 24
	_delay_us(on_time);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	79 d2       	rcall	.+1266   	; 0x67e <__floatunsisf>
 18c:	6b 01       	movw	r12, r22
 18e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 190:	2b ea       	ldi	r18, 0xAB	; 171
 192:	3a ea       	ldi	r19, 0xAA	; 170
 194:	4a ea       	ldi	r20, 0xAA	; 170
 196:	50 e4       	ldi	r21, 0x40	; 64
 198:	28 d3       	rcall	.+1616   	; 0x7ea <__mulsf3>
 19a:	4b 01       	movw	r8, r22
 19c:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e8       	ldi	r20, 0x80	; 128
 1a4:	50 e4       	ldi	r21, 0x40	; 64
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	1f d3       	rcall	.+1598   	; 0x7ea <__mulsf3>
 1ac:	2b 01       	movw	r4, r22
 1ae:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	c5 01       	movw	r24, r10
 1ba:	b4 01       	movw	r22, r8
 1bc:	c8 d1       	rcall	.+912    	; 0x54e <__cmpsf2>
 1be:	88 23       	and	r24, r24
 1c0:	0c f4       	brge	.+2      	; 0x1c4 <beep+0x66>
 1c2:	5c c0       	rjmp	.+184    	; 0x27c <beep+0x11e>
		__ticks = 1;
	else if (__tmp2 > 65535)
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	57 e4       	ldi	r21, 0x47	; 71
 1cc:	c3 01       	movw	r24, r6
 1ce:	b2 01       	movw	r22, r4
 1d0:	08 d3       	rcall	.+1552   	; 0x7e2 <__gesf2>
 1d2:	18 16       	cp	r1, r24
 1d4:	0c f0       	brlt	.+2      	; 0x1d8 <beep+0x7a>
 1d6:	3d c0       	rjmp	.+122    	; 0x252 <beep+0xf4>
	{
		_delay_ms(__us / 1000.0);
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	4a e7       	ldi	r20, 0x7A	; 122
 1de:	54 e4       	ldi	r21, 0x44	; 68
 1e0:	c7 01       	movw	r24, r14
 1e2:	b6 01       	movw	r22, r12
 1e4:	b8 d1       	rcall	.+880    	; 0x556 <__divsf3>
 1e6:	4b 01       	movw	r8, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1e8:	5c 01       	movw	r10, r24
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	4a e7       	ldi	r20, 0x7A	; 122
 1f0:	55 e4       	ldi	r21, 0x45	; 69
 1f2:	fb d2       	rcall	.+1526   	; 0x7ea <__mulsf3>
 1f4:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 1f6:	7c 01       	movw	r14, r24
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5f e3       	ldi	r21, 0x3F	; 63
 200:	a6 d1       	rcall	.+844    	; 0x54e <__cmpsf2>
 202:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
 204:	04 f1       	brlt	.+64     	; 0x246 <beep+0xe8>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	3f ef       	ldi	r19, 0xFF	; 255
 20a:	4f e7       	ldi	r20, 0x7F	; 127
 20c:	57 e4       	ldi	r21, 0x47	; 71
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	e7 d2       	rcall	.+1486   	; 0x7e2 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 214:	18 16       	cp	r1, r24
 216:	9c f4       	brge	.+38     	; 0x23e <beep+0xe0>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e2       	ldi	r20, 0x20	; 32
 21e:	51 e4       	ldi	r21, 0x41	; 65
 220:	c5 01       	movw	r24, r10
 222:	b4 01       	movw	r22, r8
 224:	e2 d2       	rcall	.+1476   	; 0x7ea <__mulsf3>
 226:	ff d1       	rcall	.+1022   	; 0x626 <__fixunssfsi>
 228:	06 c0       	rjmp	.+12     	; 0x236 <beep+0xd8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22a:	80 e9       	ldi	r24, 0x90	; 144
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	f1 f7       	brne	.-4      	; 0x22e <beep+0xd0>
 232:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 234:	71 09       	sbc	r23, r1
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	b9 f7       	brne	.-18     	; 0x22a <beep+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 23c:	20 c0       	rjmp	.+64     	; 0x27e <beep+0x120>
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	f1 d1       	rcall	.+994    	; 0x626 <__fixunssfsi>
 244:	02 c0       	rjmp	.+4      	; 0x24a <beep+0xec>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	cb 01       	movw	r24, r22
 24c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 24e:	f1 f7       	brne	.-4      	; 0x24c <beep+0xee>
 250:	16 c0       	rjmp	.+44     	; 0x27e <beep+0x120>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	4f e7       	ldi	r20, 0x7F	; 127
 258:	53 e4       	ldi	r21, 0x43	; 67
 25a:	c5 01       	movw	r24, r10
 25c:	b4 01       	movw	r22, r8
 25e:	c1 d2       	rcall	.+1410   	; 0x7e2 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 260:	18 16       	cp	r1, r24
 262:	3c f4       	brge	.+14     	; 0x272 <beep+0x114>
 264:	c3 01       	movw	r24, r6
 266:	b2 01       	movw	r22, r4
 268:	de d1       	rcall	.+956    	; 0x626 <__fixunssfsi>
 26a:	cb 01       	movw	r24, r22
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <beep+0x10e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 270:	08 c0       	rjmp	.+16     	; 0x282 <beep+0x124>
 272:	c5 01       	movw	r24, r10
 274:	b4 01       	movw	r22, r8
 276:	d7 d1       	rcall	.+942    	; 0x626 <__fixunssfsi>
 278:	06 2f       	mov	r16, r22
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 27a:	01 c0       	rjmp	.+2      	; 0x27e <beep+0x120>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27c:	01 e0       	ldi	r16, 0x01	; 1
	PORTB &= ~(1 << PORTB0);
 27e:	0a 95       	dec	r16
 280:	f1 f7       	brne	.-4      	; 0x27e <beep+0x120>
 282:	88 b3       	in	r24, 0x18	; 24
	_delay_us(off_time);
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	88 bb       	out	0x18, r24	; 24
 288:	be 01       	movw	r22, r28
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	f7 d1       	rcall	.+1006   	; 0x67e <__floatunsisf>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 290:	6b 01       	movw	r12, r22
 292:	7c 01       	movw	r14, r24
 294:	2b ea       	ldi	r18, 0xAB	; 171
 296:	3a ea       	ldi	r19, 0xAA	; 170
 298:	4a ea       	ldi	r20, 0xAA	; 170
 29a:	50 e4       	ldi	r21, 0x40	; 64
 29c:	a6 d2       	rcall	.+1356   	; 0x7ea <__mulsf3>
	__tmp2 = ((F_CPU) / 4e6) * __us;
 29e:	4b 01       	movw	r8, r22
 2a0:	5c 01       	movw	r10, r24
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e8       	ldi	r20, 0x80	; 128
 2a8:	50 e4       	ldi	r21, 0x40	; 64
 2aa:	c7 01       	movw	r24, r14
 2ac:	b6 01       	movw	r22, r12
 2ae:	9d d2       	rcall	.+1338   	; 0x7ea <__mulsf3>
	if (__tmp < 1.0)
 2b0:	2b 01       	movw	r4, r22
 2b2:	3c 01       	movw	r6, r24
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e8       	ldi	r20, 0x80	; 128
 2ba:	5f e3       	ldi	r21, 0x3F	; 63
 2bc:	c5 01       	movw	r24, r10
 2be:	b4 01       	movw	r22, r8
 2c0:	46 d1       	rcall	.+652    	; 0x54e <__cmpsf2>
 2c2:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
 2c4:	0c f4       	brge	.+2      	; 0x2c8 <beep+0x16a>
 2c6:	5c c0       	rjmp	.+184    	; 0x380 <beep+0x222>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	3f ef       	ldi	r19, 0xFF	; 255
 2cc:	4f e7       	ldi	r20, 0x7F	; 127
 2ce:	57 e4       	ldi	r21, 0x47	; 71
 2d0:	c3 01       	movw	r24, r6
 2d2:	b2 01       	movw	r22, r4
 2d4:	86 d2       	rcall	.+1292   	; 0x7e2 <__gesf2>
 2d6:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
 2d8:	0c f0       	brlt	.+2      	; 0x2dc <beep+0x17e>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <beep+0x1f8>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	4a e7       	ldi	r20, 0x7A	; 122
 2e2:	54 e4       	ldi	r21, 0x44	; 68
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	36 d1       	rcall	.+620    	; 0x556 <__divsf3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2ea:	4b 01       	movw	r8, r22
 2ec:	5c 01       	movw	r10, r24
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	4a e7       	ldi	r20, 0x7A	; 122
 2f4:	55 e4       	ldi	r21, 0x45	; 69
 2f6:	79 d2       	rcall	.+1266   	; 0x7ea <__mulsf3>
 2f8:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
 2fa:	7c 01       	movw	r14, r24
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e8       	ldi	r20, 0x80	; 128
 302:	5f e3       	ldi	r21, 0x3F	; 63
 304:	24 d1       	rcall	.+584    	; 0x54e <__cmpsf2>
		__ticks = 1;
	else if (__tmp > 65535)
 306:	88 23       	and	r24, r24
 308:	04 f1       	brlt	.+64     	; 0x34a <beep+0x1ec>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	3f ef       	ldi	r19, 0xFF	; 255
 30e:	4f e7       	ldi	r20, 0x7F	; 127
 310:	57 e4       	ldi	r21, 0x47	; 71
 312:	c7 01       	movw	r24, r14
 314:	b6 01       	movw	r22, r12
 316:	65 d2       	rcall	.+1226   	; 0x7e2 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 318:	18 16       	cp	r1, r24
 31a:	9c f4       	brge	.+38     	; 0x342 <beep+0x1e4>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e2       	ldi	r20, 0x20	; 32
 322:	51 e4       	ldi	r21, 0x41	; 65
 324:	c5 01       	movw	r24, r10
 326:	b4 01       	movw	r22, r8
 328:	60 d2       	rcall	.+1216   	; 0x7ea <__mulsf3>
 32a:	7d d1       	rcall	.+762    	; 0x626 <__fixunssfsi>
 32c:	06 c0       	rjmp	.+12     	; 0x33a <beep+0x1dc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 32e:	80 e9       	ldi	r24, 0x90	; 144
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	f1 f7       	brne	.-4      	; 0x332 <beep+0x1d4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	61 50       	subi	r22, 0x01	; 1
 338:	71 09       	sbc	r23, r1
 33a:	61 15       	cp	r22, r1
 33c:	71 05       	cpc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 33e:	b9 f7       	brne	.-18     	; 0x32e <beep+0x1d0>
 340:	20 c0       	rjmp	.+64     	; 0x382 <beep+0x224>
 342:	c7 01       	movw	r24, r14
 344:	b6 01       	movw	r22, r12

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 346:	6f d1       	rcall	.+734    	; 0x626 <__fixunssfsi>
 348:	02 c0       	rjmp	.+4      	; 0x34e <beep+0x1f0>
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	cb 01       	movw	r24, r22
 350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 352:	f1 f7       	brne	.-4      	; 0x350 <beep+0x1f2>
 354:	16 c0       	rjmp	.+44     	; 0x382 <beep+0x224>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	4f e7       	ldi	r20, 0x7F	; 127
 35c:	53 e4       	ldi	r21, 0x43	; 67
 35e:	c5 01       	movw	r24, r10
 360:	b4 01       	movw	r22, r8
 362:	3f d2       	rcall	.+1150   	; 0x7e2 <__gesf2>
 364:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 366:	3c f4       	brge	.+14     	; 0x376 <beep+0x218>
 368:	c3 01       	movw	r24, r6
 36a:	b2 01       	movw	r22, r4
 36c:	5c d1       	rcall	.+696    	; 0x626 <__fixunssfsi>
 36e:	cb 01       	movw	r24, r22
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <beep+0x212>
 374:	08 c0       	rjmp	.+16     	; 0x386 <beep+0x228>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 376:	c5 01       	movw	r24, r10
 378:	b4 01       	movw	r22, r8
 37a:	55 d1       	rcall	.+682    	; 0x626 <__fixunssfsi>
 37c:	16 2f       	mov	r17, r22
 37e:	01 c0       	rjmp	.+2      	; 0x382 <beep+0x224>
 380:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 382:	1a 95       	dec	r17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 384:	f1 f7       	brne	.-4      	; 0x382 <beep+0x224>
 386:	df 91       	pop	r29
}
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	bf 90       	pop	r11
 398:	af 90       	pop	r10
 39a:	9f 90       	pop	r9
 39c:	8f 90       	pop	r8
 39e:	7f 90       	pop	r7
 3a0:	6f 90       	pop	r6
 3a2:	5f 90       	pop	r5
 3a4:	4f 90       	pop	r4
 3a6:	08 95       	ret

000003a8 <tone3>:
 3a8:	8f 92       	push	r8

void tone3(uint16_t fr, uint16_t dur){
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	eb 01       	movw	r28, r22
	uint16_t on_time = 1./fr*500000.;
 3c2:	bc 01       	movw	r22, r24
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	5a d1       	rcall	.+692    	; 0x67e <__floatunsisf>
 3ca:	9b 01       	movw	r18, r22
 3cc:	ac 01       	movw	r20, r24
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	80 e8       	ldi	r24, 0x80	; 128
 3d4:	9f e3       	ldi	r25, 0x3F	; 63
 3d6:	bf d0       	rcall	.+382    	; 0x556 <__divsf3>
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	34 e2       	ldi	r19, 0x24	; 36
 3dc:	44 ef       	ldi	r20, 0xF4	; 244
 3de:	58 e4       	ldi	r21, 0x48	; 72
 3e0:	04 d2       	rcall	.+1032   	; 0x7ea <__mulsf3>
 3e2:	21 d1       	rcall	.+578    	; 0x626 <__fixunssfsi>
 3e4:	6b 01       	movw	r12, r22
 3e6:	7c 01       	movw	r14, r24
 3e8:	8b 01       	movw	r16, r22
	uint16_t n = dur*1000./(2.*on_time);
 3ea:	be 01       	movw	r22, r28
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	46 d1       	rcall	.+652    	; 0x67e <__floatunsisf>
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	4a e7       	ldi	r20, 0x7A	; 122
 3f8:	54 e4       	ldi	r21, 0x44	; 68
 3fa:	f7 d1       	rcall	.+1006   	; 0x7ea <__mulsf3>
 3fc:	4b 01       	movw	r8, r22
 3fe:	5c 01       	movw	r10, r24
 400:	b6 01       	movw	r22, r12
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	3b d1       	rcall	.+630    	; 0x67e <__floatunsisf>
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	3c d0       	rcall	.+120    	; 0x486 <__addsf3>
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	c5 01       	movw	r24, r10
 414:	b4 01       	movw	r22, r8
 416:	9f d0       	rcall	.+318    	; 0x556 <__divsf3>
 418:	06 d1       	rcall	.+524    	; 0x626 <__fixunssfsi>
 41a:	7b 01       	movw	r14, r22
 41c:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < n; i++){
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	0c c0       	rjmp	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 422:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
		if (nextMelody == 0) return;
 426:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
 42a:	89 2b       	or	r24, r25
 42c:	49 f0       	breq	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		beep(0, on_time, on_time);
 42e:	a8 01       	movw	r20, r16
 430:	b8 01       	movw	r22, r16
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	93 de       	rcall	.-730    	; 0x15e <beep>
 438:	21 96       	adiw	r28, 0x01	; 1
}

void tone3(uint16_t fr, uint16_t dur){
	uint16_t on_time = 1./fr*500000.;
	uint16_t n = dur*1000./(2.*on_time);
	for (int i = 0; i < n; i++){
 43a:	ce 15       	cp	r28, r14
 43c:	df 05       	cpc	r29, r15
 43e:	88 f3       	brcs	.-30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 440:	df 91       	pop	r29
		if (nextMelody == 0) return;
		beep(0, on_time, on_time);
	}
}
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	08 95       	ret

0000045a <main>:
 45a:	6e de       	rcall	.-804    	; 0x138 <initialize>
}

int main(void)
{
	initialize();
	while (1) if (nextMelody == 1) tone3(melody[i], 1000);
 45c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
 460:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	d1 f7       	brne	.-12     	; 0x45c <main+0x2>
 468:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <i>
 46c:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <i+0x1>
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	e0 50       	subi	r30, 0x00	; 0
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	68 ee       	ldi	r22, 0xE8	; 232
 47a:	73 e0       	ldi	r23, 0x03	; 3
 47c:	80 81       	ld	r24, Z
 47e:	91 81       	ldd	r25, Z+1	; 0x01
 480:	93 df       	rcall	.-218    	; 0x3a8 <tone3>
 482:	ec cf       	rjmp	.-40     	; 0x45c <main+0x2>

00000484 <__subsf3>:
 484:	50 58       	subi	r21, 0x80	; 128

00000486 <__addsf3>:
 486:	bb 27       	eor	r27, r27
 488:	aa 27       	eor	r26, r26
 48a:	0e d0       	rcall	.+28     	; 0x4a8 <__addsf3x>
 48c:	70 c1       	rjmp	.+736    	; 0x76e <__fp_round>
 48e:	61 d1       	rcall	.+706    	; 0x752 <__fp_pscA>
 490:	30 f0       	brcs	.+12     	; 0x49e <__addsf3+0x18>
 492:	66 d1       	rcall	.+716    	; 0x760 <__fp_pscB>
 494:	20 f0       	brcs	.+8      	; 0x49e <__addsf3+0x18>
 496:	31 f4       	brne	.+12     	; 0x4a4 <__addsf3+0x1e>
 498:	9f 3f       	cpi	r25, 0xFF	; 255
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__addsf3+0x1a>
 49c:	1e f4       	brtc	.+6      	; 0x4a4 <__addsf3+0x1e>
 49e:	56 c1       	rjmp	.+684    	; 0x74c <__fp_nan>
 4a0:	0e f4       	brtc	.+2      	; 0x4a4 <__addsf3+0x1e>
 4a2:	e0 95       	com	r30
 4a4:	e7 fb       	bst	r30, 7
 4a6:	4c c1       	rjmp	.+664    	; 0x740 <__fp_inf>

000004a8 <__addsf3x>:
 4a8:	e9 2f       	mov	r30, r25
 4aa:	72 d1       	rcall	.+740    	; 0x790 <__fp_split3>
 4ac:	80 f3       	brcs	.-32     	; 0x48e <__addsf3+0x8>
 4ae:	ba 17       	cp	r27, r26
 4b0:	62 07       	cpc	r22, r18
 4b2:	73 07       	cpc	r23, r19
 4b4:	84 07       	cpc	r24, r20
 4b6:	95 07       	cpc	r25, r21
 4b8:	18 f0       	brcs	.+6      	; 0x4c0 <__addsf3x+0x18>
 4ba:	71 f4       	brne	.+28     	; 0x4d8 <__addsf3x+0x30>
 4bc:	9e f5       	brtc	.+102    	; 0x524 <__addsf3x+0x7c>
 4be:	8a c1       	rjmp	.+788    	; 0x7d4 <__fp_zero>
 4c0:	0e f4       	brtc	.+2      	; 0x4c4 <__addsf3x+0x1c>
 4c2:	e0 95       	com	r30
 4c4:	0b 2e       	mov	r0, r27
 4c6:	ba 2f       	mov	r27, r26
 4c8:	a0 2d       	mov	r26, r0
 4ca:	0b 01       	movw	r0, r22
 4cc:	b9 01       	movw	r22, r18
 4ce:	90 01       	movw	r18, r0
 4d0:	0c 01       	movw	r0, r24
 4d2:	ca 01       	movw	r24, r20
 4d4:	a0 01       	movw	r20, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	ff 27       	eor	r31, r31
 4da:	59 1b       	sub	r21, r25
 4dc:	99 f0       	breq	.+38     	; 0x504 <__addsf3x+0x5c>
 4de:	59 3f       	cpi	r21, 0xF9	; 249
 4e0:	50 f4       	brcc	.+20     	; 0x4f6 <__addsf3x+0x4e>
 4e2:	50 3e       	cpi	r21, 0xE0	; 224
 4e4:	68 f1       	brcs	.+90     	; 0x540 <__addsf3x+0x98>
 4e6:	1a 16       	cp	r1, r26
 4e8:	f0 40       	sbci	r31, 0x00	; 0
 4ea:	a2 2f       	mov	r26, r18
 4ec:	23 2f       	mov	r18, r19
 4ee:	34 2f       	mov	r19, r20
 4f0:	44 27       	eor	r20, r20
 4f2:	58 5f       	subi	r21, 0xF8	; 248
 4f4:	f3 cf       	rjmp	.-26     	; 0x4dc <__addsf3x+0x34>
 4f6:	46 95       	lsr	r20
 4f8:	37 95       	ror	r19
 4fa:	27 95       	ror	r18
 4fc:	a7 95       	ror	r26
 4fe:	f0 40       	sbci	r31, 0x00	; 0
 500:	53 95       	inc	r21
 502:	c9 f7       	brne	.-14     	; 0x4f6 <__addsf3x+0x4e>
 504:	7e f4       	brtc	.+30     	; 0x524 <__addsf3x+0x7c>
 506:	1f 16       	cp	r1, r31
 508:	ba 0b       	sbc	r27, r26
 50a:	62 0b       	sbc	r22, r18
 50c:	73 0b       	sbc	r23, r19
 50e:	84 0b       	sbc	r24, r20
 510:	ba f0       	brmi	.+46     	; 0x540 <__addsf3x+0x98>
 512:	91 50       	subi	r25, 0x01	; 1
 514:	a1 f0       	breq	.+40     	; 0x53e <__addsf3x+0x96>
 516:	ff 0f       	add	r31, r31
 518:	bb 1f       	adc	r27, r27
 51a:	66 1f       	adc	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	c2 f7       	brpl	.-16     	; 0x512 <__addsf3x+0x6a>
 522:	0e c0       	rjmp	.+28     	; 0x540 <__addsf3x+0x98>
 524:	ba 0f       	add	r27, r26
 526:	62 1f       	adc	r22, r18
 528:	73 1f       	adc	r23, r19
 52a:	84 1f       	adc	r24, r20
 52c:	48 f4       	brcc	.+18     	; 0x540 <__addsf3x+0x98>
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	f7 95       	ror	r31
 538:	9e 3f       	cpi	r25, 0xFE	; 254
 53a:	08 f0       	brcs	.+2      	; 0x53e <__addsf3x+0x96>
 53c:	b3 cf       	rjmp	.-154    	; 0x4a4 <__addsf3+0x1e>
 53e:	93 95       	inc	r25
 540:	88 0f       	add	r24, r24
 542:	08 f0       	brcs	.+2      	; 0x546 <__addsf3x+0x9e>
 544:	99 27       	eor	r25, r25
 546:	ee 0f       	add	r30, r30
 548:	97 95       	ror	r25
 54a:	87 95       	ror	r24
 54c:	08 95       	ret

0000054e <__cmpsf2>:
 54e:	d4 d0       	rcall	.+424    	; 0x6f8 <__fp_cmp>
 550:	08 f4       	brcc	.+2      	; 0x554 <__cmpsf2+0x6>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret

00000556 <__divsf3>:
 556:	0c d0       	rcall	.+24     	; 0x570 <__divsf3x>
 558:	0a c1       	rjmp	.+532    	; 0x76e <__fp_round>
 55a:	02 d1       	rcall	.+516    	; 0x760 <__fp_pscB>
 55c:	40 f0       	brcs	.+16     	; 0x56e <__divsf3+0x18>
 55e:	f9 d0       	rcall	.+498    	; 0x752 <__fp_pscA>
 560:	30 f0       	brcs	.+12     	; 0x56e <__divsf3+0x18>
 562:	21 f4       	brne	.+8      	; 0x56c <__divsf3+0x16>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	19 f0       	breq	.+6      	; 0x56e <__divsf3+0x18>
 568:	eb c0       	rjmp	.+470    	; 0x740 <__fp_inf>
 56a:	51 11       	cpse	r21, r1
 56c:	34 c1       	rjmp	.+616    	; 0x7d6 <__fp_szero>
 56e:	ee c0       	rjmp	.+476    	; 0x74c <__fp_nan>

00000570 <__divsf3x>:
 570:	0f d1       	rcall	.+542    	; 0x790 <__fp_split3>
 572:	98 f3       	brcs	.-26     	; 0x55a <__divsf3+0x4>

00000574 <__divsf3_pse>:
 574:	99 23       	and	r25, r25
 576:	c9 f3       	breq	.-14     	; 0x56a <__divsf3+0x14>
 578:	55 23       	and	r21, r21
 57a:	b1 f3       	breq	.-20     	; 0x568 <__divsf3+0x12>
 57c:	95 1b       	sub	r25, r21
 57e:	55 0b       	sbc	r21, r21
 580:	bb 27       	eor	r27, r27
 582:	aa 27       	eor	r26, r26
 584:	62 17       	cp	r22, r18
 586:	73 07       	cpc	r23, r19
 588:	84 07       	cpc	r24, r20
 58a:	38 f0       	brcs	.+14     	; 0x59a <__divsf3_pse+0x26>
 58c:	9f 5f       	subi	r25, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	44 1f       	adc	r20, r20
 596:	aa 1f       	adc	r26, r26
 598:	a9 f3       	breq	.-22     	; 0x584 <__divsf3_pse+0x10>
 59a:	33 d0       	rcall	.+102    	; 0x602 <__divsf3_pse+0x8e>
 59c:	0e 2e       	mov	r0, r30
 59e:	3a f0       	brmi	.+14     	; 0x5ae <__divsf3_pse+0x3a>
 5a0:	e0 e8       	ldi	r30, 0x80	; 128
 5a2:	30 d0       	rcall	.+96     	; 0x604 <__divsf3_pse+0x90>
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	e6 95       	lsr	r30
 5aa:	00 1c       	adc	r0, r0
 5ac:	ca f7       	brpl	.-14     	; 0x5a0 <__divsf3_pse+0x2c>
 5ae:	29 d0       	rcall	.+82     	; 0x602 <__divsf3_pse+0x8e>
 5b0:	fe 2f       	mov	r31, r30
 5b2:	27 d0       	rcall	.+78     	; 0x602 <__divsf3_pse+0x8e>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	bb 1f       	adc	r27, r27
 5bc:	26 17       	cp	r18, r22
 5be:	37 07       	cpc	r19, r23
 5c0:	48 07       	cpc	r20, r24
 5c2:	ab 07       	cpc	r26, r27
 5c4:	b0 e8       	ldi	r27, 0x80	; 128
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__divsf3_pse+0x56>
 5c8:	bb 0b       	sbc	r27, r27
 5ca:	80 2d       	mov	r24, r0
 5cc:	bf 01       	movw	r22, r30
 5ce:	ff 27       	eor	r31, r31
 5d0:	93 58       	subi	r25, 0x83	; 131
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	2a f0       	brmi	.+10     	; 0x5e0 <__divsf3_pse+0x6c>
 5d6:	9e 3f       	cpi	r25, 0xFE	; 254
 5d8:	51 05       	cpc	r21, r1
 5da:	68 f0       	brcs	.+26     	; 0x5f6 <__divsf3_pse+0x82>
 5dc:	b1 c0       	rjmp	.+354    	; 0x740 <__fp_inf>
 5de:	fb c0       	rjmp	.+502    	; 0x7d6 <__fp_szero>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	ec f3       	brlt	.-6      	; 0x5de <__divsf3_pse+0x6a>
 5e4:	98 3e       	cpi	r25, 0xE8	; 232
 5e6:	dc f3       	brlt	.-10     	; 0x5de <__divsf3_pse+0x6a>
 5e8:	86 95       	lsr	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f7 95       	ror	r31
 5f2:	9f 5f       	subi	r25, 0xFF	; 255
 5f4:	c9 f7       	brne	.-14     	; 0x5e8 <__divsf3_pse+0x74>
 5f6:	88 0f       	add	r24, r24
 5f8:	91 1d       	adc	r25, r1
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret
 602:	e1 e0       	ldi	r30, 0x01	; 1
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	bb 1f       	adc	r27, r27
 60c:	62 17       	cp	r22, r18
 60e:	73 07       	cpc	r23, r19
 610:	84 07       	cpc	r24, r20
 612:	ba 07       	cpc	r27, r26
 614:	20 f0       	brcs	.+8      	; 0x61e <__divsf3_pse+0xaa>
 616:	62 1b       	sub	r22, r18
 618:	73 0b       	sbc	r23, r19
 61a:	84 0b       	sbc	r24, r20
 61c:	ba 0b       	sbc	r27, r26
 61e:	ee 1f       	adc	r30, r30
 620:	88 f7       	brcc	.-30     	; 0x604 <__divsf3_pse+0x90>
 622:	e0 95       	com	r30
 624:	08 95       	ret

00000626 <__fixunssfsi>:
 626:	bc d0       	rcall	.+376    	; 0x7a0 <__fp_splitA>
 628:	88 f0       	brcs	.+34     	; 0x64c <__fixunssfsi+0x26>
 62a:	9f 57       	subi	r25, 0x7F	; 127
 62c:	90 f0       	brcs	.+36     	; 0x652 <__fixunssfsi+0x2c>
 62e:	b9 2f       	mov	r27, r25
 630:	99 27       	eor	r25, r25
 632:	b7 51       	subi	r27, 0x17	; 23
 634:	a0 f0       	brcs	.+40     	; 0x65e <__fixunssfsi+0x38>
 636:	d1 f0       	breq	.+52     	; 0x66c <__fixunssfsi+0x46>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a f0       	brmi	.+6      	; 0x648 <__fixunssfsi+0x22>
 642:	ba 95       	dec	r27
 644:	c9 f7       	brne	.-14     	; 0x638 <__fixunssfsi+0x12>
 646:	12 c0       	rjmp	.+36     	; 0x66c <__fixunssfsi+0x46>
 648:	b1 30       	cpi	r27, 0x01	; 1
 64a:	81 f0       	breq	.+32     	; 0x66c <__fixunssfsi+0x46>
 64c:	c3 d0       	rcall	.+390    	; 0x7d4 <__fp_zero>
 64e:	b1 e0       	ldi	r27, 0x01	; 1
 650:	08 95       	ret
 652:	c0 c0       	rjmp	.+384    	; 0x7d4 <__fp_zero>
 654:	67 2f       	mov	r22, r23
 656:	78 2f       	mov	r23, r24
 658:	88 27       	eor	r24, r24
 65a:	b8 5f       	subi	r27, 0xF8	; 248
 65c:	39 f0       	breq	.+14     	; 0x66c <__fixunssfsi+0x46>
 65e:	b9 3f       	cpi	r27, 0xF9	; 249
 660:	cc f3       	brlt	.-14     	; 0x654 <__fixunssfsi+0x2e>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b3 95       	inc	r27
 66a:	d9 f7       	brne	.-10     	; 0x662 <__fixunssfsi+0x3c>
 66c:	3e f4       	brtc	.+14     	; 0x67c <__fixunssfsi+0x56>
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	08 95       	ret

0000067e <__floatunsisf>:
 67e:	e8 94       	clt
 680:	09 c0       	rjmp	.+18     	; 0x694 <__floatsisf+0x12>

00000682 <__floatsisf>:
 682:	97 fb       	bst	r25, 7
 684:	3e f4       	brtc	.+14     	; 0x694 <__floatsisf+0x12>
 686:	90 95       	com	r25
 688:	80 95       	com	r24
 68a:	70 95       	com	r23
 68c:	61 95       	neg	r22
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	99 23       	and	r25, r25
 696:	a9 f0       	breq	.+42     	; 0x6c2 <__floatsisf+0x40>
 698:	f9 2f       	mov	r31, r25
 69a:	96 e9       	ldi	r25, 0x96	; 150
 69c:	bb 27       	eor	r27, r27
 69e:	93 95       	inc	r25
 6a0:	f6 95       	lsr	r31
 6a2:	87 95       	ror	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b7 95       	ror	r27
 6aa:	f1 11       	cpse	r31, r1
 6ac:	f8 cf       	rjmp	.-16     	; 0x69e <__floatsisf+0x1c>
 6ae:	fa f4       	brpl	.+62     	; 0x6ee <__floatsisf+0x6c>
 6b0:	bb 0f       	add	r27, r27
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__floatsisf+0x36>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	1b c0       	rjmp	.+54     	; 0x6ee <__floatsisf+0x6c>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	16 c0       	rjmp	.+44     	; 0x6ee <__floatsisf+0x6c>
 6c2:	88 23       	and	r24, r24
 6c4:	11 f0       	breq	.+4      	; 0x6ca <__floatsisf+0x48>
 6c6:	96 e9       	ldi	r25, 0x96	; 150
 6c8:	11 c0       	rjmp	.+34     	; 0x6ec <__floatsisf+0x6a>
 6ca:	77 23       	and	r23, r23
 6cc:	21 f0       	breq	.+8      	; 0x6d6 <__floatsisf+0x54>
 6ce:	9e e8       	ldi	r25, 0x8E	; 142
 6d0:	87 2f       	mov	r24, r23
 6d2:	76 2f       	mov	r23, r22
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <__floatsisf+0x5e>
 6d6:	66 23       	and	r22, r22
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <__floatsisf+0x74>
 6da:	96 e8       	ldi	r25, 0x86	; 134
 6dc:	86 2f       	mov	r24, r22
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	2a f0       	brmi	.+10     	; 0x6ee <__floatsisf+0x6c>
 6e4:	9a 95       	dec	r25
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	da f7       	brpl	.-10     	; 0x6e4 <__floatsisf+0x62>
 6ee:	88 0f       	add	r24, r24
 6f0:	96 95       	lsr	r25
 6f2:	87 95       	ror	r24
 6f4:	97 f9       	bld	r25, 7
 6f6:	08 95       	ret

000006f8 <__fp_cmp>:
 6f8:	99 0f       	add	r25, r25
 6fa:	00 08       	sbc	r0, r0
 6fc:	55 0f       	add	r21, r21
 6fe:	aa 0b       	sbc	r26, r26
 700:	e0 e8       	ldi	r30, 0x80	; 128
 702:	fe ef       	ldi	r31, 0xFE	; 254
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	e8 07       	cpc	r30, r24
 70a:	f9 07       	cpc	r31, r25
 70c:	c0 f0       	brcs	.+48     	; 0x73e <__fp_cmp+0x46>
 70e:	12 16       	cp	r1, r18
 710:	13 06       	cpc	r1, r19
 712:	e4 07       	cpc	r30, r20
 714:	f5 07       	cpc	r31, r21
 716:	98 f0       	brcs	.+38     	; 0x73e <__fp_cmp+0x46>
 718:	62 1b       	sub	r22, r18
 71a:	73 0b       	sbc	r23, r19
 71c:	84 0b       	sbc	r24, r20
 71e:	95 0b       	sbc	r25, r21
 720:	39 f4       	brne	.+14     	; 0x730 <__fp_cmp+0x38>
 722:	0a 26       	eor	r0, r26
 724:	61 f0       	breq	.+24     	; 0x73e <__fp_cmp+0x46>
 726:	23 2b       	or	r18, r19
 728:	24 2b       	or	r18, r20
 72a:	25 2b       	or	r18, r21
 72c:	21 f4       	brne	.+8      	; 0x736 <__fp_cmp+0x3e>
 72e:	08 95       	ret
 730:	0a 26       	eor	r0, r26
 732:	09 f4       	brne	.+2      	; 0x736 <__fp_cmp+0x3e>
 734:	a1 40       	sbci	r26, 0x01	; 1
 736:	a6 95       	lsr	r26
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	81 1d       	adc	r24, r1
 73c:	81 1d       	adc	r24, r1
 73e:	08 95       	ret

00000740 <__fp_inf>:
 740:	97 f9       	bld	r25, 7
 742:	9f 67       	ori	r25, 0x7F	; 127
 744:	80 e8       	ldi	r24, 0x80	; 128
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	08 95       	ret

0000074c <__fp_nan>:
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	80 ec       	ldi	r24, 0xC0	; 192
 750:	08 95       	ret

00000752 <__fp_pscA>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	16 16       	cp	r1, r22
 758:	17 06       	cpc	r1, r23
 75a:	18 06       	cpc	r1, r24
 75c:	09 06       	cpc	r0, r25
 75e:	08 95       	ret

00000760 <__fp_pscB>:
 760:	00 24       	eor	r0, r0
 762:	0a 94       	dec	r0
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	05 06       	cpc	r0, r21
 76c:	08 95       	ret

0000076e <__fp_round>:
 76e:	09 2e       	mov	r0, r25
 770:	03 94       	inc	r0
 772:	00 0c       	add	r0, r0
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_round+0xc>
 776:	88 23       	and	r24, r24
 778:	52 f0       	brmi	.+20     	; 0x78e <__fp_round+0x20>
 77a:	bb 0f       	add	r27, r27
 77c:	40 f4       	brcc	.+16     	; 0x78e <__fp_round+0x20>
 77e:	bf 2b       	or	r27, r31
 780:	11 f4       	brne	.+4      	; 0x786 <__fp_round+0x18>
 782:	60 ff       	sbrs	r22, 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <__fp_round+0x20>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	08 95       	ret

00000790 <__fp_split3>:
 790:	57 fd       	sbrc	r21, 7
 792:	90 58       	subi	r25, 0x80	; 128
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	59 f0       	breq	.+22     	; 0x7b0 <__fp_splitA+0x10>
 79a:	5f 3f       	cpi	r21, 0xFF	; 255
 79c:	71 f0       	breq	.+28     	; 0x7ba <__fp_splitA+0x1a>
 79e:	47 95       	ror	r20

000007a0 <__fp_splitA>:
 7a0:	88 0f       	add	r24, r24
 7a2:	97 fb       	bst	r25, 7
 7a4:	99 1f       	adc	r25, r25
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_splitA+0x20>
 7a8:	9f 3f       	cpi	r25, 0xFF	; 255
 7aa:	79 f0       	breq	.+30     	; 0x7ca <__fp_splitA+0x2a>
 7ac:	87 95       	ror	r24
 7ae:	08 95       	ret
 7b0:	12 16       	cp	r1, r18
 7b2:	13 06       	cpc	r1, r19
 7b4:	14 06       	cpc	r1, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	f2 cf       	rjmp	.-28     	; 0x79e <__fp_split3+0xe>
 7ba:	46 95       	lsr	r20
 7bc:	f1 df       	rcall	.-30     	; 0x7a0 <__fp_splitA>
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <__fp_splitA+0x30>
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	f1 cf       	rjmp	.-30     	; 0x7ac <__fp_splitA+0xc>
 7ca:	86 95       	lsr	r24
 7cc:	71 05       	cpc	r23, r1
 7ce:	61 05       	cpc	r22, r1
 7d0:	08 94       	sec
 7d2:	08 95       	ret

000007d4 <__fp_zero>:
 7d4:	e8 94       	clt

000007d6 <__fp_szero>:
 7d6:	bb 27       	eor	r27, r27
 7d8:	66 27       	eor	r22, r22
 7da:	77 27       	eor	r23, r23
 7dc:	cb 01       	movw	r24, r22
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <__gesf2>:
 7e2:	8a df       	rcall	.-236    	; 0x6f8 <__fp_cmp>
 7e4:	08 f4       	brcc	.+2      	; 0x7e8 <__gesf2+0x6>
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__mulsf3>:
 7ea:	0b d0       	rcall	.+22     	; 0x802 <__mulsf3x>
 7ec:	c0 cf       	rjmp	.-128    	; 0x76e <__fp_round>
 7ee:	b1 df       	rcall	.-158    	; 0x752 <__fp_pscA>
 7f0:	28 f0       	brcs	.+10     	; 0x7fc <__mulsf3+0x12>
 7f2:	b6 df       	rcall	.-148    	; 0x760 <__fp_pscB>
 7f4:	18 f0       	brcs	.+6      	; 0x7fc <__mulsf3+0x12>
 7f6:	95 23       	and	r25, r21
 7f8:	09 f0       	breq	.+2      	; 0x7fc <__mulsf3+0x12>
 7fa:	a2 cf       	rjmp	.-188    	; 0x740 <__fp_inf>
 7fc:	a7 cf       	rjmp	.-178    	; 0x74c <__fp_nan>
 7fe:	11 24       	eor	r1, r1
 800:	ea cf       	rjmp	.-44     	; 0x7d6 <__fp_szero>

00000802 <__mulsf3x>:
 802:	c6 df       	rcall	.-116    	; 0x790 <__fp_split3>
 804:	a0 f3       	brcs	.-24     	; 0x7ee <__mulsf3+0x4>

00000806 <__mulsf3_pse>:
 806:	95 9f       	mul	r25, r21
 808:	d1 f3       	breq	.-12     	; 0x7fe <__mulsf3+0x14>
 80a:	95 0f       	add	r25, r21
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	55 1f       	adc	r21, r21
 810:	62 9f       	mul	r22, r18
 812:	f0 01       	movw	r30, r0
 814:	72 9f       	mul	r23, r18
 816:	bb 27       	eor	r27, r27
 818:	f0 0d       	add	r31, r0
 81a:	b1 1d       	adc	r27, r1
 81c:	63 9f       	mul	r22, r19
 81e:	aa 27       	eor	r26, r26
 820:	f0 0d       	add	r31, r0
 822:	b1 1d       	adc	r27, r1
 824:	aa 1f       	adc	r26, r26
 826:	64 9f       	mul	r22, r20
 828:	66 27       	eor	r22, r22
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	66 1f       	adc	r22, r22
 830:	82 9f       	mul	r24, r18
 832:	22 27       	eor	r18, r18
 834:	b0 0d       	add	r27, r0
 836:	a1 1d       	adc	r26, r1
 838:	62 1f       	adc	r22, r18
 83a:	73 9f       	mul	r23, r19
 83c:	b0 0d       	add	r27, r0
 83e:	a1 1d       	adc	r26, r1
 840:	62 1f       	adc	r22, r18
 842:	83 9f       	mul	r24, r19
 844:	a0 0d       	add	r26, r0
 846:	61 1d       	adc	r22, r1
 848:	22 1f       	adc	r18, r18
 84a:	74 9f       	mul	r23, r20
 84c:	33 27       	eor	r19, r19
 84e:	a0 0d       	add	r26, r0
 850:	61 1d       	adc	r22, r1
 852:	23 1f       	adc	r18, r19
 854:	84 9f       	mul	r24, r20
 856:	60 0d       	add	r22, r0
 858:	21 1d       	adc	r18, r1
 85a:	82 2f       	mov	r24, r18
 85c:	76 2f       	mov	r23, r22
 85e:	6a 2f       	mov	r22, r26
 860:	11 24       	eor	r1, r1
 862:	9f 57       	subi	r25, 0x7F	; 127
 864:	50 40       	sbci	r21, 0x00	; 0
 866:	8a f0       	brmi	.+34     	; 0x88a <__mulsf3_pse+0x84>
 868:	e1 f0       	breq	.+56     	; 0x8a2 <__mulsf3_pse+0x9c>
 86a:	88 23       	and	r24, r24
 86c:	4a f0       	brmi	.+18     	; 0x880 <__mulsf3_pse+0x7a>
 86e:	ee 0f       	add	r30, r30
 870:	ff 1f       	adc	r31, r31
 872:	bb 1f       	adc	r27, r27
 874:	66 1f       	adc	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	91 50       	subi	r25, 0x01	; 1
 87c:	50 40       	sbci	r21, 0x00	; 0
 87e:	a9 f7       	brne	.-22     	; 0x86a <__mulsf3_pse+0x64>
 880:	9e 3f       	cpi	r25, 0xFE	; 254
 882:	51 05       	cpc	r21, r1
 884:	70 f0       	brcs	.+28     	; 0x8a2 <__mulsf3_pse+0x9c>
 886:	5c cf       	rjmp	.-328    	; 0x740 <__fp_inf>
 888:	a6 cf       	rjmp	.-180    	; 0x7d6 <__fp_szero>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	ec f3       	brlt	.-6      	; 0x888 <__mulsf3_pse+0x82>
 88e:	98 3e       	cpi	r25, 0xE8	; 232
 890:	dc f3       	brlt	.-10     	; 0x888 <__mulsf3_pse+0x82>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b7 95       	ror	r27
 89a:	f7 95       	ror	r31
 89c:	e7 95       	ror	r30
 89e:	9f 5f       	subi	r25, 0xFF	; 255
 8a0:	c1 f7       	brne	.-16     	; 0x892 <__mulsf3_pse+0x8c>
 8a2:	fe 2b       	or	r31, r30
 8a4:	88 0f       	add	r24, r24
 8a6:	91 1d       	adc	r25, r1
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
