
Interrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083e  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026b  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__vector_1>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3e d0       	rcall	.+124    	; 0x116 <main>
  9a:	3f c0       	rjmp	.+126    	; 0x11a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_1>:
#include <avr/interrupt.h>
#define Use_IE0_Interrupt (EIMSK |= (0x01 << INT0))		// PORTD0를 인터럽트 핀으로 사용
#define IE0_Detect_Falling EICRA &= ~(0x01 << ISC00)	// 하강엣지
#define IE0_Detect_Rising (EICRA |= ((0x01 << ISC01) | (0x01 << ISC00)))	// 상승엣지

ISR(INT0_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	0b b6       	in	r0, 0x3b	; 59
  aa:	0f 92       	push	r0
  ac:	8f 93       	push	r24
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	if ((EICRA & (0x01 << ISC00)) == 0){
  b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
  b6:	80 fd       	sbrc	r24, 0
  b8:	09 c0       	rjmp	.+18     	; 0xcc <__vector_1+0x2e>
		PORTA |= (0x01 << PORTA0);
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8b bb       	out	0x1b, r24	; 27
		IE0_Detect_Rising;
  c0:	ea e6       	ldi	r30, 0x6A	; 106
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
  ca:	08 c0       	rjmp	.+16     	; 0xdc <__vector_1+0x3e>
	}
	else {
		PORTA &= ~(0x01 << PORTA0);
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	8b bb       	out	0x1b, r24	; 27
		IE0_Detect_Falling;
  d2:	ea e6       	ldi	r30, 0x6A	; 106
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	80 83       	st	Z, r24
	}
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0b be       	out	0x3b, r0	; 59
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <initialize>:

void initialize(void){
	DDRA |= (0x01 << PORTA0);	// LED
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8a bb       	out	0x1a, r24	; 26
	DDRD &= ~(0x01 << PORTD0); PORTD |= (0x01 << PORTD0);	// 스위치용 포트(내부 풀업 사용)
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	82 bb       	out	0x12, r24	; 18
	
	IE0_Detect_Falling;			// 하강 엣지
 102:	ea e6       	ldi	r30, 0x6A	; 106
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	80 83       	st	Z, r24
	Use_IE0_Interrupt;			// 인터럽트 활성
 10c:	89 b7       	in	r24, 0x39	; 57
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	89 bf       	out	0x39, r24	; 57
	sei();						// 전역 인터럽트
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
	initialize();
 116:	ec df       	rcall	.-40     	; 0xf0 <initialize>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x2>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
